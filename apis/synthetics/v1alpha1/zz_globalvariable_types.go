// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GlobalVariableInitParameters struct {

	// (String) Description of the global variable.
	// Description of the global variable.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Synthetics global variable name.
	// Synthetics global variable name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Additional options for the variable, such as a MFA token. (see below for nested schema)
	// Additional options for the variable, such as a MFA token.
	Options []OptionsInitParameters `json:"options,omitempty" tf:"options,omitempty"`

	// (String) Id of the Synthetics test to use for a variable from test.
	// Id of the Synthetics test to use for a variable from test.
	ParseTestID *string `json:"parseTestId,omitempty" tf:"parse_test_id,omitempty"`

	// (Block List, Max: 1) ID of the Synthetics test to use a source of the global variable value. (see below for nested schema)
	// ID of the Synthetics test to use a source of the global variable value.
	ParseTestOptions []ParseTestOptionsInitParameters `json:"parseTestOptions,omitempty" tf:"parse_test_options,omitempty"`

	// (Set of String) A list of role identifiers to associate with the Synthetics global variable.
	// A list of role identifiers to associate with the Synthetics global variable.
	// +listType=set
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// (Boolean) If set to true, the value of the global variable is hidden. Defaults to false.
	// If set to true, the value of the global variable is hidden. Defaults to `false`.
	Secure *bool `json:"secure,omitempty" tf:"secure,omitempty"`

	// (List of String) A list of tags to associate with your synthetics global variable.
	// A list of tags to associate with your synthetics global variable.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type GlobalVariableObservation struct {

	// (String) Description of the global variable.
	// Description of the global variable.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Synthetics global variable name.
	// Synthetics global variable name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Additional options for the variable, such as a MFA token. (see below for nested schema)
	// Additional options for the variable, such as a MFA token.
	Options []OptionsObservation `json:"options,omitempty" tf:"options,omitempty"`

	// (String) Id of the Synthetics test to use for a variable from test.
	// Id of the Synthetics test to use for a variable from test.
	ParseTestID *string `json:"parseTestId,omitempty" tf:"parse_test_id,omitempty"`

	// (Block List, Max: 1) ID of the Synthetics test to use a source of the global variable value. (see below for nested schema)
	// ID of the Synthetics test to use a source of the global variable value.
	ParseTestOptions []ParseTestOptionsObservation `json:"parseTestOptions,omitempty" tf:"parse_test_options,omitempty"`

	// (Set of String) A list of role identifiers to associate with the Synthetics global variable.
	// A list of role identifiers to associate with the Synthetics global variable.
	// +listType=set
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// (Boolean) If set to true, the value of the global variable is hidden. Defaults to false.
	// If set to true, the value of the global variable is hidden. Defaults to `false`.
	Secure *bool `json:"secure,omitempty" tf:"secure,omitempty"`

	// (List of String) A list of tags to associate with your synthetics global variable.
	// A list of tags to associate with your synthetics global variable.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type GlobalVariableParameters struct {

	// (String) Description of the global variable.
	// Description of the global variable.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Synthetics global variable name.
	// Synthetics global variable name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Additional options for the variable, such as a MFA token. (see below for nested schema)
	// Additional options for the variable, such as a MFA token.
	// +kubebuilder:validation:Optional
	Options []OptionsParameters `json:"options,omitempty" tf:"options,omitempty"`

	// (String) Id of the Synthetics test to use for a variable from test.
	// Id of the Synthetics test to use for a variable from test.
	// +kubebuilder:validation:Optional
	ParseTestID *string `json:"parseTestId,omitempty" tf:"parse_test_id,omitempty"`

	// (Block List, Max: 1) ID of the Synthetics test to use a source of the global variable value. (see below for nested schema)
	// ID of the Synthetics test to use a source of the global variable value.
	// +kubebuilder:validation:Optional
	ParseTestOptions []ParseTestOptionsParameters `json:"parseTestOptions,omitempty" tf:"parse_test_options,omitempty"`

	// (Set of String) A list of role identifiers to associate with the Synthetics global variable.
	// A list of role identifiers to associate with the Synthetics global variable.
	// +kubebuilder:validation:Optional
	// +listType=set
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// (Boolean) If set to true, the value of the global variable is hidden. Defaults to false.
	// If set to true, the value of the global variable is hidden. Defaults to `false`.
	// +kubebuilder:validation:Optional
	Secure *bool `json:"secure,omitempty" tf:"secure,omitempty"`

	// (List of String) A list of tags to associate with your synthetics global variable.
	// A list of tags to associate with your synthetics global variable.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String, Sensitive) The value of the global variable.
	// The value of the global variable.
	// +kubebuilder:validation:Optional
	ValueSecretRef v1.SecretKeySelector `json:"valueSecretRef" tf:"-"`
}

type OptionsInitParameters struct {

	// (Block List, Max: 1) Parameters needed for MFA/TOTP. (see below for nested schema)
	// Parameters needed for MFA/TOTP.
	TotpParameters []TotpParametersInitParameters `json:"totpParameters,omitempty" tf:"totp_parameters,omitempty"`
}

type OptionsObservation struct {

	// (Block List, Max: 1) Parameters needed for MFA/TOTP. (see below for nested schema)
	// Parameters needed for MFA/TOTP.
	TotpParameters []TotpParametersObservation `json:"totpParameters,omitempty" tf:"totp_parameters,omitempty"`
}

type OptionsParameters struct {

	// (Block List, Max: 1) Parameters needed for MFA/TOTP. (see below for nested schema)
	// Parameters needed for MFA/TOTP.
	// +kubebuilder:validation:Optional
	TotpParameters []TotpParametersParameters `json:"totpParameters,omitempty" tf:"totp_parameters,omitempty"`
}

type ParseTestOptionsInitParameters struct {

	// (String) Required when type = http_header. Defines the header to use to extract the value
	// Required when type = `http_header`. Defines the header to use to extract the value
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// (String) When type is local_variable, name of the local variable to use to extract the value.
	// When type is `local_variable`, name of the local variable to use to extract the value.
	LocalVariableName *string `json:"localVariableName,omitempty" tf:"local_variable_name,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Parser []ParserInitParameters `json:"parser,omitempty" tf:"parser,omitempty"`

	// (String) Defines the source to use to extract the value. Valid values are http_body, http_header, http_status_code, local_variable.
	// Defines the source to use to extract the value. Valid values are `http_body`, `http_header`, `http_status_code`, `local_variable`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ParseTestOptionsObservation struct {

	// (String) Required when type = http_header. Defines the header to use to extract the value
	// Required when type = `http_header`. Defines the header to use to extract the value
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// (String) When type is local_variable, name of the local variable to use to extract the value.
	// When type is `local_variable`, name of the local variable to use to extract the value.
	LocalVariableName *string `json:"localVariableName,omitempty" tf:"local_variable_name,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Parser []ParserObservation `json:"parser,omitempty" tf:"parser,omitempty"`

	// (String) Defines the source to use to extract the value. Valid values are http_body, http_header, http_status_code, local_variable.
	// Defines the source to use to extract the value. Valid values are `http_body`, `http_header`, `http_status_code`, `local_variable`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ParseTestOptionsParameters struct {

	// (String) Required when type = http_header. Defines the header to use to extract the value
	// Required when type = `http_header`. Defines the header to use to extract the value
	// +kubebuilder:validation:Optional
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// (String) When type is local_variable, name of the local variable to use to extract the value.
	// When type is `local_variable`, name of the local variable to use to extract the value.
	// +kubebuilder:validation:Optional
	LocalVariableName *string `json:"localVariableName,omitempty" tf:"local_variable_name,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Parser []ParserParameters `json:"parser,omitempty" tf:"parser,omitempty"`

	// (String) Defines the source to use to extract the value. Valid values are http_body, http_header, http_status_code, local_variable.
	// Defines the source to use to extract the value. Valid values are `http_body`, `http_header`, `http_status_code`, `local_variable`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ParserInitParameters struct {

	// (String) Defines the source to use to extract the value. Valid values are http_body, http_header, http_status_code, local_variable.
	// Type of parser to extract the value. Valid values are `raw`, `json_path`, `regex`, `x_path`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String, Sensitive) The value of the global variable.
	// Value for the parser to use, required for type `json_path` or `regex`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ParserObservation struct {

	// (String) Defines the source to use to extract the value. Valid values are http_body, http_header, http_status_code, local_variable.
	// Type of parser to extract the value. Valid values are `raw`, `json_path`, `regex`, `x_path`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String, Sensitive) The value of the global variable.
	// Value for the parser to use, required for type `json_path` or `regex`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ParserParameters struct {

	// (String) Defines the source to use to extract the value. Valid values are http_body, http_header, http_status_code, local_variable.
	// Type of parser to extract the value. Valid values are `raw`, `json_path`, `regex`, `x_path`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String, Sensitive) The value of the global variable.
	// Value for the parser to use, required for type `json_path` or `regex`.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TotpParametersInitParameters struct {

	// (Number) Number of digits for the OTP.
	// Number of digits for the OTP.
	Digits *float64 `json:"digits,omitempty" tf:"digits,omitempty"`

	// (Number) Interval for which to refresh the token (in seconds).
	// Interval for which to refresh the token (in seconds).
	RefreshInterval *float64 `json:"refreshInterval,omitempty" tf:"refresh_interval,omitempty"`
}

type TotpParametersObservation struct {

	// (Number) Number of digits for the OTP.
	// Number of digits for the OTP.
	Digits *float64 `json:"digits,omitempty" tf:"digits,omitempty"`

	// (Number) Interval for which to refresh the token (in seconds).
	// Interval for which to refresh the token (in seconds).
	RefreshInterval *float64 `json:"refreshInterval,omitempty" tf:"refresh_interval,omitempty"`
}

type TotpParametersParameters struct {

	// (Number) Number of digits for the OTP.
	// Number of digits for the OTP.
	// +kubebuilder:validation:Optional
	Digits *float64 `json:"digits" tf:"digits,omitempty"`

	// (Number) Interval for which to refresh the token (in seconds).
	// Interval for which to refresh the token (in seconds).
	// +kubebuilder:validation:Optional
	RefreshInterval *float64 `json:"refreshInterval" tf:"refresh_interval,omitempty"`
}

// GlobalVariableSpec defines the desired state of GlobalVariable
type GlobalVariableSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GlobalVariableParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GlobalVariableInitParameters `json:"initProvider,omitempty"`
}

// GlobalVariableStatus defines the observed state of GlobalVariable.
type GlobalVariableStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GlobalVariableObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GlobalVariable is the Schema for the GlobalVariables API. Provides a Datadog synthetics global variable resource. This can be used to create and manage Datadog synthetics global variables.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type GlobalVariable struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.valueSecretRef)",message="spec.forProvider.valueSecretRef is a required parameter"
	Spec   GlobalVariableSpec   `json:"spec"`
	Status GlobalVariableStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GlobalVariableList contains a list of GlobalVariables
type GlobalVariableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GlobalVariable `json:"items"`
}

// Repository type metadata.
var (
	GlobalVariable_Kind             = "GlobalVariable"
	GlobalVariable_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GlobalVariable_Kind}.String()
	GlobalVariable_KindAPIVersion   = GlobalVariable_Kind + "." + CRDGroupVersion.String()
	GlobalVariable_GroupVersionKind = CRDGroupVersion.WithKind(GlobalVariable_Kind)
)

func init() {
	SchemeBuilder.Register(&GlobalVariable{}, &GlobalVariableList{})
}
