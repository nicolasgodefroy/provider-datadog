// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ComputeInitParameters struct {

	// (String) The aggregation methods for event platform queries. Valid values are count, cardinality, median, pc75, pc90, pc95, pc98, pc99, sum, min, max, avg.
	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// (Number) A time interval in milliseconds.
	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// (String) The measurable attribute to compute.
	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type ComputeObservation struct {

	// (String) The aggregation methods for event platform queries. Valid values are count, cardinality, median, pc75, pc90, pc95, pc98, pc99, sum, min, max, avg.
	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// (Number) A time interval in milliseconds.
	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// (String) The measurable attribute to compute.
	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type ComputeParameters struct {

	// (String) The aggregation methods for event platform queries. Valid values are count, cardinality, median, pc75, pc90, pc95, pc98, pc99, sum, min, max, avg.
	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Optional
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// (Number) A time interval in milliseconds.
	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// (String) The measurable attribute to compute.
	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type CustomScheduleInitParameters struct {

	// (Block List, Min: 1, Max: 1) A list of recurrence definitions. Length must be 1. (see below for nested schema)
	// A list of recurrence definitions. Length must be 1.
	Recurrence []CustomScheduleRecurrenceInitParameters `json:"recurrence,omitempty" tf:"recurrence,omitempty"`
}

type CustomScheduleObservation struct {

	// (Block List, Min: 1, Max: 1) A list of recurrence definitions. Length must be 1. (see below for nested schema)
	// A list of recurrence definitions. Length must be 1.
	Recurrence []CustomScheduleRecurrenceObservation `json:"recurrence,omitempty" tf:"recurrence,omitempty"`
}

type CustomScheduleParameters struct {

	// (Block List, Min: 1, Max: 1) A list of recurrence definitions. Length must be 1. (see below for nested schema)
	// A list of recurrence definitions. Length must be 1.
	// +kubebuilder:validation:Optional
	Recurrence []CustomScheduleRecurrenceParameters `json:"recurrence" tf:"recurrence,omitempty"`
}

type CustomScheduleRecurrenceInitParameters struct {

	// (String) Must be a valid rrule. See API docs for supported fields
	// Must be a valid `rrule`. See API docs for supported fields
	Rrule *string `json:"rrule,omitempty" tf:"rrule,omitempty"`

	// MM-DDThh:mm:ss'
	// Time to start recurrence cycle. Similar to DTSTART. Expected format 'YYYY-MM-DDThh:mm:ss'
	Start *string `json:"start,omitempty" tf:"start,omitempty"`

	// (String) 'tz database' format. Example: America/New_York or UTC
	// 'tz database' format. Example: `America/New_York` or `UTC`
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type CustomScheduleRecurrenceObservation struct {

	// (String) Must be a valid rrule. See API docs for supported fields
	// Must be a valid `rrule`. See API docs for supported fields
	Rrule *string `json:"rrule,omitempty" tf:"rrule,omitempty"`

	// MM-DDThh:mm:ss'
	// Time to start recurrence cycle. Similar to DTSTART. Expected format 'YYYY-MM-DDThh:mm:ss'
	Start *string `json:"start,omitempty" tf:"start,omitempty"`

	// (String) 'tz database' format. Example: America/New_York or UTC
	// 'tz database' format. Example: `America/New_York` or `UTC`
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type CustomScheduleRecurrenceParameters struct {

	// (String) Must be a valid rrule. See API docs for supported fields
	// Must be a valid `rrule`. See API docs for supported fields
	// +kubebuilder:validation:Optional
	Rrule *string `json:"rrule" tf:"rrule,omitempty"`

	// MM-DDThh:mm:ss'
	// Time to start recurrence cycle. Similar to DTSTART. Expected format 'YYYY-MM-DDThh:mm:ss'
	// +kubebuilder:validation:Optional
	Start *string `json:"start,omitempty" tf:"start,omitempty"`

	// (String) 'tz database' format. Example: America/New_York or UTC
	// 'tz database' format. Example: `America/New_York` or `UTC`
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone" tf:"timezone,omitempty"`
}

type EvaluationWindowInitParameters struct {

	// (String) The time of the day at which a one day cumulative evaluation window starts. Must be defined in UTC time in HH:mm format.
	// The time of the day at which a one day cumulative evaluation window starts. Must be defined in UTC time in `HH:mm` format.
	DayStarts *string `json:"dayStarts,omitempty" tf:"day_starts,omitempty"`

	// (Number) The minute of the hour at which a one hour cumulative evaluation window starts. Must be between 0 and 59.
	// The minute of the hour at which a one hour cumulative evaluation window starts. Must be between 0 and 59.
	HourStarts *float64 `json:"hourStarts,omitempty" tf:"hour_starts,omitempty"`

	// (Number) The day of the month at which a one month cumulative evaluation window starts. Must be a value of 1.
	// The day of the month at which a one month cumulative evaluation window starts. Must be a value of 1.
	MonthStarts *float64 `json:"monthStarts,omitempty" tf:"month_starts,omitempty"`
}

type EvaluationWindowObservation struct {

	// (String) The time of the day at which a one day cumulative evaluation window starts. Must be defined in UTC time in HH:mm format.
	// The time of the day at which a one day cumulative evaluation window starts. Must be defined in UTC time in `HH:mm` format.
	DayStarts *string `json:"dayStarts,omitempty" tf:"day_starts,omitempty"`

	// (Number) The minute of the hour at which a one hour cumulative evaluation window starts. Must be between 0 and 59.
	// The minute of the hour at which a one hour cumulative evaluation window starts. Must be between 0 and 59.
	HourStarts *float64 `json:"hourStarts,omitempty" tf:"hour_starts,omitempty"`

	// (Number) The day of the month at which a one month cumulative evaluation window starts. Must be a value of 1.
	// The day of the month at which a one month cumulative evaluation window starts. Must be a value of 1.
	MonthStarts *float64 `json:"monthStarts,omitempty" tf:"month_starts,omitempty"`
}

type EvaluationWindowParameters struct {

	// (String) The time of the day at which a one day cumulative evaluation window starts. Must be defined in UTC time in HH:mm format.
	// The time of the day at which a one day cumulative evaluation window starts. Must be defined in UTC time in `HH:mm` format.
	// +kubebuilder:validation:Optional
	DayStarts *string `json:"dayStarts,omitempty" tf:"day_starts,omitempty"`

	// (Number) The minute of the hour at which a one hour cumulative evaluation window starts. Must be between 0 and 59.
	// The minute of the hour at which a one hour cumulative evaluation window starts. Must be between 0 and 59.
	// +kubebuilder:validation:Optional
	HourStarts *float64 `json:"hourStarts,omitempty" tf:"hour_starts,omitempty"`

	// (Number) The day of the month at which a one month cumulative evaluation window starts. Must be a value of 1.
	// The day of the month at which a one month cumulative evaluation window starts. Must be a value of 1.
	// +kubebuilder:validation:Optional
	MonthStarts *float64 `json:"monthStarts,omitempty" tf:"month_starts,omitempty"`
}

type EventQueryInitParameters struct {

	// (Block List, Min: 1) The compute options. (see below for nested schema)
	// The compute options.
	Compute []ComputeInitParameters `json:"compute,omitempty" tf:"compute,omitempty"`

	// based queries. Valid values are rum, ci_pipelines, ci_tests, audit, events, logs, spans, database_queries, network.
	// The data source for event platform-based queries. Valid values are `rum`, `ci_pipelines`, `ci_tests`, `audit`, `events`, `logs`, `spans`, `database_queries`, `network`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// (Block List) Group by options. (see below for nested schema)
	// Group by options.
	GroupBy []GroupByInitParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// (List of String) An array of index names to query in the stream.
	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// (String) Name of Datadog monitor.
	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1, Max: 1) The search options. (see below for nested schema)
	// The search options.
	Search []SearchInitParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type EventQueryObservation struct {

	// (Block List, Min: 1) The compute options. (see below for nested schema)
	// The compute options.
	Compute []ComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// based queries. Valid values are rum, ci_pipelines, ci_tests, audit, events, logs, spans, database_queries, network.
	// The data source for event platform-based queries. Valid values are `rum`, `ci_pipelines`, `ci_tests`, `audit`, `events`, `logs`, `spans`, `database_queries`, `network`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// (Block List) Group by options. (see below for nested schema)
	// Group by options.
	GroupBy []GroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// (List of String) An array of index names to query in the stream.
	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// (String) Name of Datadog monitor.
	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1, Max: 1) The search options. (see below for nested schema)
	// The search options.
	Search []SearchObservation `json:"search,omitempty" tf:"search,omitempty"`
}

type EventQueryParameters struct {

	// (Block List, Min: 1) The compute options. (see below for nested schema)
	// The compute options.
	// +kubebuilder:validation:Optional
	Compute []ComputeParameters `json:"compute" tf:"compute,omitempty"`

	// based queries. Valid values are rum, ci_pipelines, ci_tests, audit, events, logs, spans, database_queries, network.
	// The data source for event platform-based queries. Valid values are `rum`, `ci_pipelines`, `ci_tests`, `audit`, `events`, `logs`, `spans`, `database_queries`, `network`.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// (Block List) Group by options. (see below for nested schema)
	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []GroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// (List of String) An array of index names to query in the stream.
	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// (String) Name of Datadog monitor.
	// The name of query for use in formulas.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Block List, Min: 1, Max: 1) The search options. (see below for nested schema)
	// The search options.
	// +kubebuilder:validation:Optional
	Search []SearchParameters `json:"search" tf:"search,omitempty"`
}

type GroupByInitParameters struct {

	// (String) The event facet.
	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// (Number) The number of groups to return.
	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// (Block List, Max: 1) The options for sorting group by results. (see below for nested schema)
	// The options for sorting group by results.
	Sort []SortInitParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type GroupByObservation struct {

	// (String) The event facet.
	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// (Number) The number of groups to return.
	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// (Block List, Max: 1) The options for sorting group by results. (see below for nested schema)
	// The options for sorting group by results.
	Sort []SortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type GroupByParameters struct {

	// (String) The event facet.
	// The event facet.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// (Number) The number of groups to return.
	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// (Block List, Max: 1) The options for sorting group by results. (see below for nested schema)
	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []SortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type MonitorInitParameters struct {

	// (Boolean) A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log monitors. Defaults to false.
	// A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log monitors. Defaults to `false`.
	EnableLogsSample *bool `json:"enableLogsSample,omitempty" tf:"enable_logs_sample,omitempty"`

	// notification. Supports the @username notification allowed elsewhere.
	// A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
	EscalationMessage *string `json:"escalationMessage,omitempty" tf:"escalation_message,omitempty"`

	// negative integer.
	// (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer.
	//
	// For example, if the value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have data during evaluation.
	EvaluationDelay *float64 `json:"evaluationDelay,omitempty" tf:"evaluation_delay,omitempty"`

	// (Boolean) A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO, composite monitor).
	// A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO, composite monitor).
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// (String) The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour, and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
	// The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour, and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
	GroupRetentionDuration *string `json:"groupRetentionDuration,omitempty" tf:"group_retention_duration,omitempty"`

	// (Boolean) Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to false.
	// Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to `false`.
	GroupbySimpleMonitor *bool `json:"groupbySimpleMonitor,omitempty" tf:"groupby_simple_monitor,omitempty"`

	// (Boolean) A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
	// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to `true`.
	IncludeTags *bool `json:"includeTags,omitempty" tf:"include_tags,omitempty"`

	// (Boolean, Deprecated) A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to false. Deprecated. Use restricted_roles.
	// A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`. **Deprecated.** Use `restricted_roles`.
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// (String) A message to include with notifications for this monitor.
	// A message to include with notifications for this monitor.
	//
	// Email notifications can be sent to specific users by using the same `@username` notation as events.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (Block List, Max: 1) A mapping containing recovery_window and trigger_window values, e.g. last_15m . Can only be used for, and are required for, anomaly monitors. (see below for nested schema)
	// A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are required for, anomaly monitors.
	MonitorThresholdWindows []MonitorThresholdWindowsInitParameters `json:"monitorThresholdWindows,omitempty" tf:"monitor_threshold_windows,omitempty"`

	// (Block List, Max: 1) Alert thresholds of the monitor. (see below for nested schema)
	// Alert thresholds of the monitor.
	MonitorThresholds []MonitorThresholdsInitParameters `json:"monitorThresholds,omitempty" tf:"monitor_thresholds,omitempty"`

	// (String) Name of Datadog monitor.
	// Name of Datadog monitor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The time (in seconds) to skip evaluations for new groups.
	// The time (in seconds) to skip evaluations for new groups.
	//
	// `new_group_delay` overrides `new_host_delay` if it is set to a nonzero value.
	NewGroupDelay *float64 `json:"newGroupDelay,omitempty" tf:"new_group_delay,omitempty"`

	// negative integer. This value is ignored for simple monitors and monitors not grouped by host. The only case when this should be used is to override the default and set new_host_delay to zero for monitors grouped by host. Deprecated. Use new_group_delay except when setting new_host_delay to zero. Defaults to 300.
	// **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors and monitors not grouped by host. The only case when this should be used is to override the default and set `new_host_delay` to zero for monitors grouped by host. **Deprecated.** Use `new_group_delay` except when setting `new_host_delay` to zero. Defaults to `300`.
	NewHostDelay *float64 `json:"newHostDelay,omitempty" tf:"new_host_delay,omitempty"`

	// (Number) The number of minutes before a monitor will notify when data stops reporting.
	// The number of minutes before a monitor will notify when data stops reporting.
	//
	// We recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks. Defaults to `10`.
	NoDataTimeframe *float64 `json:"noDataTimeframe,omitempty" tf:"no_data_timeframe,omitempty"`

	// (String) Toggles the display of additional content sent in the monitor notification. Valid values are show_all, hide_query, hide_handles, hide_all.
	// Toggles the display of additional content sent in the monitor notification. Valid values are `show_all`, `hide_query`, `hide_handles`, `hide_all`.
	NotificationPresetName *string `json:"notificationPresetName,omitempty" tf:"notification_preset_name,omitempty"`

	// (Boolean) A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to false.
	// A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
	NotifyAudit *bool `json:"notifyAudit,omitempty" tf:"notify_audit,omitempty"`

	// alert.
	// Controls what granularity a monitor alerts on. Only available for monitors with groupings. For instance, a monitor grouped by `cluster`, `namespace`, and `pod` can be configured to only notify on each new `cluster` violating the alert conditions by setting `notify_by` to `['cluster']`. Tags mentioned in `notify_by` must be a subset of the grouping tags in the query. For example, a query grouped by `cluster` and `namespace` cannot notify on `region`. Setting `notify_by` to `[*]` configures the monitor to notify as a simple-alert.
	// +listType=set
	NotifyBy []*string `json:"notifyBy,omitempty" tf:"notify_by,omitempty"`

	// (Boolean) A boolean indicating whether this monitor will notify when data stops reporting. Defaults to false.
	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults to `false`.
	NotifyNoData *bool `json:"notifyNoData,omitempty" tf:"notify_no_data,omitempty"`

	// (String) Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results in different behavior depending on the monitor query type. For monitors using Count queries, an empty monitor evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than Count, for example Gauge, Measure, or Rate, the monitor shows the last known status. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors. Valid values are: show_no_data, show_and_notify_no_data, resolve, and default.
	// Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results in different behavior depending on the monitor query type. For monitors using `Count` queries, an empty monitor evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than `Count`, for example `Gauge`, `Measure`, or `Rate`, the monitor shows the last known status. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors. Valid values are: `show_no_data`, `show_and_notify_no_data`, `resolve`, and `default`.
	OnMissingData *string `json:"onMissingData,omitempty" tf:"on_missing_data,omitempty"`

	// (String) Integer from 1 (high) to 5 (low) indicating alert severity.
	// Integer from 1 (high) to 5 (low) indicating alert severity.
	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`

	// (String) The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending on the monitor type, please see the API Reference for details.
	// The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending on the monitor type, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for details.
	//
	// **Note:** APM latency data is now available as Distribution Metrics. We strongly recommend updating monitor definitions to query the new metrics.datadoghq.com/tracing/guide/ddsketch_trace_metrics/).
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// notify on the current status. It will only re-notify if it's not resolved.
	// The number of minutes after the last notification before a monitor will re-notify on the current status. It will only re-notify if it's not resolved.
	RenotifyInterval *float64 `json:"renotifyInterval,omitempty" tf:"renotify_interval,omitempty"`

	// notification messages that should be sent on the current status.
	// The number of re-notification messages that should be sent on the current status.
	RenotifyOccurrences *float64 `json:"renotifyOccurrences,omitempty" tf:"renotify_occurrences,omitempty"`

	// notification messages should be sent. Valid values are alert, warn, no data.
	// The types of statuses for which re-notification messages should be sent. Valid values are `alert`, `warn`, `no data`.
	// +listType=set
	RenotifyStatuses []*string `json:"renotifyStatuses,omitempty" tf:"renotify_statuses,omitempty"`

	// (Boolean) A boolean indicating whether this monitor needs a full window of data before it's evaluated. Datadog strongly recommends you set this to false for sparse metrics, otherwise some evaluations may be skipped. If there's a custom_schedule set, require_full_window must be false and will be ignored. Defaults to true.
	// A boolean indicating whether this monitor needs a full window of data before it's evaluated. Datadog strongly recommends you set this to `false` for sparse metrics, otherwise some evaluations may be skipped. If there's a custom_schedule set, `require_full_window` must be false and will be ignored. Defaults to `true`.
	RequireFullWindow *bool `json:"requireFullWindow,omitempty" tf:"require_full_window,omitempty"`

	// (Set of String) A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique identifiers can be pulled from the Roles API in the data.id field.
	// A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique identifiers can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) in the `data.id` field.
	// +listType=set
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// (Block List, Max: 1) Configuration options for scheduling. (see below for nested schema)
	// Configuration options for scheduling.
	SchedulingOptions []SchedulingOptionsInitParameters `json:"schedulingOptions,omitempty" tf:"scheduling_options,omitempty"`

	// (Set of String) A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Number) The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
	// The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
	TimeoutH *float64 `json:"timeoutH,omitempty" tf:"timeout_h,omitempty"`

	// analytics alert, slo alert, event-v2 alert, audit alert, ci-pipelines alert, ci-tests alert, error-tracking alert, database-monitoring alert, network-performance alert.
	// The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type cannot be changed after a monitor is created. Valid values are `composite`, `event alert`, `log alert`, `metric alert`, `process alert`, `query alert`, `rum alert`, `service check`, `synthetics alert`, `trace-analytics alert`, `slo alert`, `event-v2 alert`, `audit alert`, `ci-pipelines alert`, `ci-tests alert`, `error-tracking alert`, `database-monitoring alert`, `network-performance alert`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Boolean) If set to false, skip the validation call done during plan.
	// If set to `false`, skip the validation call done during plan.
	Validate *bool `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Variables []VariablesInitParameters `json:"variables,omitempty" tf:"variables,omitempty"`
}

type MonitorObservation struct {

	// (Boolean) A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log monitors. Defaults to false.
	// A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log monitors. Defaults to `false`.
	EnableLogsSample *bool `json:"enableLogsSample,omitempty" tf:"enable_logs_sample,omitempty"`

	// (Boolean) Whether or not a list of samples which triggered the alert is included. This is only used by CI Test and Pipeline monitors.
	// Whether or not a list of samples which triggered the alert is included. This is only used by CI Test and Pipeline monitors.
	EnableSamples *bool `json:"enableSamples,omitempty" tf:"enable_samples,omitempty"`

	// notification. Supports the @username notification allowed elsewhere.
	// A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
	EscalationMessage *string `json:"escalationMessage,omitempty" tf:"escalation_message,omitempty"`

	// negative integer.
	// (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer.
	//
	// For example, if the value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have data during evaluation.
	EvaluationDelay *float64 `json:"evaluationDelay,omitempty" tf:"evaluation_delay,omitempty"`

	// (Boolean) A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO, composite monitor).
	// A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO, composite monitor).
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// (String) The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour, and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
	// The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour, and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
	GroupRetentionDuration *string `json:"groupRetentionDuration,omitempty" tf:"group_retention_duration,omitempty"`

	// (Boolean) Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to false.
	// Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to `false`.
	GroupbySimpleMonitor *bool `json:"groupbySimpleMonitor,omitempty" tf:"groupby_simple_monitor,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
	// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to `true`.
	IncludeTags *bool `json:"includeTags,omitempty" tf:"include_tags,omitempty"`

	// (Boolean, Deprecated) A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to false. Deprecated. Use restricted_roles.
	// A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`. **Deprecated.** Use `restricted_roles`.
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// (String) A message to include with notifications for this monitor.
	// A message to include with notifications for this monitor.
	//
	// Email notifications can be sent to specific users by using the same `@username` notation as events.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (Block List, Max: 1) A mapping containing recovery_window and trigger_window values, e.g. last_15m . Can only be used for, and are required for, anomaly monitors. (see below for nested schema)
	// A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are required for, anomaly monitors.
	MonitorThresholdWindows []MonitorThresholdWindowsObservation `json:"monitorThresholdWindows,omitempty" tf:"monitor_threshold_windows,omitempty"`

	// (Block List, Max: 1) Alert thresholds of the monitor. (see below for nested schema)
	// Alert thresholds of the monitor.
	MonitorThresholds []MonitorThresholdsObservation `json:"monitorThresholds,omitempty" tf:"monitor_thresholds,omitempty"`

	// (String) Name of Datadog monitor.
	// Name of Datadog monitor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The time (in seconds) to skip evaluations for new groups.
	// The time (in seconds) to skip evaluations for new groups.
	//
	// `new_group_delay` overrides `new_host_delay` if it is set to a nonzero value.
	NewGroupDelay *float64 `json:"newGroupDelay,omitempty" tf:"new_group_delay,omitempty"`

	// negative integer. This value is ignored for simple monitors and monitors not grouped by host. The only case when this should be used is to override the default and set new_host_delay to zero for monitors grouped by host. Deprecated. Use new_group_delay except when setting new_host_delay to zero. Defaults to 300.
	// **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors and monitors not grouped by host. The only case when this should be used is to override the default and set `new_host_delay` to zero for monitors grouped by host. **Deprecated.** Use `new_group_delay` except when setting `new_host_delay` to zero. Defaults to `300`.
	NewHostDelay *float64 `json:"newHostDelay,omitempty" tf:"new_host_delay,omitempty"`

	// (Number) The number of minutes before a monitor will notify when data stops reporting.
	// The number of minutes before a monitor will notify when data stops reporting.
	//
	// We recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks. Defaults to `10`.
	NoDataTimeframe *float64 `json:"noDataTimeframe,omitempty" tf:"no_data_timeframe,omitempty"`

	// (String) Toggles the display of additional content sent in the monitor notification. Valid values are show_all, hide_query, hide_handles, hide_all.
	// Toggles the display of additional content sent in the monitor notification. Valid values are `show_all`, `hide_query`, `hide_handles`, `hide_all`.
	NotificationPresetName *string `json:"notificationPresetName,omitempty" tf:"notification_preset_name,omitempty"`

	// (Boolean) A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to false.
	// A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
	NotifyAudit *bool `json:"notifyAudit,omitempty" tf:"notify_audit,omitempty"`

	// alert.
	// Controls what granularity a monitor alerts on. Only available for monitors with groupings. For instance, a monitor grouped by `cluster`, `namespace`, and `pod` can be configured to only notify on each new `cluster` violating the alert conditions by setting `notify_by` to `['cluster']`. Tags mentioned in `notify_by` must be a subset of the grouping tags in the query. For example, a query grouped by `cluster` and `namespace` cannot notify on `region`. Setting `notify_by` to `[*]` configures the monitor to notify as a simple-alert.
	// +listType=set
	NotifyBy []*string `json:"notifyBy,omitempty" tf:"notify_by,omitempty"`

	// (Boolean) A boolean indicating whether this monitor will notify when data stops reporting. Defaults to false.
	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults to `false`.
	NotifyNoData *bool `json:"notifyNoData,omitempty" tf:"notify_no_data,omitempty"`

	// (String) Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results in different behavior depending on the monitor query type. For monitors using Count queries, an empty monitor evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than Count, for example Gauge, Measure, or Rate, the monitor shows the last known status. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors. Valid values are: show_no_data, show_and_notify_no_data, resolve, and default.
	// Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results in different behavior depending on the monitor query type. For monitors using `Count` queries, an empty monitor evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than `Count`, for example `Gauge`, `Measure`, or `Rate`, the monitor shows the last known status. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors. Valid values are: `show_no_data`, `show_and_notify_no_data`, `resolve`, and `default`.
	OnMissingData *string `json:"onMissingData,omitempty" tf:"on_missing_data,omitempty"`

	// (String) Integer from 1 (high) to 5 (low) indicating alert severity.
	// Integer from 1 (high) to 5 (low) indicating alert severity.
	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`

	// (String) The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending on the monitor type, please see the API Reference for details.
	// The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending on the monitor type, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for details.
	//
	// **Note:** APM latency data is now available as Distribution Metrics. We strongly recommend updating monitor definitions to query the new metrics.datadoghq.com/tracing/guide/ddsketch_trace_metrics/).
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// notify on the current status. It will only re-notify if it's not resolved.
	// The number of minutes after the last notification before a monitor will re-notify on the current status. It will only re-notify if it's not resolved.
	RenotifyInterval *float64 `json:"renotifyInterval,omitempty" tf:"renotify_interval,omitempty"`

	// notification messages that should be sent on the current status.
	// The number of re-notification messages that should be sent on the current status.
	RenotifyOccurrences *float64 `json:"renotifyOccurrences,omitempty" tf:"renotify_occurrences,omitempty"`

	// notification messages should be sent. Valid values are alert, warn, no data.
	// The types of statuses for which re-notification messages should be sent. Valid values are `alert`, `warn`, `no data`.
	// +listType=set
	RenotifyStatuses []*string `json:"renotifyStatuses,omitempty" tf:"renotify_statuses,omitempty"`

	// (Boolean) A boolean indicating whether this monitor needs a full window of data before it's evaluated. Datadog strongly recommends you set this to false for sparse metrics, otherwise some evaluations may be skipped. If there's a custom_schedule set, require_full_window must be false and will be ignored. Defaults to true.
	// A boolean indicating whether this monitor needs a full window of data before it's evaluated. Datadog strongly recommends you set this to `false` for sparse metrics, otherwise some evaluations may be skipped. If there's a custom_schedule set, `require_full_window` must be false and will be ignored. Defaults to `true`.
	RequireFullWindow *bool `json:"requireFullWindow,omitempty" tf:"require_full_window,omitempty"`

	// (Set of String) A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique identifiers can be pulled from the Roles API in the data.id field.
	// A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique identifiers can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) in the `data.id` field.
	// +listType=set
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// (Block List, Max: 1) Configuration options for scheduling. (see below for nested schema)
	// Configuration options for scheduling.
	SchedulingOptions []SchedulingOptionsObservation `json:"schedulingOptions,omitempty" tf:"scheduling_options,omitempty"`

	// (Set of String) A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Number) The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
	// The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
	TimeoutH *float64 `json:"timeoutH,omitempty" tf:"timeout_h,omitempty"`

	// analytics alert, slo alert, event-v2 alert, audit alert, ci-pipelines alert, ci-tests alert, error-tracking alert, database-monitoring alert, network-performance alert.
	// The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type cannot be changed after a monitor is created. Valid values are `composite`, `event alert`, `log alert`, `metric alert`, `process alert`, `query alert`, `rum alert`, `service check`, `synthetics alert`, `trace-analytics alert`, `slo alert`, `event-v2 alert`, `audit alert`, `ci-pipelines alert`, `ci-tests alert`, `error-tracking alert`, `database-monitoring alert`, `network-performance alert`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Boolean) If set to false, skip the validation call done during plan.
	// If set to `false`, skip the validation call done during plan.
	Validate *bool `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Variables []VariablesObservation `json:"variables,omitempty" tf:"variables,omitempty"`
}

type MonitorParameters struct {

	// (Boolean) A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log monitors. Defaults to false.
	// A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log monitors. Defaults to `false`.
	// +kubebuilder:validation:Optional
	EnableLogsSample *bool `json:"enableLogsSample,omitempty" tf:"enable_logs_sample,omitempty"`

	// notification. Supports the @username notification allowed elsewhere.
	// A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
	// +kubebuilder:validation:Optional
	EscalationMessage *string `json:"escalationMessage,omitempty" tf:"escalation_message,omitempty"`

	// negative integer.
	// (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer.
	//
	// For example, if the value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have data during evaluation.
	// +kubebuilder:validation:Optional
	EvaluationDelay *float64 `json:"evaluationDelay,omitempty" tf:"evaluation_delay,omitempty"`

	// (Boolean) A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO, composite monitor).
	// A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO, composite monitor).
	// +kubebuilder:validation:Optional
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// (String) The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour, and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
	// The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour, and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
	// +kubebuilder:validation:Optional
	GroupRetentionDuration *string `json:"groupRetentionDuration,omitempty" tf:"group_retention_duration,omitempty"`

	// (Boolean) Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to false.
	// Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to `false`.
	// +kubebuilder:validation:Optional
	GroupbySimpleMonitor *bool `json:"groupbySimpleMonitor,omitempty" tf:"groupby_simple_monitor,omitempty"`

	// (Boolean) A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
	// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to `true`.
	// +kubebuilder:validation:Optional
	IncludeTags *bool `json:"includeTags,omitempty" tf:"include_tags,omitempty"`

	// (Boolean, Deprecated) A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to false. Deprecated. Use restricted_roles.
	// A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`. **Deprecated.** Use `restricted_roles`.
	// +kubebuilder:validation:Optional
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// (String) A message to include with notifications for this monitor.
	// A message to include with notifications for this monitor.
	//
	// Email notifications can be sent to specific users by using the same `@username` notation as events.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (Block List, Max: 1) A mapping containing recovery_window and trigger_window values, e.g. last_15m . Can only be used for, and are required for, anomaly monitors. (see below for nested schema)
	// A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are required for, anomaly monitors.
	// +kubebuilder:validation:Optional
	MonitorThresholdWindows []MonitorThresholdWindowsParameters `json:"monitorThresholdWindows,omitempty" tf:"monitor_threshold_windows,omitempty"`

	// (Block List, Max: 1) Alert thresholds of the monitor. (see below for nested schema)
	// Alert thresholds of the monitor.
	// +kubebuilder:validation:Optional
	MonitorThresholds []MonitorThresholdsParameters `json:"monitorThresholds,omitempty" tf:"monitor_thresholds,omitempty"`

	// (String) Name of Datadog monitor.
	// Name of Datadog monitor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The time (in seconds) to skip evaluations for new groups.
	// The time (in seconds) to skip evaluations for new groups.
	//
	// `new_group_delay` overrides `new_host_delay` if it is set to a nonzero value.
	// +kubebuilder:validation:Optional
	NewGroupDelay *float64 `json:"newGroupDelay,omitempty" tf:"new_group_delay,omitempty"`

	// negative integer. This value is ignored for simple monitors and monitors not grouped by host. The only case when this should be used is to override the default and set new_host_delay to zero for monitors grouped by host. Deprecated. Use new_group_delay except when setting new_host_delay to zero. Defaults to 300.
	// **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors and monitors not grouped by host. The only case when this should be used is to override the default and set `new_host_delay` to zero for monitors grouped by host. **Deprecated.** Use `new_group_delay` except when setting `new_host_delay` to zero. Defaults to `300`.
	// +kubebuilder:validation:Optional
	NewHostDelay *float64 `json:"newHostDelay,omitempty" tf:"new_host_delay,omitempty"`

	// (Number) The number of minutes before a monitor will notify when data stops reporting.
	// The number of minutes before a monitor will notify when data stops reporting.
	//
	// We recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks. Defaults to `10`.
	// +kubebuilder:validation:Optional
	NoDataTimeframe *float64 `json:"noDataTimeframe,omitempty" tf:"no_data_timeframe,omitempty"`

	// (String) Toggles the display of additional content sent in the monitor notification. Valid values are show_all, hide_query, hide_handles, hide_all.
	// Toggles the display of additional content sent in the monitor notification. Valid values are `show_all`, `hide_query`, `hide_handles`, `hide_all`.
	// +kubebuilder:validation:Optional
	NotificationPresetName *string `json:"notificationPresetName,omitempty" tf:"notification_preset_name,omitempty"`

	// (Boolean) A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to false.
	// A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
	// +kubebuilder:validation:Optional
	NotifyAudit *bool `json:"notifyAudit,omitempty" tf:"notify_audit,omitempty"`

	// alert.
	// Controls what granularity a monitor alerts on. Only available for monitors with groupings. For instance, a monitor grouped by `cluster`, `namespace`, and `pod` can be configured to only notify on each new `cluster` violating the alert conditions by setting `notify_by` to `['cluster']`. Tags mentioned in `notify_by` must be a subset of the grouping tags in the query. For example, a query grouped by `cluster` and `namespace` cannot notify on `region`. Setting `notify_by` to `[*]` configures the monitor to notify as a simple-alert.
	// +kubebuilder:validation:Optional
	// +listType=set
	NotifyBy []*string `json:"notifyBy,omitempty" tf:"notify_by,omitempty"`

	// (Boolean) A boolean indicating whether this monitor will notify when data stops reporting. Defaults to false.
	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults to `false`.
	// +kubebuilder:validation:Optional
	NotifyNoData *bool `json:"notifyNoData,omitempty" tf:"notify_no_data,omitempty"`

	// (String) Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results in different behavior depending on the monitor query type. For monitors using Count queries, an empty monitor evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than Count, for example Gauge, Measure, or Rate, the monitor shows the last known status. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors. Valid values are: show_no_data, show_and_notify_no_data, resolve, and default.
	// Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results in different behavior depending on the monitor query type. For monitors using `Count` queries, an empty monitor evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than `Count`, for example `Gauge`, `Measure`, or `Rate`, the monitor shows the last known status. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors. Valid values are: `show_no_data`, `show_and_notify_no_data`, `resolve`, and `default`.
	// +kubebuilder:validation:Optional
	OnMissingData *string `json:"onMissingData,omitempty" tf:"on_missing_data,omitempty"`

	// (String) Integer from 1 (high) to 5 (low) indicating alert severity.
	// Integer from 1 (high) to 5 (low) indicating alert severity.
	// +kubebuilder:validation:Optional
	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`

	// (String) The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending on the monitor type, please see the API Reference for details.
	// The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending on the monitor type, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for details.
	//
	// **Note:** APM latency data is now available as Distribution Metrics. We strongly recommend updating monitor definitions to query the new metrics.datadoghq.com/tracing/guide/ddsketch_trace_metrics/).
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// notify on the current status. It will only re-notify if it's not resolved.
	// The number of minutes after the last notification before a monitor will re-notify on the current status. It will only re-notify if it's not resolved.
	// +kubebuilder:validation:Optional
	RenotifyInterval *float64 `json:"renotifyInterval,omitempty" tf:"renotify_interval,omitempty"`

	// notification messages that should be sent on the current status.
	// The number of re-notification messages that should be sent on the current status.
	// +kubebuilder:validation:Optional
	RenotifyOccurrences *float64 `json:"renotifyOccurrences,omitempty" tf:"renotify_occurrences,omitempty"`

	// notification messages should be sent. Valid values are alert, warn, no data.
	// The types of statuses for which re-notification messages should be sent. Valid values are `alert`, `warn`, `no data`.
	// +kubebuilder:validation:Optional
	// +listType=set
	RenotifyStatuses []*string `json:"renotifyStatuses,omitempty" tf:"renotify_statuses,omitempty"`

	// (Boolean) A boolean indicating whether this monitor needs a full window of data before it's evaluated. Datadog strongly recommends you set this to false for sparse metrics, otherwise some evaluations may be skipped. If there's a custom_schedule set, require_full_window must be false and will be ignored. Defaults to true.
	// A boolean indicating whether this monitor needs a full window of data before it's evaluated. Datadog strongly recommends you set this to `false` for sparse metrics, otherwise some evaluations may be skipped. If there's a custom_schedule set, `require_full_window` must be false and will be ignored. Defaults to `true`.
	// +kubebuilder:validation:Optional
	RequireFullWindow *bool `json:"requireFullWindow,omitempty" tf:"require_full_window,omitempty"`

	// (Set of String) A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique identifiers can be pulled from the Roles API in the data.id field.
	// A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique identifiers can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) in the `data.id` field.
	// +kubebuilder:validation:Optional
	// +listType=set
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// (Block List, Max: 1) Configuration options for scheduling. (see below for nested schema)
	// Configuration options for scheduling.
	// +kubebuilder:validation:Optional
	SchedulingOptions []SchedulingOptionsParameters `json:"schedulingOptions,omitempty" tf:"scheduling_options,omitempty"`

	// (Set of String) A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Number) The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
	// The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
	// +kubebuilder:validation:Optional
	TimeoutH *float64 `json:"timeoutH,omitempty" tf:"timeout_h,omitempty"`

	// analytics alert, slo alert, event-v2 alert, audit alert, ci-pipelines alert, ci-tests alert, error-tracking alert, database-monitoring alert, network-performance alert.
	// The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type cannot be changed after a monitor is created. Valid values are `composite`, `event alert`, `log alert`, `metric alert`, `process alert`, `query alert`, `rum alert`, `service check`, `synthetics alert`, `trace-analytics alert`, `slo alert`, `event-v2 alert`, `audit alert`, `ci-pipelines alert`, `ci-tests alert`, `error-tracking alert`, `database-monitoring alert`, `network-performance alert`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Boolean) If set to false, skip the validation call done during plan.
	// If set to `false`, skip the validation call done during plan.
	// +kubebuilder:validation:Optional
	Validate *bool `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Variables []VariablesParameters `json:"variables,omitempty" tf:"variables,omitempty"`
}

type MonitorThresholdWindowsInitParameters struct {

	// (String) Describes how long an anomalous metric must be normal before the alert recovers.
	// Describes how long an anomalous metric must be normal before the alert recovers.
	RecoveryWindow *string `json:"recoveryWindow,omitempty" tf:"recovery_window,omitempty"`

	// (String) Describes how long a metric must be anomalous before an alert triggers.
	// Describes how long a metric must be anomalous before an alert triggers.
	TriggerWindow *string `json:"triggerWindow,omitempty" tf:"trigger_window,omitempty"`
}

type MonitorThresholdWindowsObservation struct {

	// (String) Describes how long an anomalous metric must be normal before the alert recovers.
	// Describes how long an anomalous metric must be normal before the alert recovers.
	RecoveryWindow *string `json:"recoveryWindow,omitempty" tf:"recovery_window,omitempty"`

	// (String) Describes how long a metric must be anomalous before an alert triggers.
	// Describes how long a metric must be anomalous before an alert triggers.
	TriggerWindow *string `json:"triggerWindow,omitempty" tf:"trigger_window,omitempty"`
}

type MonitorThresholdWindowsParameters struct {

	// (String) Describes how long an anomalous metric must be normal before the alert recovers.
	// Describes how long an anomalous metric must be normal before the alert recovers.
	// +kubebuilder:validation:Optional
	RecoveryWindow *string `json:"recoveryWindow,omitempty" tf:"recovery_window,omitempty"`

	// (String) Describes how long a metric must be anomalous before an alert triggers.
	// Describes how long a metric must be anomalous before an alert triggers.
	// +kubebuilder:validation:Optional
	TriggerWindow *string `json:"triggerWindow,omitempty" tf:"trigger_window,omitempty"`
}

type MonitorThresholdsInitParameters struct {

	// (String) The monitor CRITICAL threshold. Must be a number.
	// The monitor `CRITICAL` threshold. Must be a number.
	Critical *string `json:"critical,omitempty" tf:"critical,omitempty"`

	// (String) The monitor CRITICAL recovery threshold. Must be a number.
	// The monitor `CRITICAL` recovery threshold. Must be a number.
	CriticalRecovery *string `json:"criticalRecovery,omitempty" tf:"critical_recovery,omitempty"`

	// (String) The monitor OK threshold. Only supported in monitor type service check. Must be a number.
	// The monitor `OK` threshold. Only supported in monitor type `service check`. Must be a number.
	Ok *string `json:"ok,omitempty" tf:"ok,omitempty"`

	// (String) The monitor UNKNOWN threshold. Only supported in monitor type service check. Must be a number.
	// The monitor `UNKNOWN` threshold. Only supported in monitor type `service check`. Must be a number.
	Unknown *string `json:"unknown,omitempty" tf:"unknown,omitempty"`

	// (String) The monitor WARNING threshold. Must be a number.
	// The monitor `WARNING` threshold. Must be a number.
	Warning *string `json:"warning,omitempty" tf:"warning,omitempty"`

	// (String) The monitor WARNING recovery threshold. Must be a number.
	// The monitor `WARNING` recovery threshold. Must be a number.
	WarningRecovery *string `json:"warningRecovery,omitempty" tf:"warning_recovery,omitempty"`
}

type MonitorThresholdsObservation struct {

	// (String) The monitor CRITICAL threshold. Must be a number.
	// The monitor `CRITICAL` threshold. Must be a number.
	Critical *string `json:"critical,omitempty" tf:"critical,omitempty"`

	// (String) The monitor CRITICAL recovery threshold. Must be a number.
	// The monitor `CRITICAL` recovery threshold. Must be a number.
	CriticalRecovery *string `json:"criticalRecovery,omitempty" tf:"critical_recovery,omitempty"`

	// (String) The monitor OK threshold. Only supported in monitor type service check. Must be a number.
	// The monitor `OK` threshold. Only supported in monitor type `service check`. Must be a number.
	Ok *string `json:"ok,omitempty" tf:"ok,omitempty"`

	// (String) The monitor UNKNOWN threshold. Only supported in monitor type service check. Must be a number.
	// The monitor `UNKNOWN` threshold. Only supported in monitor type `service check`. Must be a number.
	Unknown *string `json:"unknown,omitempty" tf:"unknown,omitempty"`

	// (String) The monitor WARNING threshold. Must be a number.
	// The monitor `WARNING` threshold. Must be a number.
	Warning *string `json:"warning,omitempty" tf:"warning,omitempty"`

	// (String) The monitor WARNING recovery threshold. Must be a number.
	// The monitor `WARNING` recovery threshold. Must be a number.
	WarningRecovery *string `json:"warningRecovery,omitempty" tf:"warning_recovery,omitempty"`
}

type MonitorThresholdsParameters struct {

	// (String) The monitor CRITICAL threshold. Must be a number.
	// The monitor `CRITICAL` threshold. Must be a number.
	// +kubebuilder:validation:Optional
	Critical *string `json:"critical,omitempty" tf:"critical,omitempty"`

	// (String) The monitor CRITICAL recovery threshold. Must be a number.
	// The monitor `CRITICAL` recovery threshold. Must be a number.
	// +kubebuilder:validation:Optional
	CriticalRecovery *string `json:"criticalRecovery,omitempty" tf:"critical_recovery,omitempty"`

	// (String) The monitor OK threshold. Only supported in monitor type service check. Must be a number.
	// The monitor `OK` threshold. Only supported in monitor type `service check`. Must be a number.
	// +kubebuilder:validation:Optional
	Ok *string `json:"ok,omitempty" tf:"ok,omitempty"`

	// (String) The monitor UNKNOWN threshold. Only supported in monitor type service check. Must be a number.
	// The monitor `UNKNOWN` threshold. Only supported in monitor type `service check`. Must be a number.
	// +kubebuilder:validation:Optional
	Unknown *string `json:"unknown,omitempty" tf:"unknown,omitempty"`

	// (String) The monitor WARNING threshold. Must be a number.
	// The monitor `WARNING` threshold. Must be a number.
	// +kubebuilder:validation:Optional
	Warning *string `json:"warning,omitempty" tf:"warning,omitempty"`

	// (String) The monitor WARNING recovery threshold. Must be a number.
	// The monitor `WARNING` recovery threshold. Must be a number.
	// +kubebuilder:validation:Optional
	WarningRecovery *string `json:"warningRecovery,omitempty" tf:"warning_recovery,omitempty"`
}

type SchedulingOptionsInitParameters struct {

	// (Block List, Max: 1) Configuration options for the custom schedules. If start is omitted, the monitor creation time will be used. (see below for nested schema)
	// Configuration options for the custom schedules. If `start` is omitted, the monitor creation time will be used.
	CustomSchedule []CustomScheduleInitParameters `json:"customSchedule,omitempty" tf:"custom_schedule,omitempty"`

	// (Block List, Max: 1) Configuration options for the evaluation window. If hour_starts is set, no other fields may be set. Otherwise, day_starts and month_starts must be set together. (see below for nested schema)
	// Configuration options for the evaluation window. If `hour_starts` is set, no other fields may be set. Otherwise, `day_starts` and `month_starts` must be set together.
	EvaluationWindow []EvaluationWindowInitParameters `json:"evaluationWindow,omitempty" tf:"evaluation_window,omitempty"`
}

type SchedulingOptionsObservation struct {

	// (Block List, Max: 1) Configuration options for the custom schedules. If start is omitted, the monitor creation time will be used. (see below for nested schema)
	// Configuration options for the custom schedules. If `start` is omitted, the monitor creation time will be used.
	CustomSchedule []CustomScheduleObservation `json:"customSchedule,omitempty" tf:"custom_schedule,omitempty"`

	// (Block List, Max: 1) Configuration options for the evaluation window. If hour_starts is set, no other fields may be set. Otherwise, day_starts and month_starts must be set together. (see below for nested schema)
	// Configuration options for the evaluation window. If `hour_starts` is set, no other fields may be set. Otherwise, `day_starts` and `month_starts` must be set together.
	EvaluationWindow []EvaluationWindowObservation `json:"evaluationWindow,omitempty" tf:"evaluation_window,omitempty"`
}

type SchedulingOptionsParameters struct {

	// (Block List, Max: 1) Configuration options for the custom schedules. If start is omitted, the monitor creation time will be used. (see below for nested schema)
	// Configuration options for the custom schedules. If `start` is omitted, the monitor creation time will be used.
	// +kubebuilder:validation:Optional
	CustomSchedule []CustomScheduleParameters `json:"customSchedule,omitempty" tf:"custom_schedule,omitempty"`

	// (Block List, Max: 1) Configuration options for the evaluation window. If hour_starts is set, no other fields may be set. Otherwise, day_starts and month_starts must be set together. (see below for nested schema)
	// Configuration options for the evaluation window. If `hour_starts` is set, no other fields may be set. Otherwise, `day_starts` and `month_starts` must be set together.
	// +kubebuilder:validation:Optional
	EvaluationWindow []EvaluationWindowParameters `json:"evaluationWindow,omitempty" tf:"evaluation_window,omitempty"`
}

type SearchInitParameters struct {

	// (String) The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending on the monitor type, please see the API Reference for details.
	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type SearchObservation struct {

	// (String) The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending on the monitor type, please see the API Reference for details.
	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type SearchParameters struct {

	// (String) The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending on the monitor type, please see the API Reference for details.
	// The events search string.
	// +kubebuilder:validation:Optional
	Query *string `json:"query" tf:"query,omitempty"`
}

type SortInitParameters struct {

	// (String) The aggregation methods for event platform queries. Valid values are count, cardinality, median, pc75, pc90, pc95, pc98, pc99, sum, min, max, avg.
	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// (String) The measurable attribute to compute.
	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) Direction of sort. Valid values are asc, desc.
	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SortObservation struct {

	// (String) The aggregation methods for event platform queries. Valid values are count, cardinality, median, pc75, pc90, pc95, pc98, pc99, sum, min, max, avg.
	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// (String) The measurable attribute to compute.
	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) Direction of sort. Valid values are asc, desc.
	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SortParameters struct {

	// (String) The aggregation methods for event platform queries. Valid values are count, cardinality, median, pc75, pc90, pc95, pc98, pc99, sum, min, max, avg.
	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Optional
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// (String) The measurable attribute to compute.
	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) Direction of sort. Valid values are asc, desc.
	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type VariablesInitParameters struct {

	// (Block List) A timeseries formula and functions events query. (see below for nested schema)
	// A timeseries formula and functions events query.
	EventQuery []EventQueryInitParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`
}

type VariablesObservation struct {

	// (Block List) A timeseries formula and functions events query. (see below for nested schema)
	// A timeseries formula and functions events query.
	EventQuery []EventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`
}

type VariablesParameters struct {

	// (Block List) A timeseries formula and functions events query. (see below for nested schema)
	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []EventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`
}

// MonitorSpec defines the desired state of Monitor
type MonitorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MonitorParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MonitorInitParameters `json:"initProvider,omitempty"`
}

// MonitorStatus defines the observed state of Monitor.
type MonitorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MonitorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Monitor is the Schema for the Monitors API. Provides a Datadog monitor resource. This can be used to create and manage Datadog monitors.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type Monitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.message) || (has(self.initProvider) && has(self.initProvider.message))",message="spec.forProvider.message is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.query) || (has(self.initProvider) && has(self.initProvider.query))",message="spec.forProvider.query is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   MonitorSpec   `json:"spec"`
	Status MonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorList contains a list of Monitors
type MonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Monitor `json:"items"`
}

// Repository type metadata.
var (
	Monitor_Kind             = "Monitor"
	Monitor_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Monitor_Kind}.String()
	Monitor_KindAPIVersion   = Monitor_Kind + "." + CRDGroupVersion.String()
	Monitor_GroupVersionKind = CRDGroupVersion.WithKind(Monitor_Kind)
)

func init() {
	SchemeBuilder.Register(&Monitor{}, &MonitorList{})
}
