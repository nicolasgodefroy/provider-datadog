// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EntryInitParameters struct {

	// (String) IP address or range of addresses.
	// IP address or range of addresses.
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// (String) Note accompanying IP address.
	// Note accompanying IP address.
	Note *string `json:"note,omitempty" tf:"note,omitempty"`
}

type EntryObservation struct {

	// (String) IP address or range of addresses.
	// IP address or range of addresses.
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// (String) Note accompanying IP address.
	// Note accompanying IP address.
	Note *string `json:"note,omitempty" tf:"note,omitempty"`
}

type EntryParameters struct {

	// (String) IP address or range of addresses.
	// IP address or range of addresses.
	// +kubebuilder:validation:Optional
	CidrBlock *string `json:"cidrBlock" tf:"cidr_block,omitempty"`

	// (String) Note accompanying IP address.
	// Note accompanying IP address.
	// +kubebuilder:validation:Optional
	Note *string `json:"note,omitempty" tf:"note,omitempty"`
}

type IPAllowListInitParameters struct {

	// (Boolean) Whether the IP Allowlist is enabled.
	// Whether the IP Allowlist is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block Set) Set of objects containing an IP address or range of IP addresses in the allowlist and an accompanying note. (see below for nested schema)
	// Set of objects containing an IP address or range of IP addresses in the allowlist and an accompanying note.
	Entry []EntryInitParameters `json:"entry,omitempty" tf:"entry,omitempty"`
}

type IPAllowListObservation struct {

	// (Boolean) Whether the IP Allowlist is enabled.
	// Whether the IP Allowlist is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block Set) Set of objects containing an IP address or range of IP addresses in the allowlist and an accompanying note. (see below for nested schema)
	// Set of objects containing an IP address or range of IP addresses in the allowlist and an accompanying note.
	Entry []EntryObservation `json:"entry,omitempty" tf:"entry,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IPAllowListParameters struct {

	// (Boolean) Whether the IP Allowlist is enabled.
	// Whether the IP Allowlist is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block Set) Set of objects containing an IP address or range of IP addresses in the allowlist and an accompanying note. (see below for nested schema)
	// Set of objects containing an IP address or range of IP addresses in the allowlist and an accompanying note.
	// +kubebuilder:validation:Optional
	Entry []EntryParameters `json:"entry,omitempty" tf:"entry,omitempty"`
}

// IPAllowListSpec defines the desired state of IPAllowList
type IPAllowListSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPAllowListParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IPAllowListInitParameters `json:"initProvider,omitempty"`
}

// IPAllowListStatus defines the observed state of IPAllowList.
type IPAllowListStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPAllowListObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IPAllowList is the Schema for the IPAllowLists API. Provides the Datadog IP allowlist resource. This can be used to manage the Datadog IP allowlist
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type IPAllowList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	Spec   IPAllowListSpec   `json:"spec"`
	Status IPAllowListStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPAllowListList contains a list of IPAllowLists
type IPAllowListList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPAllowList `json:"items"`
}

// Repository type metadata.
var (
	IPAllowList_Kind             = "IPAllowList"
	IPAllowList_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPAllowList_Kind}.String()
	IPAllowList_KindAPIVersion   = IPAllowList_Kind + "." + CRDGroupVersion.String()
	IPAllowList_GroupVersionKind = CRDGroupVersion.WithKind(IPAllowList_Kind)
)

func init() {
	SchemeBuilder.Register(&IPAllowList{}, &IPAllowListList{})
}
