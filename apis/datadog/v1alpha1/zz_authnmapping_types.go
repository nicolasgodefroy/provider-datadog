// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthnMappingInitParameters struct {

	// (String) Identity provider key.
	// Identity provider key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The ID of a role to attach to all users with the corresponding key and value. Cannot be used in conjunction with team.
	// The ID of a role to attach to all users with the corresponding key and value. Cannot be used in conjunction with `team`.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// (String) The ID of a team to add all users with the corresponding key and value to. Cannot be used in conjunction with role.
	// The ID of a team to add all users with the corresponding key and value to. Cannot be used in conjunction with `role`.
	Team *string `json:"team,omitempty" tf:"team,omitempty"`

	// (String) Identity provider value.
	// Identity provider value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AuthnMappingObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Identity provider key.
	// Identity provider key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The ID of a role to attach to all users with the corresponding key and value. Cannot be used in conjunction with team.
	// The ID of a role to attach to all users with the corresponding key and value. Cannot be used in conjunction with `team`.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// (String) The ID of a team to add all users with the corresponding key and value to. Cannot be used in conjunction with role.
	// The ID of a team to add all users with the corresponding key and value to. Cannot be used in conjunction with `role`.
	Team *string `json:"team,omitempty" tf:"team,omitempty"`

	// (String) Identity provider value.
	// Identity provider value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AuthnMappingParameters struct {

	// (String) Identity provider key.
	// Identity provider key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The ID of a role to attach to all users with the corresponding key and value. Cannot be used in conjunction with team.
	// The ID of a role to attach to all users with the corresponding key and value. Cannot be used in conjunction with `team`.
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// (String) The ID of a team to add all users with the corresponding key and value to. Cannot be used in conjunction with role.
	// The ID of a team to add all users with the corresponding key and value to. Cannot be used in conjunction with `role`.
	// +kubebuilder:validation:Optional
	Team *string `json:"team,omitempty" tf:"team,omitempty"`

	// (String) Identity provider value.
	// Identity provider value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// AuthnMappingSpec defines the desired state of AuthnMapping
type AuthnMappingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthnMappingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AuthnMappingInitParameters `json:"initProvider,omitempty"`
}

// AuthnMappingStatus defines the observed state of AuthnMapping.
type AuthnMappingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthnMappingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AuthnMapping is the Schema for the AuthnMappings API. Provides a Datadog AuthN Mappings resource. This feature lets you automatically assign roles to users based on their SAML attributes.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type AuthnMapping struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.key) || (has(self.initProvider) && has(self.initProvider.key))",message="spec.forProvider.key is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.value) || (has(self.initProvider) && has(self.initProvider.value))",message="spec.forProvider.value is a required parameter"
	Spec   AuthnMappingSpec   `json:"spec"`
	Status AuthnMappingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthnMappingList contains a list of AuthnMappings
type AuthnMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthnMapping `json:"items"`
}

// Repository type metadata.
var (
	AuthnMapping_Kind             = "AuthnMapping"
	AuthnMapping_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuthnMapping_Kind}.String()
	AuthnMapping_KindAPIVersion   = AuthnMapping_Kind + "." + CRDGroupVersion.String()
	AuthnMapping_GroupVersionKind = CRDGroupVersion.WithKind(AuthnMapping_Kind)
)

func init() {
	SchemeBuilder.Register(&AuthnMapping{}, &AuthnMappingList{})
}
