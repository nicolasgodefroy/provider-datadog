// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TeamPermissionSettingInitParameters struct {

	// (String) The identifier for the action. Valid values are manage_membership, edit.
	// The identifier for the action. Valid values are `manage_membership`, `edit`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) ID of the team the team permission setting is associated with.
	// ID of the team the team permission setting is associated with.
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// (String) The action value. Valid values are dependent on the action. manage_membership action allows admins, members, organization, user_access_manage values. edit action allows admins, members, teams_manage values.
	// The action value. Valid values are dependent on the action. `manage_membership` action allows `admins`, `members`, `organization`, `user_access_manage` values. `edit` action allows `admins`, `members`, `teams_manage` values.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TeamPermissionSettingObservation struct {

	// (String) The identifier for the action. Valid values are manage_membership, edit.
	// The identifier for the action. Valid values are `manage_membership`, `edit`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) ID of the team the team permission setting is associated with.
	// ID of the team the team permission setting is associated with.
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// (String) The action value. Valid values are dependent on the action. manage_membership action allows admins, members, organization, user_access_manage values. edit action allows admins, members, teams_manage values.
	// The action value. Valid values are dependent on the action. `manage_membership` action allows `admins`, `members`, `organization`, `user_access_manage` values. `edit` action allows `admins`, `members`, `teams_manage` values.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TeamPermissionSettingParameters struct {

	// (String) The identifier for the action. Valid values are manage_membership, edit.
	// The identifier for the action. Valid values are `manage_membership`, `edit`.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) ID of the team the team permission setting is associated with.
	// ID of the team the team permission setting is associated with.
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// (String) The action value. Valid values are dependent on the action. manage_membership action allows admins, members, organization, user_access_manage values. edit action allows admins, members, teams_manage values.
	// The action value. Valid values are dependent on the action. `manage_membership` action allows `admins`, `members`, `organization`, `user_access_manage` values. `edit` action allows `admins`, `members`, `teams_manage` values.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// TeamPermissionSettingSpec defines the desired state of TeamPermissionSetting
type TeamPermissionSettingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TeamPermissionSettingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TeamPermissionSettingInitParameters `json:"initProvider,omitempty"`
}

// TeamPermissionSettingStatus defines the observed state of TeamPermissionSetting.
type TeamPermissionSettingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TeamPermissionSettingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TeamPermissionSetting is the Schema for the TeamPermissionSettings API. Provides a Datadog TeamPermissionSetting resource. This can be used to manage Datadog teampermissionsetting.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type TeamPermissionSetting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.teamId) || (has(self.initProvider) && has(self.initProvider.teamId))",message="spec.forProvider.teamId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.value) || (has(self.initProvider) && has(self.initProvider.value))",message="spec.forProvider.value is a required parameter"
	Spec   TeamPermissionSettingSpec   `json:"spec"`
	Status TeamPermissionSettingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TeamPermissionSettingList contains a list of TeamPermissionSettings
type TeamPermissionSettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TeamPermissionSetting `json:"items"`
}

// Repository type metadata.
var (
	TeamPermissionSetting_Kind             = "TeamPermissionSetting"
	TeamPermissionSetting_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TeamPermissionSetting_Kind}.String()
	TeamPermissionSetting_KindAPIVersion   = TeamPermissionSetting_Kind + "." + CRDGroupVersion.String()
	TeamPermissionSetting_GroupVersionKind = CRDGroupVersion.WithKind(TeamPermissionSetting_Kind)
)

func init() {
	SchemeBuilder.Register(&TeamPermissionSetting{}, &TeamPermissionSettingList{})
}
