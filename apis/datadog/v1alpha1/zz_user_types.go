// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserInitParameters_2 struct {

	// (Boolean) Whether the user is disabled. Defaults to false.
	// Whether the user is disabled. Defaults to `false`.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (String) Email address for user.
	// Email address for user.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (String) Name for user.
	// Name for user.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) A list of role IDs to assign to the user.
	// A list of role IDs to assign to the user.
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// (Boolean) Whether an invitation email should be sent when the user is created. Defaults to true.
	// Whether an invitation email should be sent when the user is created. Defaults to `true`.
	SendUserInvitation *bool `json:"sendUserInvitation,omitempty" tf:"send_user_invitation,omitempty"`
}

type UserObservation_2 struct {

	// (Boolean) Whether the user is disabled. Defaults to false.
	// Whether the user is disabled. Defaults to `false`.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (String) Email address for user.
	// Email address for user.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name for user.
	// Name for user.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) A list of role IDs to assign to the user.
	// A list of role IDs to assign to the user.
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// (Boolean) Whether an invitation email should be sent when the user is created. Defaults to true.
	// Whether an invitation email should be sent when the user is created. Defaults to `true`.
	SendUserInvitation *bool `json:"sendUserInvitation,omitempty" tf:"send_user_invitation,omitempty"`

	// (String) The ID of the user invitation that was sent when creating the user.
	// The ID of the user invitation that was sent when creating the user.
	UserInvitationID *string `json:"userInvitationId,omitempty" tf:"user_invitation_id,omitempty"`

	// (Boolean) Returns true if the user is verified.
	// Returns `true` if the user is verified.
	Verified *bool `json:"verified,omitempty" tf:"verified,omitempty"`
}

type UserParameters_2 struct {

	// (Boolean) Whether the user is disabled. Defaults to false.
	// Whether the user is disabled. Defaults to `false`.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (String) Email address for user.
	// Email address for user.
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (String) Name for user.
	// Name for user.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) A list of role IDs to assign to the user.
	// A list of role IDs to assign to the user.
	// +kubebuilder:validation:Optional
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// (Boolean) Whether an invitation email should be sent when the user is created. Defaults to true.
	// Whether an invitation email should be sent when the user is created. Defaults to `true`.
	// +kubebuilder:validation:Optional
	SendUserInvitation *bool `json:"sendUserInvitation,omitempty" tf:"send_user_invitation,omitempty"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserInitParameters_2 `json:"initProvider,omitempty"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// User is the Schema for the Users API. Provides a Datadog user resource. This can be used to create and manage Datadog users.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.email) || (has(self.initProvider) && has(self.initProvider.email))",message="spec.forProvider.email is a required parameter"
	Spec   UserSpec   `json:"spec"`
	Status UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
