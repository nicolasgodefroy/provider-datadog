// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CaseInitParameters struct {

	// (List of String) Notification targets for each rule case.
	// Notification targets for each rule case.
	Notifications []*string `json:"notifications,omitempty" tf:"notifications,omitempty"`

	// (String) Status of the rule case to match. Valid values are info, low, medium, high, critical.
	// Status of the rule case to match. Valid values are `info`, `low`, `medium`, `high`, `critical`.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type CaseObservation struct {

	// (List of String) Notification targets for each rule case.
	// Notification targets for each rule case.
	Notifications []*string `json:"notifications,omitempty" tf:"notifications,omitempty"`

	// (String) Status of the rule case to match. Valid values are info, low, medium, high, critical.
	// Status of the rule case to match. Valid values are `info`, `low`, `medium`, `high`, `critical`.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type CaseParameters struct {

	// (List of String) Notification targets for each rule case.
	// Notification targets for each rule case.
	// +kubebuilder:validation:Optional
	Notifications []*string `json:"notifications" tf:"notifications,omitempty"`

	// (String) Status of the rule case to match. Valid values are info, low, medium, high, critical.
	// Status of the rule case to match. Valid values are `info`, `low`, `medium`, `high`, `critical`.
	// +kubebuilder:validation:Optional
	Status *string `json:"status" tf:"status,omitempty"`
}

type DefaultRuleInitParameters struct {

	// (Block List, Max: 10) Cases of the rule, this is used to update notifications. (see below for nested schema)
	// Cases of the rule, this is used to update notifications.
	Case []CaseInitParameters `json:"case,omitempty" tf:"case,omitempty"`

	// (Set of String) Custom tags for generated signals.
	// Custom tags for generated signals.
	// +listType=set
	CustomTags []*string `json:"customTags,omitempty" tf:"custom_tags,omitempty"`

	// (Boolean) Enable the rule. Defaults to true.
	// Enable the rule. Defaults to `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List) Additional queries to filter matched events before they are processed. (see below for nested schema)
	// Additional queries to filter matched events before they are processed.
	Filter []FilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Block List, Max: 1) Options on default rules. Note that only a subset of fields can be updated on default rule options. (see below for nested schema)
	// Options on default rules. Note that only a subset of fields can be updated on default rule options.
	Options []OptionsInitParameters `json:"options,omitempty" tf:"options,omitempty"`
}

type DefaultRuleObservation struct {

	// (Block List, Max: 10) Cases of the rule, this is used to update notifications. (see below for nested schema)
	// Cases of the rule, this is used to update notifications.
	Case []CaseObservation `json:"case,omitempty" tf:"case,omitempty"`

	// (Set of String) Custom tags for generated signals.
	// Custom tags for generated signals.
	// +listType=set
	CustomTags []*string `json:"customTags,omitempty" tf:"custom_tags,omitempty"`

	// (Boolean) Enable the rule. Defaults to true.
	// Enable the rule. Defaults to `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List) Additional queries to filter matched events before they are processed. (see below for nested schema)
	// Additional queries to filter matched events before they are processed.
	Filter []FilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Max: 1) Options on default rules. Note that only a subset of fields can be updated on default rule options. (see below for nested schema)
	// Options on default rules. Note that only a subset of fields can be updated on default rule options.
	Options []OptionsObservation `json:"options,omitempty" tf:"options,omitempty"`

	// (String) The rule type.
	// The rule type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DefaultRuleParameters struct {

	// (Block List, Max: 10) Cases of the rule, this is used to update notifications. (see below for nested schema)
	// Cases of the rule, this is used to update notifications.
	// +kubebuilder:validation:Optional
	Case []CaseParameters `json:"case,omitempty" tf:"case,omitempty"`

	// (Set of String) Custom tags for generated signals.
	// Custom tags for generated signals.
	// +kubebuilder:validation:Optional
	// +listType=set
	CustomTags []*string `json:"customTags,omitempty" tf:"custom_tags,omitempty"`

	// (Boolean) Enable the rule. Defaults to true.
	// Enable the rule. Defaults to `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List) Additional queries to filter matched events before they are processed. (see below for nested schema)
	// Additional queries to filter matched events before they are processed.
	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Block List, Max: 1) Options on default rules. Note that only a subset of fields can be updated on default rule options. (see below for nested schema)
	// Options on default rules. Note that only a subset of fields can be updated on default rule options.
	// +kubebuilder:validation:Optional
	Options []OptionsParameters `json:"options,omitempty" tf:"options,omitempty"`
}

type FilterInitParameters struct {

	// (String) The type of filtering action. Allowed enum values: require, suppress Valid values are require, suppress.
	// The type of filtering action. Allowed enum values: require, suppress Valid values are `require`, `suppress`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) Query for selecting logs to apply the filtering action.
	// Query for selecting logs to apply the filtering action.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type FilterObservation struct {

	// (String) The type of filtering action. Allowed enum values: require, suppress Valid values are require, suppress.
	// The type of filtering action. Allowed enum values: require, suppress Valid values are `require`, `suppress`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) Query for selecting logs to apply the filtering action.
	// Query for selecting logs to apply the filtering action.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type FilterParameters struct {

	// (String) The type of filtering action. Allowed enum values: require, suppress Valid values are require, suppress.
	// The type of filtering action. Allowed enum values: require, suppress Valid values are `require`, `suppress`.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// (String) Query for selecting logs to apply the filtering action.
	// Query for selecting logs to apply the filtering action.
	// +kubebuilder:validation:Optional
	Query *string `json:"query" tf:"query,omitempty"`
}

type OptionsInitParameters struct {

	// production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with staging, test, or dev. Only available when the rule type is log_detection. Defaults to false.
	// If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `log_detection`. Defaults to `false`.
	DecreaseCriticalityBasedOnEnv *bool `json:"decreaseCriticalityBasedOnEnv,omitempty" tf:"decrease_criticality_based_on_env,omitempty"`
}

type OptionsObservation struct {

	// production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with staging, test, or dev. Only available when the rule type is log_detection. Defaults to false.
	// If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `log_detection`. Defaults to `false`.
	DecreaseCriticalityBasedOnEnv *bool `json:"decreaseCriticalityBasedOnEnv,omitempty" tf:"decrease_criticality_based_on_env,omitempty"`
}

type OptionsParameters struct {

	// production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with staging, test, or dev. Only available when the rule type is log_detection. Defaults to false.
	// If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `log_detection`. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DecreaseCriticalityBasedOnEnv *bool `json:"decreaseCriticalityBasedOnEnv,omitempty" tf:"decrease_criticality_based_on_env,omitempty"`
}

// DefaultRuleSpec defines the desired state of DefaultRule
type DefaultRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DefaultRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DefaultRuleInitParameters `json:"initProvider,omitempty"`
}

// DefaultRuleStatus defines the observed state of DefaultRule.
type DefaultRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DefaultRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DefaultRule is the Schema for the DefaultRules API. Provides a Datadog Security Monitoring Rule API resource for default rules. It can only be imported, you can't create a default rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type DefaultRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DefaultRuleSpec   `json:"spec"`
	Status            DefaultRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DefaultRuleList contains a list of DefaultRules
type DefaultRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DefaultRule `json:"items"`
}

// Repository type metadata.
var (
	DefaultRule_Kind             = "DefaultRule"
	DefaultRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DefaultRule_Kind}.String()
	DefaultRule_KindAPIVersion   = DefaultRule_Kind + "." + CRDGroupVersion.String()
	DefaultRule_GroupVersionKind = CRDGroupVersion.WithKind(DefaultRule_Kind)
)

func init() {
	SchemeBuilder.Register(&DefaultRule{}, &DefaultRuleList{})
}
