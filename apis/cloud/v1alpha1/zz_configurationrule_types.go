// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationRuleInitParameters struct {

	// (Boolean) Whether the cloud configuration rule is enabled.
	// Whether the cloud configuration rule is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List) Additional queries to filter matched events before they are processed. Defaults to empty list (see below for nested schema)
	// Additional queries to filter matched events before they are processed. Defaults to empty list
	Filter []FilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (List of String) Defaults to empty list. This function will be deprecated soon. Use the notification rules function instead. Fields to group by when generating signals, e.g. @resource.
	// Defaults to empty list. This function will be deprecated soon. Use the notification rules function instead. Fields to group by when generating signals, e.g. @resource.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// (String) The message associated to the rule that will be shown in findings and signals.
	// The message associated to the rule that will be shown in findings and signals.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) The name of the cloud configuration rule.
	// The name of the cloud configuration rule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) This function will be deprecated soon. Use the notification rules function instead. Notification targets for signals. Defaults to empty list.
	// This function will be deprecated soon. Use the notification rules function instead. Notification targets for signals. Defaults to empty list.
	Notifications []*string `json:"notifications,omitempty" tf:"notifications,omitempty"`

	// (String) Policy written in Rego format.
	// Policy written in Rego format.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// (List of String) Related resource types to be checked by the rule. Defaults to empty list.
	// Related resource types to be checked by the rule. Defaults to empty list.
	RelatedResourceTypes []*string `json:"relatedResourceTypes,omitempty" tf:"related_resource_types,omitempty"`

	// (String) Main resource type to be checked by the rule.
	// Main resource type to be checked by the rule.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// (String) Severity of the rule and associated signals. Valid values are info, low, medium, high, critical.
	// Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	// (List of String) Tags of the rule, propagated to findings and signals. Defaults to empty list.
	// Tags of the rule, propagated to findings and signals. Defaults to empty list.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ConfigurationRuleObservation struct {

	// (Boolean) Whether the cloud configuration rule is enabled.
	// Whether the cloud configuration rule is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List) Additional queries to filter matched events before they are processed. Defaults to empty list (see below for nested schema)
	// Additional queries to filter matched events before they are processed. Defaults to empty list
	Filter []FilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// (List of String) Defaults to empty list. This function will be deprecated soon. Use the notification rules function instead. Fields to group by when generating signals, e.g. @resource.
	// Defaults to empty list. This function will be deprecated soon. Use the notification rules function instead. Fields to group by when generating signals, e.g. @resource.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The message associated to the rule that will be shown in findings and signals.
	// The message associated to the rule that will be shown in findings and signals.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) The name of the cloud configuration rule.
	// The name of the cloud configuration rule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) This function will be deprecated soon. Use the notification rules function instead. Notification targets for signals. Defaults to empty list.
	// This function will be deprecated soon. Use the notification rules function instead. Notification targets for signals. Defaults to empty list.
	Notifications []*string `json:"notifications,omitempty" tf:"notifications,omitempty"`

	// (String) Policy written in Rego format.
	// Policy written in Rego format.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// (List of String) Related resource types to be checked by the rule. Defaults to empty list.
	// Related resource types to be checked by the rule. Defaults to empty list.
	RelatedResourceTypes []*string `json:"relatedResourceTypes,omitempty" tf:"related_resource_types,omitempty"`

	// (String) Main resource type to be checked by the rule.
	// Main resource type to be checked by the rule.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// (String) Severity of the rule and associated signals. Valid values are info, low, medium, high, critical.
	// Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	// (List of String) Tags of the rule, propagated to findings and signals. Defaults to empty list.
	// Tags of the rule, propagated to findings and signals. Defaults to empty list.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ConfigurationRuleParameters struct {

	// (Boolean) Whether the cloud configuration rule is enabled.
	// Whether the cloud configuration rule is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List) Additional queries to filter matched events before they are processed. Defaults to empty list (see below for nested schema)
	// Additional queries to filter matched events before they are processed. Defaults to empty list
	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (List of String) Defaults to empty list. This function will be deprecated soon. Use the notification rules function instead. Fields to group by when generating signals, e.g. @resource.
	// Defaults to empty list. This function will be deprecated soon. Use the notification rules function instead. Fields to group by when generating signals, e.g. @resource.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// (String) The message associated to the rule that will be shown in findings and signals.
	// The message associated to the rule that will be shown in findings and signals.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) The name of the cloud configuration rule.
	// The name of the cloud configuration rule.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) This function will be deprecated soon. Use the notification rules function instead. Notification targets for signals. Defaults to empty list.
	// This function will be deprecated soon. Use the notification rules function instead. Notification targets for signals. Defaults to empty list.
	// +kubebuilder:validation:Optional
	Notifications []*string `json:"notifications,omitempty" tf:"notifications,omitempty"`

	// (String) Policy written in Rego format.
	// Policy written in Rego format.
	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// (List of String) Related resource types to be checked by the rule. Defaults to empty list.
	// Related resource types to be checked by the rule. Defaults to empty list.
	// +kubebuilder:validation:Optional
	RelatedResourceTypes []*string `json:"relatedResourceTypes,omitempty" tf:"related_resource_types,omitempty"`

	// (String) Main resource type to be checked by the rule.
	// Main resource type to be checked by the rule.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// (String) Severity of the rule and associated signals. Valid values are info, low, medium, high, critical.
	// Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
	// +kubebuilder:validation:Optional
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	// (List of String) Tags of the rule, propagated to findings and signals. Defaults to empty list.
	// Tags of the rule, propagated to findings and signals. Defaults to empty list.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type FilterInitParameters struct {

	// (String) The type of filtering action. Valid values are require, suppress.
	// The type of filtering action. Valid values are `require`, `suppress`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) Query for selecting logs to apply the filtering action.
	// Query for selecting logs to apply the filtering action.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type FilterObservation struct {

	// (String) The type of filtering action. Valid values are require, suppress.
	// The type of filtering action. Valid values are `require`, `suppress`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) Query for selecting logs to apply the filtering action.
	// Query for selecting logs to apply the filtering action.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type FilterParameters struct {

	// (String) The type of filtering action. Valid values are require, suppress.
	// The type of filtering action. Valid values are `require`, `suppress`.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// (String) Query for selecting logs to apply the filtering action.
	// Query for selecting logs to apply the filtering action.
	// +kubebuilder:validation:Optional
	Query *string `json:"query" tf:"query,omitempty"`
}

// ConfigurationRuleSpec defines the desired state of ConfigurationRule
type ConfigurationRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigurationRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConfigurationRuleInitParameters `json:"initProvider,omitempty"`
}

// ConfigurationRuleStatus defines the observed state of ConfigurationRule.
type ConfigurationRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigurationRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ConfigurationRule is the Schema for the ConfigurationRules API. Provides a Datadog Cloud Configuration Rule resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type ConfigurationRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.message) || (has(self.initProvider) && has(self.initProvider.message))",message="spec.forProvider.message is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policy) || (has(self.initProvider) && has(self.initProvider.policy))",message="spec.forProvider.policy is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceType) || (has(self.initProvider) && has(self.initProvider.resourceType))",message="spec.forProvider.resourceType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.severity) || (has(self.initProvider) && has(self.initProvider.severity))",message="spec.forProvider.severity is a required parameter"
	Spec   ConfigurationRuleSpec   `json:"spec"`
	Status ConfigurationRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationRuleList contains a list of ConfigurationRules
type ConfigurationRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigurationRule `json:"items"`
}

// Repository type metadata.
var (
	ConfigurationRule_Kind             = "ConfigurationRule"
	ConfigurationRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfigurationRule_Kind}.String()
	ConfigurationRule_KindAPIVersion   = ConfigurationRule_Kind + "." + CRDGroupVersion.String()
	ConfigurationRule_GroupVersionKind = CRDGroupVersion.WithKind(ConfigurationRule_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfigurationRule{}, &ConfigurationRuleList{})
}
