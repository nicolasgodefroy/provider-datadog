name: DataDog/datadog
resources:
    datadog_api_key:
        subCategory: ""
        description: Provides a Datadog API Key resource. This can be used to create and manage Datadog API Keys. Import functionality for this resource is deprecated and will be removed in a future release with prior notice. Securely store your API keys using a secret management system or use this resource to create and manage new API keys.
        name: datadog_api_key
        title: datadog_api_key Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "name": "foo-application"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            key: (String, Sensitive) The value of the API Key.
            name: (String) Name for API Key.
        importStatements:
            - terraform import datadog_api_key.foo 11111111-2222-3333-4444-555555555555
    datadog_apm_retention_filter:
        subCategory: ""
        description: The object describing the configuration of the retention filter to create/update.
        name: datadog_apm_retention_filter
        title: datadog_apm_retention_filter Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "enabled": false,
                  "filter": [
                    {
                      "query": "service:sample AND env:production AND @http.method:GET AND app:sampleapp AND @http.status_code:200 AND @duration:\u003e600000000"
                    }
                  ],
                  "filter_type": "spans-sampling-processor",
                  "name": "Sample order",
                  "rate": "1.0"
                }
        argumentDocs:
            enabled: (Boolean) the status of the retention filter.
            filter: (Block, Optional) The spans filter. Spans matching this filter will be indexed and stored. (see below for nested schema)
            filter_type: (String) The type of the retention filter, currently only spans-processing-sampling is available. Valid values are spans-sampling-processor.
            id: (String) The ID of this resource.
            name: (String) The name of the retention filter.
            query: (String) The search query - follow the span search syntax, use AND between tags and \ to escape special characters, use nanosecond for duration. Defaults to "*".
            rate: (String) Sample rate to apply to spans going through this retention filter as a string, a value of 1.0 keeps all spans matching the query.
        importStatements:
            - "# Import existing APM retention filter \nterraform import datadog_apm_retention_filter.foo <filter_id>"
    datadog_apm_retention_filter_order:
        subCategory: ""
        description: Provides a Datadog APM Retention Filters API https://docs.datadoghq.com/api/v2/apm-retention-filters/ resource, which is used to manage Datadog APM retention filters order.
        name: datadog_apm_retention_filter_order
        title: datadog_apm_retention_filter_order Resource - terraform-provider-datadog
        examples:
            - name: bar
              manifest: |-
                {
                  "filter_ids": [
                    "${datadog_apm_retention_filter.foo.id}"
                  ]
                }
              dependencies:
                datadog_apm_retention_filter.foo: |-
                    {
                      "enabled": false,
                      "filter": [
                        {
                          "query": "*"
                        }
                      ],
                      "filter_type": "spans-sampling-processor",
                      "name": "Sample order",
                      "rate": "1.0"
                    }
        argumentDocs:
            filter_ids: (List of String) The filter IDs list. The order of filters IDs in this attribute defines the overall APM retention filters order.
            id: (String) The ID of this resource.
        importStatements:
            - |-
              # Import existing APM retention filter order
              # Note: Value of <foo> can be anything as this id is not stored by the resource
              terraform import datadog_apm_retention_filter_order.bar <foo>
    datadog_application_key:
        subCategory: ""
        description: Provides a Datadog Application Key resource. This can be used to create and manage Datadog Application Keys. Import functionality for this resource is deprecated and will be removed in a future release with prior notice. Securely store your application keys using a secret management system or use this resource to create and manage new application keys.
        name: datadog_application_key
        title: datadog_application_key Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "name": "foo-application"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            key: (String, Sensitive) The value of the Application Key.
            name: (String) Name for Application Key.
        importStatements:
            - terraform import datadog_application_key.foo 11111111-2222-3333-4444-555555555555
    datadog_authn_mapping:
        subCategory: ""
        description: Provides a Datadog AuthN Mappings resource. This feature lets you automatically assign roles to users based on their SAML attributes.
        name: datadog_authn_mapping
        title: datadog_authn_mapping Resource - terraform-provider-datadog
        examples:
            - name: dev_ro_role_mapping
              manifest: |-
                {
                  "key": "Member-of",
                  "role": "${data.datadog_role.ro_role.id}",
                  "value": "Development"
                }
              references:
                role: data.datadog_role.ro_role.id
        argumentDocs:
            id: (String) The ID of this resource.
            key: (String) Identity provider key.
            role: (String) The ID of a role to attach to all users with the corresponding key and value. Cannot be used in conjunction with team.
            team: (String) The ID of a team to add all users with the corresponding key and value to. Cannot be used in conjunction with role.
            value: (String) Identity provider value.
        importStatements:
            - |-
              # AuthN mappings can be imported using their ID, e.g.
              terraform import datadog_authn_mapping.dev_ro_mapping 000000-0000-0000-0000-000000000000
    datadog_child_organization:
        subCategory: ""
        description: Provides a Datadog Child Organization resource. This can be used to create Datadog Child Organizations. To manage created organization use datadog_organization_settings.
        name: datadog_child_organization
        title: datadog_child_organization Resource - terraform-provider-datadog
        examples:
            - name: organization
              manifest: |-
                {
                  "name": "foo-organization"
                }
        argumentDocs:
            access_role: (String)
            api_key: (List of Object) Datadog API key. (see below for nested schema)
            application_key: (List of Object) An application key with its associated metadata. (see below for nested schema)
            description: (String) Description of the organization.
            domains: (List of String)
            email: (String)
            enabled: (Boolean)
            hash: (String)
            id: (String) The ID of this resource.
            key: (String)
            name: (String) Name for Child Organization after creation.
            owner: (String)
            private_widget_share: (Boolean)
            public_id: (String) The public_id of the organization you are operating within.
            saml: (List of Object) (see below for nested schema)
            saml_autocreate_access_role: (String)
            saml_autocreate_users_domains: (List of Object) (see below for nested schema)
            saml_can_be_enabled: (Boolean)
            saml_idp_endpoint: (String)
            saml_idp_initiated_login: (List of Object) (see below for nested schema)
            saml_idp_metadata_uploaded: (Boolean)
            saml_login_url: (String)
            saml_strict_mode: (List of Object) (see below for nested schema)
            settings: (List of Object) Organization settings (see below for nested schema)
            user: (List of Object) Information about a user (see below for nested schema)
        importStatements: []
    datadog_cloud_configuration_rule:
        subCategory: ""
        description: Provides a Datadog Cloud Configuration Rule resource.
        name: datadog_cloud_configuration_rule
        title: datadog_cloud_configuration_rule Resource - terraform-provider-datadog
        examples:
            - name: myrule
              manifest: |-
                {
                  "enabled": true,
                  "group_by": [
                    "@resource"
                  ],
                  "message": "Rule has triggered",
                  "name": "My cloud configuration rule",
                  "notifications": [
                    "@channel"
                  ],
                  "policy": "package datadog\n\nimport data.datadog.output as dd_output\n\nimport future.keywords.contains\nimport future.keywords.if\nimport future.keywords.in\n\neval(resource) = \"skip\" if {\n    # Logic that evaluates to true if the resource should be skipped\n    true\n} else = \"pass\" {\n    # Logic that evaluates to true if the resource is compliant\n    true\n} else = \"fail\" {\n    # Logic that evaluates to true if the resource is not compliant\n    true\n}\n\n# This part remains unchanged for all rules\nresults contains result if {\n    some resource in input.resources[input.main_resource_type]\n    result := dd_output.format(resource, eval(resource))\n}\n",
                  "related_resource_types": [],
                  "resource_type": "aws_s3_bucket",
                  "severity": "high",
                  "tags": [
                    "some:tag"
                  ]
                }
        argumentDocs:
            action: (String) The type of filtering action. Valid values are require, suppress.
            enabled: (Boolean) Whether the cloud configuration rule is enabled.
            filter: (Block List) Additional queries to filter matched events before they are processed. Defaults to empty list (see below for nested schema)
            group_by: (List of String) Defaults to empty list. This function will be deprecated soon. Use the notification rules function instead. Fields to group by when generating signals, e.g. @resource.
            id: (String) The ID of this resource.
            message: (String) The message associated to the rule that will be shown in findings and signals.
            name: (String) The name of the cloud configuration rule.
            notifications: (List of String) This function will be deprecated soon. Use the notification rules function instead. Notification targets for signals. Defaults to empty list.
            policy: (String) Policy written in Rego format.
            query: (String) Query for selecting logs to apply the filtering action.
            related_resource_types: (List of String) Related resource types to be checked by the rule. Defaults to empty list.
            resource_type: (String) Main resource type to be checked by the rule.
            severity: (String) Severity of the rule and associated signals. Valid values are info, low, medium, high, critical.
            tags: (List of String) Tags of the rule, propagated to findings and signals. Defaults to empty list.
        importStatements:
            - |-
              # Security monitoring rules can be imported using ID, e.g.
              terraform import datadog_cloud_configuration_rule.my_rule m0o-hto-lkb
    datadog_cloud_workload_security_agent_rule:
        subCategory: ""
        description: 'Provides a Datadog Cloud Workload Security Agent Rule API resource for agent rules. Deprecated, use datadogcsmthreatsagentrules resource instead: https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/csmthreatsagent_rule'
        name: datadog_cloud_workload_security_agent_rule
        title: datadog_cloud_workload_security_agent_rule Resource - terraform-provider-datadog
        examples:
            - name: my_agent_rule
              manifest: |-
                {
                  "description": "My agent rule",
                  "enabled": true,
                  "expression": "exec.file.name == \"java\"",
                  "name": "my_agent_rule"
                }
        argumentDocs:
            description: (String) The description of the Agent rule. Defaults to "".
            enabled: (Boolean) Whether the Agent rule is enabled. Defaults to true.
            expression: (String) The SECL expression of the Agent rule.
            id: (String) The ID of this resource.
            name: (String) The name of the Agent rule.
        importStatements:
            - |-
              # Cloud Workload Security Agent rules can be imported using ID, e.g.
              terraform import datadog_cloud_workload_security_agent_rule.my_agent_rule m0o-hto-lkb
    datadog_csm_threats_agent_rule:
        subCategory: ""
        description: Provides a Datadog CSM Threats Agent Rule API resource.
        name: datadog_csm_threats_agent_rule
        title: datadog_csm_threats_agent_rule Resource - terraform-provider-datadog
        examples:
            - name: my_agent_rule
              manifest: |-
                {
                  "description": "im a rule",
                  "enabled": true,
                  "expression": "open.file.name == \"etc/shadow/password\"",
                  "name": "my_agent_rule"
                }
        argumentDocs:
            description: (String) A description for the Agent rule. Defaults to "".
            enabled: (Boolean) Indicates Whether the Agent rule is enabled.
            expression: (String) The SECL expression of the Agent rule
            id: (String) The ID of this resource.
            name: (String) The name of the Agent rule.
        importStatements:
            - |-
              # CSM Agent Rules can be imported using ID. For example:
              terraform import datadog_csm_threats_agent_rule.my_agent_rule m0o-hto-lkb
    datadog_dashboard:
        subCategory: ""
        description: Provides a Datadog dashboard resource. This can be used to create and manage Datadog dashboards.
        name: datadog_dashboard
        title: datadog_dashboard Resource - terraform-provider-datadog
        examples:
            - name: ordered_dashboard
              manifest: |-
                {
                  "description": "Created using the Datadog provider in Terraform",
                  "layout_type": "ordered",
                  "template_variable": [
                    {
                      "default": "aws",
                      "name": "var_1",
                      "prefix": "host"
                    },
                    {
                      "default": "autoscaling",
                      "name": "var_2",
                      "prefix": "service_name"
                    }
                  ],
                  "template_variable_preset": [
                    {
                      "name": "preset_1",
                      "template_variable": [
                        {
                          "name": "var_1",
                          "value": "host.dc"
                        },
                        {
                          "name": "var_2",
                          "value": "my_service"
                        }
                      ]
                    }
                  ],
                  "title": "Ordered Layout Dashboard",
                  "widget": [
                    {
                      "alert_graph_definition": [
                        {
                          "alert_id": "895605",
                          "live_span": "1h",
                          "title": "Widget Title",
                          "viz_type": "timeseries"
                        }
                      ]
                    },
                    {
                      "alert_value_definition": [
                        {
                          "alert_id": "895605",
                          "precision": 3,
                          "text_align": "center",
                          "title": "Widget Title",
                          "unit": "b"
                        }
                      ]
                    },
                    {
                      "alert_value_definition": [
                        {
                          "alert_id": "895605",
                          "precision": 3,
                          "text_align": "center",
                          "title": "Widget Title",
                          "unit": "b"
                        }
                      ]
                    },
                    {
                      "change_definition": [
                        {
                          "live_span": "1h",
                          "request": [
                            {
                              "change_type": "absolute",
                              "compare_to": "week_before",
                              "increase_good": true,
                              "order_by": "name",
                              "order_dir": "desc",
                              "q": "avg:system.load.1{env:staging} by {account}",
                              "show_present": true
                            }
                          ],
                          "title": "Widget Title"
                        }
                      ]
                    },
                    {
                      "distribution_definition": [
                        {
                          "live_span": "1h",
                          "request": [
                            {
                              "q": "avg:system.load.1{env:staging} by {account}",
                              "style": [
                                {
                                  "palette": "warm"
                                }
                              ]
                            }
                          ],
                          "title": "Widget Title"
                        }
                      ]
                    },
                    {
                      "check_status_definition": [
                        {
                          "check": "aws.ecs.agent_connected",
                          "group_by": [
                            "account",
                            "cluster"
                          ],
                          "grouping": "cluster",
                          "live_span": "1h",
                          "tags": [
                            "account:demo",
                            "cluster:awseb-ruthebdog-env-8-dn3m6u3gvk"
                          ],
                          "title": "Widget Title"
                        }
                      ]
                    },
                    {
                      "heatmap_definition": [
                        {
                          "live_span": "1h",
                          "request": [
                            {
                              "q": "avg:system.load.1{env:staging} by {account}",
                              "style": [
                                {
                                  "palette": "warm"
                                }
                              ]
                            }
                          ],
                          "title": "Widget Title",
                          "yaxis": [
                            {
                              "include_zero": true,
                              "max": 2,
                              "min": 1,
                              "scale": "sqrt"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "hostmap_definition": [
                        {
                          "group": [
                            "host",
                            "region"
                          ],
                          "no_group_hosts": true,
                          "no_metric_hosts": true,
                          "node_type": "container",
                          "request": [
                            {
                              "fill": [
                                {
                                  "q": "avg:system.load.1{*} by {host}"
                                }
                              ],
                              "size": [
                                {
                                  "q": "avg:memcache.uptime{*} by {host}"
                                }
                              ]
                            }
                          ],
                          "scope": [
                            "region:us-east-1",
                            "aws_account:727006795293"
                          ],
                          "style": [
                            {
                              "fill_max": "20",
                              "fill_min": "10",
                              "palette": "yellow_to_green",
                              "palette_flip": true
                            }
                          ],
                          "title": "Widget Title"
                        }
                      ]
                    },
                    {
                      "note_definition": [
                        {
                          "background_color": "pink",
                          "content": "note text",
                          "font_size": "14",
                          "show_tick": true,
                          "text_align": "center",
                          "tick_edge": "left",
                          "tick_pos": "50%"
                        }
                      ]
                    },
                    {
                      "query_value_definition": [
                        {
                          "autoscale": true,
                          "custom_unit": "xx",
                          "live_span": "1h",
                          "precision": "4",
                          "request": [
                            {
                              "aggregator": "sum",
                              "conditional_formats": [
                                {
                                  "comparator": "\u003c",
                                  "palette": "white_on_green",
                                  "value": "2"
                                },
                                {
                                  "comparator": "\u003e",
                                  "palette": "white_on_red",
                                  "value": "2.2"
                                }
                              ],
                              "q": "avg:system.load.1{env:staging} by {account}"
                            }
                          ],
                          "text_align": "right",
                          "title": "Widget Title"
                        }
                      ]
                    },
                    {
                      "query_table_definition": [
                        {
                          "live_span": "1h",
                          "request": [
                            {
                              "aggregator": "sum",
                              "conditional_formats": [
                                {
                                  "comparator": "\u003c",
                                  "palette": "white_on_green",
                                  "value": "2"
                                },
                                {
                                  "comparator": "\u003e",
                                  "palette": "white_on_red",
                                  "value": "2.2"
                                }
                              ],
                              "limit": "10",
                              "q": "avg:system.load.1{env:staging} by {account}"
                            }
                          ],
                          "title": "Widget Title"
                        }
                      ]
                    },
                    {
                      "scatterplot_definition": [
                        {
                          "color_by_groups": [
                            "account",
                            "apm-role-group"
                          ],
                          "live_span": "1h",
                          "request": [
                            {
                              "x": [
                                {
                                  "aggregator": "max",
                                  "q": "avg:system.cpu.user{*} by {service, account}"
                                }
                              ],
                              "y": [
                                {
                                  "aggregator": "min",
                                  "q": "avg:system.mem.used{*} by {service, account}"
                                }
                              ]
                            }
                          ],
                          "title": "Widget Title",
                          "xaxis": [
                            {
                              "include_zero": true,
                              "label": "x",
                              "max": "2000",
                              "min": "1",
                              "scale": "pow"
                            }
                          ],
                          "yaxis": [
                            {
                              "include_zero": false,
                              "label": "y",
                              "max": "2222",
                              "min": "5",
                              "scale": "log"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "servicemap_definition": [
                        {
                          "filters": [
                            "env:prod",
                            "datacenter:dc1"
                          ],
                          "service": "master-db",
                          "title": "env: prod, datacenter:dc1, service: master-db",
                          "title_align": "left",
                          "title_size": "16"
                        }
                      ]
                    },
                    {
                      "timeseries_definition": [
                        {
                          "event": [
                            {
                              "q": "sources:test tags:1"
                            },
                            {
                              "q": "sources:test tags:2"
                            }
                          ],
                          "legend_size": "2",
                          "live_span": "1h",
                          "marker": [
                            {
                              "display_type": "error dashed",
                              "label": " z=6 ",
                              "value": "y = 4"
                            },
                            {
                              "display_type": "ok solid",
                              "label": " x=8 ",
                              "value": "10 \u003c y \u003c 999"
                            }
                          ],
                          "request": [
                            {
                              "display_type": "line",
                              "metadata": [
                                {
                                  "alias_name": "Alpha",
                                  "expression": "avg:system.cpu.user{app:general} by {env}"
                                }
                              ],
                              "q": "avg:system.cpu.user{app:general} by {env}",
                              "style": [
                                {
                                  "line_type": "dashed",
                                  "line_width": "thin",
                                  "palette": "warm"
                                }
                              ]
                            },
                            {
                              "display_type": "area",
                              "log_query": [
                                {
                                  "compute_query": [
                                    {
                                      "aggregation": "avg",
                                      "facet": "@duration",
                                      "interval": 5000
                                    }
                                  ],
                                  "group_by": [
                                    {
                                      "facet": "host",
                                      "limit": 10,
                                      "sort_query": [
                                        {
                                          "aggregation": "avg",
                                          "facet": "@duration",
                                          "order": "desc"
                                        }
                                      ]
                                    }
                                  ],
                                  "index": "mcnulty",
                                  "search_query": "status:info"
                                }
                              ]
                            },
                            {
                              "apm_query": [
                                {
                                  "compute_query": [
                                    {
                                      "aggregation": "avg",
                                      "facet": "@duration",
                                      "interval": 5000
                                    }
                                  ],
                                  "group_by": [
                                    {
                                      "facet": "resource_name",
                                      "limit": 50,
                                      "sort_query": [
                                        {
                                          "aggregation": "avg",
                                          "facet": "@string_query.interval",
                                          "order": "desc"
                                        }
                                      ]
                                    }
                                  ],
                                  "index": "apm-search",
                                  "search_query": "type:web"
                                }
                              ],
                              "display_type": "bars"
                            },
                            {
                              "display_type": "area",
                              "process_query": [
                                {
                                  "filter_by": [
                                    "active"
                                  ],
                                  "limit": 50,
                                  "metric": "process.stat.cpu.total_pct",
                                  "search_by": "error"
                                }
                              ]
                            }
                          ],
                          "show_legend": true,
                          "title": "Widget Title",
                          "yaxis": [
                            {
                              "include_zero": false,
                              "max": 100,
                              "scale": "log"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "toplist_definition": [
                        {
                          "request": [
                            {
                              "conditional_formats": [
                                {
                                  "comparator": "\u003c",
                                  "palette": "white_on_green",
                                  "value": "2"
                                },
                                {
                                  "comparator": "\u003e",
                                  "palette": "white_on_red",
                                  "value": "2.2"
                                }
                              ],
                              "q": "avg:system.cpu.user{app:general} by {env}"
                            }
                          ],
                          "title": "Widget Title"
                        }
                      ]
                    },
                    {
                      "group_definition": [
                        {
                          "layout_type": "ordered",
                          "title": "Group Widget",
                          "widget": [
                            {
                              "note_definition": [
                                {
                                  "background_color": "pink",
                                  "content": "cluster note widget",
                                  "font_size": "14",
                                  "show_tick": true,
                                  "text_align": "center",
                                  "tick_edge": "left",
                                  "tick_pos": "50%"
                                }
                              ]
                            },
                            {
                              "alert_graph_definition": [
                                {
                                  "alert_id": "123",
                                  "live_span": "1h",
                                  "title": "Alert Graph",
                                  "viz_type": "toplist"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "service_level_objective_definition": [
                        {
                          "show_error_budget": true,
                          "slo_id": "56789",
                          "time_windows": [
                            "7d",
                            "previous_week"
                          ],
                          "title": "Widget Title",
                          "view_mode": "overall",
                          "view_type": "detail"
                        }
                      ]
                    }
                  ]
                }
            - name: free_dashboard
              manifest: |-
                {
                  "description": "Created using the Datadog provider in Terraform",
                  "layout_type": "free",
                  "template_variable": [
                    {
                      "default": "aws",
                      "name": "var_1",
                      "prefix": "host"
                    },
                    {
                      "default": "autoscaling",
                      "name": "var_2",
                      "prefix": "service_name"
                    }
                  ],
                  "template_variable_preset": [
                    {
                      "name": "preset_1",
                      "template_variable": [
                        {
                          "name": "var_1",
                          "value": "host.dc"
                        },
                        {
                          "name": "var_2",
                          "value": "my_service"
                        }
                      ]
                    }
                  ],
                  "title": "Free Layout Dashboard",
                  "widget": [
                    {
                      "event_stream_definition": [
                        {
                          "event_size": "l",
                          "live_span": "1h",
                          "query": "*",
                          "title": "Widget Title",
                          "title_align": "left",
                          "title_size": 16
                        }
                      ],
                      "widget_layout": [
                        {
                          "height": 43,
                          "width": 32,
                          "x": 0,
                          "y": 0
                        }
                      ]
                    },
                    {
                      "event_timeline_definition": [
                        {
                          "live_span": "1h",
                          "query": "*",
                          "title": "Widget Title",
                          "title_align": "left",
                          "title_size": 16
                        }
                      ],
                      "widget_layout": [
                        {
                          "height": 9,
                          "width": 66,
                          "x": 33,
                          "y": 60
                        }
                      ]
                    },
                    {
                      "free_text_definition": [
                        {
                          "color": "#d00",
                          "font_size": "36",
                          "text": "free text content",
                          "text_align": "left"
                        }
                      ],
                      "widget_layout": [
                        {
                          "height": 20,
                          "width": 34,
                          "x": 33,
                          "y": 0
                        }
                      ]
                    },
                    {
                      "iframe_definition": [
                        {
                          "url": "http://google.com"
                        }
                      ],
                      "widget_layout": [
                        {
                          "height": 46,
                          "width": 39,
                          "x": 101,
                          "y": 0
                        }
                      ]
                    },
                    {
                      "image_definition": [
                        {
                          "margin": "small",
                          "sizing": "fit",
                          "url": "https://images.pexels.com/photos/67636/rose-blue-flower-rose-blooms-67636.jpeg?auto=compress\u0026cs=tinysrgb\u0026h=350"
                        }
                      ],
                      "widget_layout": [
                        {
                          "height": 20,
                          "width": 30,
                          "x": 69,
                          "y": 0
                        }
                      ]
                    },
                    {
                      "log_stream_definition": [
                        {
                          "columns": [
                            "core_host",
                            "core_service",
                            "tag_source"
                          ],
                          "indexes": [
                            "main"
                          ],
                          "message_display": "expanded-md",
                          "query": "error",
                          "show_date_column": true,
                          "show_message_column": true,
                          "sort": [
                            {
                              "column": "time",
                              "order": "desc"
                            }
                          ]
                        }
                      ],
                      "widget_layout": [
                        {
                          "height": 36,
                          "width": 32,
                          "x": 0,
                          "y": 45
                        }
                      ]
                    },
                    {
                      "manage_status_definition": [
                        {
                          "color_preference": "text",
                          "display_format": "countsAndList",
                          "hide_zero_counts": true,
                          "query": "type:metric",
                          "show_last_triggered": false,
                          "sort": "status,asc",
                          "summary_type": "monitors",
                          "title": "Widget Title",
                          "title_align": "left",
                          "title_size": 16
                        }
                      ],
                      "widget_layout": [
                        {
                          "height": 40,
                          "width": 30,
                          "x": 101,
                          "y": 48
                        }
                      ]
                    },
                    {
                      "trace_service_definition": [
                        {
                          "display_format": "three_column",
                          "env": "datadog.com",
                          "live_span": "1h",
                          "service": "alerting-cassandra",
                          "show_breakdown": true,
                          "show_distribution": true,
                          "show_errors": true,
                          "show_hits": true,
                          "show_latency": false,
                          "show_resource_list": false,
                          "size_format": "large",
                          "span_name": "cassandra.query",
                          "title": "alerting-cassandra #env:datadog.com",
                          "title_align": "center",
                          "title_size": "13"
                        }
                      ],
                      "widget_layout": [
                        {
                          "height": 38,
                          "width": 66,
                          "x": 33,
                          "y": 21
                        }
                      ]
                    },
                    {
                      "timeseries_definition": [
                        {
                          "request": [
                            {
                              "formula": [
                                {
                                  "alias": "my ff query",
                                  "formula_expression": "my_query_1 + my_query_2"
                                },
                                {
                                  "alias": "my second ff query",
                                  "formula_expression": "my_query_1 * my_query_2",
                                  "limit": [
                                    {
                                      "count": 5,
                                      "order": "desc"
                                    }
                                  ]
                                }
                              ],
                              "query": [
                                {
                                  "metric_query": [
                                    {
                                      "aggregator": "sum",
                                      "data_source": "metrics",
                                      "name": "my_query_1",
                                      "query": "avg:system.cpu.user{app:general} by {env}"
                                    }
                                  ]
                                },
                                {
                                  "metric_query": [
                                    {
                                      "aggregator": "sum",
                                      "name": "my_query_2",
                                      "query": "avg:system.cpu.user{app:general} by {env}"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "widget_layout": [
                        {
                          "height": 16,
                          "width": 25,
                          "x": 58,
                          "y": 83
                        }
                      ]
                    },
                    {
                      "timeseries_definition": [
                        {
                          "request": [
                            {
                              "query": [
                                {
                                  "event_query": [
                                    {
                                      "compute": [
                                        {
                                          "aggregation": "count"
                                        }
                                      ],
                                      "data_source": "logs",
                                      "group_by": [
                                        {
                                          "facet": "host",
                                          "limit": 10,
                                          "sort": [
                                            {
                                              "aggregation": "avg",
                                              "metric": "@lambda.max_memory_used"
                                            }
                                          ]
                                        }
                                      ],
                                      "indexes": [
                                        "days-3"
                                      ],
                                      "name": "my-query"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "display_type": "overlay",
                              "query": [
                                {
                                  "metric_query": [
                                    {
                                      "data_source": "metrics",
                                      "name": "MyOverlay",
                                      "query": "avg:system.cpu.user{host:COMP-QJWVM2FYT4}"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "widget_layout": [
                        {
                          "height": 16,
                          "width": 28,
                          "x": 29,
                          "y": 83
                        }
                      ]
                    },
                    {
                      "timeseries_definition": [
                        {
                          "request": [
                            {
                              "query": [
                                {
                                  "process_query": [
                                    {
                                      "aggregator": "sum",
                                      "data_source": "process",
                                      "is_normalized_cpu": true,
                                      "limit": 10,
                                      "metric": "process.stat.cpu.total_pct",
                                      "name": "my_process_query",
                                      "sort": "asc",
                                      "tag_filters": [
                                        "some_filter"
                                      ],
                                      "text_filter": "abc"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "widget_layout": [
                        {
                          "height": 16,
                          "width": 28,
                          "x": 0,
                          "y": 83
                        }
                      ]
                    },
                    {
                      "timeseries_definition": [
                        {
                          "request": [
                            {
                              "formula": [
                                {
                                  "alias": "my cloud cost query",
                                  "formula_expression": "query1"
                                }
                              ],
                              "query": [
                                {
                                  "cloud_cost_query": [
                                    {
                                      "aggregator": "sum",
                                      "data_source": "cloud_cost",
                                      "name": "query1",
                                      "query": "sum:aws.cost.amortized{*}"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "powerpack_definition": [
                        {
                          "background_color": "blue",
                          "banner_img": "https://example.org/example.png",
                          "powerpack_id": "00000000-0000-0000-0000-000000000000",
                          "show_title": true,
                          "template_variables": [
                            {
                              "controlled_by_powerpack": [
                                {
                                  "name": "var_3",
                                  "prefix": "timeframe",
                                  "values": [
                                    "default",
                                    "values",
                                    "here"
                                  ]
                                }
                              ],
                              "controlled_externally": [
                                {
                                  "name": "var_2",
                                  "prefix": "service_name",
                                  "values": [
                                    "autoscaling"
                                  ]
                                }
                              ]
                            }
                          ],
                          "title": "Powerpack Widget"
                        }
                      ]
                    }
                  ]
                }
        argumentDocs:
            additional_query_filters: (String) Additional filters applied to the SLO query.
            aggregation: (String) The aggregation method.
            aggregator: (String) The aggregation methods available for cloud cost queries. Valid values are avg, last, max, min, sum, percentile.
            alert_graph_definition: '(Block List, Max: 1) The definition for a Alert Graph widget. (see below for nested schema)'
            alert_id: (String) The ID of the monitor used by the widget.
            alert_value_definition: '(Block List, Max: 1) The definition for a Alert Value widget. (see below for nested schema)'
            alias: (String) An expression alias.
            alias_name: (String) The expression alias.
            apm_dependency_stats_query: '(Block List, Max: 1) The APM Dependency Stats query using formulas and functions. (see below for nested schema)'
            apm_query: '(Block List, Max: 1) The query to use for this widget. (see below for nested schema)'
            apm_resource_stats_query: '(Block List, Max: 1) The APM Resource Stats query using formulas and functions. (see below for nested schema)'
            apm_stats_query: '(Block List, Max: 1) (see below for nested schema)'
            audit_query: '(Block List, Max: 1) The query to use for this widget. (see below for nested schema)'
            autoscale: (Boolean) A Boolean indicating whether to automatically scale the tile.
            available_values: (List of String) The list of values that the template variable drop-down is be limited to
            background_color: '(String) The background color of the group title, options: vivid_blue, vivid_purple, vivid_pink, vivid_orange, vivid_yellow, vivid_green, blue, purple, pink, orange, yellow, green, gray or white'
            banner_img: (String) The image URL to display as a banner for the group.
            cell_display_mode: (String) A list of display modes for each table cell. Valid values are number, bar.
            change_definition: '(Block List, Max: 1) The definition for a Change widget. (see below for nested schema)'
            change_type: (String) Whether to show absolute or relative change. Valid values are absolute, relative.
            check: (String) The check to use in the widget.
            check_status_definition: '(Block List, Max: 1) The definition for a Check Status widget. (see below for nested schema)'
            cloud_cost_query: '(Block List, Max: 1) The Cloud Cost query using formulas and functions. (see below for nested schema)'
            color: (String) The color of the text in the widget.
            color_by_groups: (List of String) List of groups used for colors.
            color_preference: (String) Whether to colorize text or background. Valid values are background, text.
            column: (String) The facet path for the column.
            columns: (Block List) Column properties used by the front end for display. (see below for nested schema)
            comparator: (String) The comparator to use. Valid values are =, >, >=, <, <=.
            compare_to: (String) Choose from when to compare current data to. Valid values are hour_before, day_before, week_before, month_before.
            compute: '(Block List, Min: 1) The compute options. (see below for nested schema)'
            compute_query: '(Block List, Max: 1) compute_query or multi_compute is required. The map keys are listed below. (see below for nested schema)'
            conditional_formats: (Block List) Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple conditional_formats blocks are allowed using the structure below. (see below for nested schema)
            content: (String) The content of the note.
            controlled_by_powerpack: (Block List) Template variables controlled at the powerpack level. (see below for nested schema)
            controlled_externally: (Block List) Template variables controlled by the external resource, such as the dashboard this powerpack is on. (see below for nested schema)
            count: (Number) The number of results to return.
            cross_org_uuids: (List of String) The source organization UUID for cross organization queries. Feature in Private Beta.
            custom_bg_color: (String) The color palette to apply to the background, same values available as palette.
            custom_fg_color: (String) The color palette to apply to the foreground, same values available as palette.
            custom_link: (Block List) A nested block describing a custom link. Multiple custom_link blocks are allowed using the structure below. (see below for nested schema)
            custom_unit: (String) The unit for the value displayed in the widget.
            dashboard_lists: (Set of Number) A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding dashboard lists using Terraform as it causes inconsistent behavior.
            dashboard_lists_removed: (Set of Number) A list of dashboard lists this dashboard should be removed from. Internal only.
            data_source: (String) The data source for APM Dependency Stats queries. Valid values are apm_dependency_stats.
            default: (String, Deprecated) The default value for the template variable on dashboard load. Cannot be used in conjunction with defaults. Deprecated. Use defaults instead.
            defaults: (List of String) One or many default values for template variables on load. If more than one default is specified, they will be unioned together with OR. Cannot be used in conjunction with default.
            description: (String) The description of the dashboard.
            dimension: (String) Dimension of the Scatterplot. Valid values are x, y, radius, color.
            display_format: (String) The display setting to use. Valid values are counts, countsAndList, list.
            display_type: '(String) How the marker lines are displayed, options are one of {error, warning, info, ok} combined with one of {dashed, solid, bold}. Example: error dashed.'
            distribution_definition: '(Block List, Max: 1) The definition for a Distribution widget. (see below for nested schema)'
            env: (String) APM environment.
            event: (Block List) The definition of the event to overlay on the graph. Multiple event blocks are allowed using the structure below. (see below for nested schema)
            event_query: '(Block List, Max: 1) A timeseries formula and functions events query. (see below for nested schema)'
            event_size: (String) The size to use to display an event. Valid values are s, l.
            event_stream_definition: '(Block List, Max: 1) The definition for a Event Stream widget. (see below for nested schema)'
            event_timeline_definition: '(Block List, Max: 1) The definition for a Event Timeline widget. (see below for nested schema)'
            expression: (String) The expression name.
            facet: (String) The facet name.
            field: (String) Widget column field.
            fill: (Block List) The query used to fill the map. Exactly one nested block is allowed using the structure below (exactly one of q, apm_query, log_query, rum_query, security_query or process_query is required within the request block). (see below for nested schema)
            fill_max: (String) The max value to use to color the map.
            fill_min: (String) The min value to use to color the map.
            filter_by: (List of String) A list of processes.
            filters: (List of String) Your environment and primary tag (or * if enabled for your account).
            focus: (String) The two-letter ISO code of a country to focus the map on (or WORLD).
            font_size: (String) The size of the text in the widget.
            formula: (Block List) (see below for nested schema)
            formula_expression: (String) A string expression built from queries, formulas, and functions.
            free_text_definition: '(Block List, Max: 1) The definition for a Free Text widget. (see below for nested schema)'
            geomap_definition: '(Block List, Max: 1) The definition for a Geomap widget. (see below for nested schema)'
            global_time_target: (String) The global time target of the widget.
            group: (String) The check group to use in the widget.
            group_by: (Block List) Multiple group_by blocks are allowed using the structure below. (see below for nested schema)
            group_definition: '(Block List, Max: 1) The definition for a Group widget. (see below for nested schema)'
            group_mode: (String) Group mode to query measures. Valid values are overall, components. Defaults to "overall".
            grouping: (String) The kind of grouping to use. Valid values are check, cluster.
            has_background: (Boolean) Whether to display a background or not. Defaults to true.
            has_border: (Boolean) Whether to display a border or not. Defaults to true.
            has_padding: (Boolean) Whether to add padding or not. Defaults to true.
            has_search_bar: (String) Controls the display of the search bar. Valid values are always, never, auto.
            has_uniform_y_axes: (Boolean) Normalize y axes across graphs.
            heatmap_definition: '(Block List, Max: 1) The definition for a Heatmap widget. (see below for nested schema)'
            height: (Number) The height of the widget.
            hide_percent: (Boolean) Whether to hide the percentages of the groups.
            hide_total: (Boolean) Whether or not to show the total value in the widget.
            hide_value: (Boolean) Setting this to True hides values.
            hide_zero_counts: (Boolean) A Boolean indicating whether to hide empty categories.
            horizontal_align: (String) The horizontal alignment for the widget. Valid values are center, left, right.
            hostmap_definition: '(Block List, Max: 1) The definition for a Hostmap widget. (see below for nested schema)'
            id: (String) The ID of this resource.
            iframe_definition: '(Block List, Max: 1) The definition for an Iframe widget. (see below for nested schema)'
            image_definition: '(Block List, Max: 1) The definition for an Image widget (see below for nested schema)'
            image_url: (String) Displays an image as the background.
            include_zero: (Boolean) Always include zero or fit the axis to the data range.
            increase_good: (Boolean) A Boolean indicating whether an increase in the value is good (displayed in green) or not (displayed in red).
            index: (String) The name of the index to query.
            indexes: (List of String) An array of index names to query in the stream.
            input: (Block List) Array of workflow inputs to map to dashboard template variables. (see below for nested schema)
            interval: (Number) Define the time interval in seconds.
            is_column_break: (Boolean) Whether the widget should be the first one on the second column in high density or not. Only one widget in the dashboard should have this property set to true.
            is_hidden: (Boolean) The flag for toggling context menu link visibility.
            is_normalized_cpu: (Boolean) Whether to normalize the CPU percentages.
            is_read_only: (Boolean, Deprecated) Whether this dashboard is read-only. Deprecated. Prefer using restricted_roles to define which roles are required to edit the dashboard. Defaults to false.
            is_upstream: (Boolean) Determines whether stats for upstream or downstream dependencies should be queried.
            label: (String) The label for the custom link URL.
            layout_type: (String) The layout type of the dashboard. Valid values are ordered, free.
            legend_columns: (Set of String) A list of columns to display in the legend. Valid values are value, avg, sum, min, max.
            legend_inline: '(Block List, Max: 1) Used to configure the inline legend. Cannot be used in conjunction with legend_table. (see below for nested schema)'
            legend_layout: (String) The layout of the legend displayed in the widget. Valid values are auto, horizontal, vertical.
            legend_size: (String) The size of the legend displayed in the widget.
            legend_table: '(Block List, Max: 1) Used to configure the table legend. Cannot be used in conjunction with legend_inline. (see below for nested schema)'
            limit: (Number) The maximum number of items in the group.
            line_type: (String) The type of lines displayed. Valid values are dashed, dotted, solid.
            line_width: (String) The width of line displayed. Valid values are normal, thick, thin.
            link: (String) The URL of the custom link.
            list_stream_definition: '(Block List, Max: 1) The definition for a List Stream widget. (see below for nested schema)'
            live_span: (String) The timeframe to use when displaying the widget. Valid values are 1m, 5m, 10m, 15m, 30m, 1h, 4h, 1d, 2d, 1w, 1mo, 3mo, 6mo, week_to_date, month_to_date, 1y, alert.
            log_query: '(Block List, Max: 1) The query to use for this widget. (see below for nested schema)'
            log_stream_definition: '(Block List, Max: 1) The definition for an Log Stream widget. (see below for nested schema)'
            manage_status_definition: '(Block List, Max: 1) The definition for an Manage Status widget. (see below for nested schema)'
            margin: '(String) The margins to use around the image. Note: small and large values are deprecated. Valid values are sm, md, lg, small, large.'
            marker: (Block List) A nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple marker blocks are allowed within a given tile_def block. (see below for nested schema)
            max: (String) Specify the maximum value to show on the Y-axis.
            measure: (String) SLO measures queries. Valid values are good_events, bad_events, slo_status, error_budget_remaining, burn_rate, error_budget_burndown.
            message_display: (String) The number of log lines to display. Valid values are inline, expanded-md, expanded-lg.
            metadata: (Block List) Used to define expression aliases. Multiple metadata blocks are allowed using the structure below. (see below for nested schema)
            metric: (String) The metric from the request to correlate with this conditional format.
            metric_query: '(Block List, Max: 1) A timeseries formula and functions metrics query. (see below for nested schema)'
            min: (String) Specify the minimum value to show on the Y-axis.
            multi_compute: (Block List) compute_query or multi_compute is required. Multiple multi_compute blocks are allowed using the structure below. (see below for nested schema)
            name: (String) The name of the variable.
            network_query: '(Block List, Max: 1) The query to use for this widget. (see below for nested schema)'
            no_group_hosts: (Boolean) A Boolean indicating whether to show ungrouped nodes.
            no_metric_hosts: (Boolean) A Boolean indicating whether to show nodes with no metrics.
            node_type: (String) The type of node used. Valid values are host, container.
            note_definition: '(Block List, Max: 1) The definition for a Note widget. (see below for nested schema)'
            notify_list: (Set of String) The list of handles for the users to notify when changes are made to this dashboard.
            on_right_yaxis: (Boolean) A Boolean indicating whether the request uses the right or left Y-Axis.
            one_graph_per: (String) The system interprets this attribute differently depending on the data source of the query being split. For metrics, it's a tag. For the events platform, it's an attribute or tag.
            operation_name: (String) Name of operation on service.
            order: (String) Widget sorting methods. Valid values are asc, desc.
            order_by: (String) What to order by. Valid values are change, name, present, past.
            order_dir: (String) Widget sorting method. Valid values are asc, desc.
            override_label: (String) The label ID that refers to a context menu link item. When override_label is provided, the client request omits the label field.
            palette: (String) The color palette to apply. Valid values are blue, custom_bg, custom_image, custom_text, gray_on_white, grey, green, orange, red, red_on_white, white_on_gray, white_on_green, green_on_white, white_on_red, white_on_yellow, yellow_on_white, black_on_light_yellow, black_on_light_green, black_on_light_red.
            palette_flip: (Boolean) A Boolean indicating whether to flip the palette tones.
            palette_index: (Number) Index specifying which color to use within the palette.
            powerpack_definition: '(Block List, Max: 1) The definition for a Powerpack widget. (see below for nested schema)'
            powerpack_id: (String) UUID of the associated powerpack.
            precision: (Number) The precision to use when displaying the value. Use * for maximum precision.
            prefix: (String) The tag prefix associated with the variable. Only tags with this prefix appear in the variable dropdown.
            primary_tag: (String) The organization's host group name and value.
            primary_tag_name: (String) The name of the second primary tag used within APM; required when primary_tag_value is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
            primary_tag_value: (String) Filter APM data by the second primary tag. primary_tag_name must also be specified.
            process_query: '(Block List, Max: 1) The process query to use in the widget. The structure of this block is described below. (see below for nested schema)'
            q: (String) The metric query to use for this widget.
            query: (Block List) (see below for nested schema)
            query_string: (String) Widget query.
            query_table_definition: '(Block List, Max: 1) The definition for a Query Table widget. (see below for nested schema)'
            query_value_definition: '(Block List, Max: 1) The definition for a Query Value widget. (see below for nested schema)'
            reflow_type: (String) The reflow type of a new dashboard layout. Set this only when layout type is ordered. If set to fixed, the dashboard expects all widgets to have a layout, and if it's set to auto, widgets should not have layouts. Valid values are auto, fixed.
            request: (Block List) A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of q, apm_query, log_query, rum_query, security_query or process_query is required within the request block). (see below for nested schema)
            request_type: (String) The request type for the SLO List request. Valid values are slo_list.
            resource: (String) The resource name.
            resource_name: (String) APM resource.
            response_format: (String) Widget response format. Valid values are event_list.
            restricted_roles: (Set of String) UUIDs of roles whose associated users are authorized to edit the dashboard.
            right_yaxis: '(Block List, Max: 1) A nested block describing the right Y-Axis Controls. See the on_right_yaxis property for which request will use this axis. The structure of this block is described below. (see below for nested schema)'
            row_type: (String) The level of detail for the request. Valid values are service, resource, span.
            rum_query: '(Block List, Max: 1) The query to use for this widget. (see below for nested schema)'
            run_workflow_definition: '(Block List, Max: 1) The definition for a Run Workflow widget. (see below for nested schema)'
            scale: '(String) Specify the scale type, options: linear, log, pow, sqrt.'
            scatterplot_definition: '(Block List, Max: 1) The definition for a Scatterplot widget. (see below for nested schema)'
            scatterplot_table: (Block List) Scatterplot request containing formulas and functions. (see below for nested schema)
            scope: (List of String) The list of tags to filter nodes by.
            search: '(Block List, Max: 1) The search options. (see below for nested schema)'
            search_by: (String) Your chosen search term.
            search_query: (String) The search query to use.
            security_query: '(Block List, Max: 1) The query to use for this widget. (see below for nested schema)'
            service: (String) APM service.
            service_level_objective_definition: '(Block List, Max: 1) The definition for a Service Level Objective widget. (see below for nested schema)'
            servicemap_definition: '(Block List, Max: 1) The definition for a Service Map widget. (see below for nested schema)'
            show_breakdown: (Boolean) Whether to show the latency breakdown or not.
            show_date_column: (Boolean) If the date column should be displayed.
            show_distribution: (Boolean) Whether to show the latency distribution or not.
            show_error_budget: (Boolean) Whether to show the error budget or not.
            show_errors: (Boolean) Whether to show the error metrics or not.
            show_hits: (Boolean) Whether to show the hits metrics or not
            show_last_triggered: (Boolean) A Boolean indicating whether to show when monitors/groups last triggered.
            show_latency: (Boolean) Whether to show the latency metrics or not.
            show_legend: (Boolean) Whether or not to show the legend on this widget.
            show_message_column: (Boolean) If the message column should be displayed.
            show_present: (Boolean) If set to true, displays the current value.
            show_priority: (Boolean) Whether to show the priorities column.
            show_resource_list: (Boolean) Whether to show the resource list or not.
            show_tick: (Boolean) Whether to show a tick or not.
            show_title: (Boolean) Whether to show the title or not. Defaults to true.
            size: (Block List) The query used to size the map. Exactly one nested block is allowed using the structure below (exactly one of q, apm_query, log_query, rum_query, security_query or process_query is required within the request block). (see below for nested schema)
            size_format: (String) The size of the widget. Valid values are small, medium, large.
            sizing: '(String) The preferred method to adapt the dimensions of the image. The values are based on the image object-fit CSS properties. Note: zoom, fit and center values are deprecated. Valid values are fill, contain, cover, none, scale-down, zoom, fit, center.'
            slo_id: (String) ID of an SLO to query.
            slo_list_definition: '(Block List, Max: 1) The definition for an SLO (Service Level Objective) List widget. (see below for nested schema)'
            slo_query: '(Block List, Max: 1) The SLO query using formulas and functions. (see below for nested schema)'
            slo_query_type: (String) type of the SLO to query. Valid values are metric, time_slice. Defaults to "metric".
            sort: '(Block List, Max: 1) The options for sorting group by results. (see below for nested schema)'
            sort_query: '(Block List, Max: 1) A list of exactly one element describing the sort query to use. (see below for nested schema)'
            source_widget_definition: '(Block List, Min: 1, Max: 1) The original widget we are splitting on. (see below for nested schema)'
            span_name: (String) APM span name
            split_config: '(Block List, Min: 1, Max: 1) Encapsulates all user choices about how to split a graph. (see below for nested schema)'
            split_dimensions: '(Block List, Min: 1, Max: 1) The property by which the graph splits (see below for nested schema)'
            split_graph_definition: '(Block List, Max: 1) The definition for a Split Graph widget. (see below for nested schema)'
            split_vector: '(Block List, Min: 1) The split graph list contains a graph for each value of the split dimension. (see below for nested schema)'
            stat: (String) APM statistic. Valid values are avg_duration, avg_root_duration, avg_spans_per_trace, error_rate, pct_exec_time, pct_of_traces, total_traces_count.
            static_splits: '(Block List, Max: 500) The property by which the graph splits (see below for nested schema)'
            storage: (String) Storage location (private beta).
            style: '(Block List, Max: 1) Styling options for widget formulas. (see below for nested schema)'
            summary_type: (String) The summary type to use. Valid values are monitors, groups, combined.
            sunburst_definition: '(Block List, Max: 1) The definition for a Sunburst widget. (see below for nested schema)'
            tag_filters: (List of String) An array of tags to filter by.
            tag_key: (String)
            tag_values: (List of String)
            tags: (List of String) A list of tags assigned to the Dashboard. Only team names of the form team:<name> are supported.
            tags_execution: '(String) The execution method for multi-value filters, options: and or or.'
            template_variable: (Block List) The list of template variables for this dashboard. (see below for nested schema)
            template_variable_preset: (Block List) The list of selectable template variable presets for this dashboard. (see below for nested schema)
            template_variables: '(Block List, Max: 1) The list of template variables for this powerpack. (see below for nested schema)'
            text: (String) The text to display in the widget.
            text_align: (String) The alignment of the text in the widget. Valid values are center, left, right.
            text_filter: (String) The text to use as a filter.
            tick_edge: (String) When tick = true, a string indicating on which side of the widget the tick should be displayed. Valid values are bottom, left, right, top.
            tick_pos: '(String) When tick = true, a string with a percent sign indicating the position of the tick, for example: tick_pos = "50%" is centered alignment.'
            time_windows: (List of String) A list of time windows to display in the widget. Valid values are 7d, 30d, 90d, week_to_date, previous_week, month_to_date, previous_month, global_time.
            timeframe: (String) Defines the displayed timeframe.
            timeseries_background: '(Block List, Max: 1) Set a timeseries on the widget background. (see below for nested schema)'
            timeseries_definition: '(Block List, Max: 1) The definition for a Timeseries widget. (see below for nested schema)'
            title: (String) The title of the dashboard.
            title_align: (String) The alignment of the widget's title. Valid values are center, left, right.
            title_size: (String) The size of the widget's title (defaults to 16).
            toplist_definition: '(Block List, Max: 1) The definition for a Toplist widget. (see below for nested schema)'
            topology_map_definition: '(Block List, Max: 1) The definition for a Topology Map widget. (see below for nested schema)'
            trace_service_definition: '(Block List, Max: 1) The definition for a Trace Service widget. (see below for nested schema)'
            treemap_definition: '(Block List, Max: 1) The definition for a Treemap widget. (see below for nested schema)'
            type: (String) Whether the Timeseries is made using an area or bars. Valid values are bars, area.
            unit: (String) The unit for the value displayed in the widget.
            url: (String) The URL of the dashboard.
            url_dark_theme: (String) The URL in dark mode to use as a data source for the widget.
            value: (String, Deprecated) The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with values. Deprecated. Use values instead.
            values: (List of String) One or many template variable values within the saved view, which will be unioned together using OR if more than one is specified. Cannot be used in conjunction with value.
            vertical_align: (String) The vertical alignment for the widget. Valid values are center, top, bottom.
            view: '(Block List, Min: 1, Max: 1) The view of the world that the map should render. (see below for nested schema)'
            view_mode: (String) The view mode for the widget. Valid values are overall, component, both.
            view_type: (String) The type of view to use when displaying the widget. Only detail is supported.
            viz_type: (String) Type of visualization to use when displaying the widget. Valid values are timeseries, toplist.
            widget: (Block List) The list of widgets to display on the dashboard. (see below for nested schema)
            widget_layout: '(Block List, Max: 1) The layout of the widget on a ''free'' dashboard. (see below for nested schema)'
            width: (String) Widget column width. Valid values are auto, compact, full.
            workflow_id: (String) Workflow ID
            x: (Block List) The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of q, apm_query, log_query, rum_query, security_query, apm_stats_query or process_query is required within the block). (see below for nested schema)
            xaxis: '(Block List, Max: 1) A nested block describing the X-Axis Controls. Exactly one nested block is allowed using the structure below. (see below for nested schema)'
            "y": (Block List) The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of q, apm_query, log_query, rum_query, security_query, apm_stats_query or process_query is required within the block). (see below for nested schema)
            yaxis: '(Block List, Max: 1) A nested block describing the Y-Axis Controls. The structure of this block is described below. (see below for nested schema)'
        importStatements:
            - terraform import datadog_dashboard.my_service_dashboard sv7-gyh-kas
    datadog_dashboard_json:
        subCategory: ""
        description: Provides a Datadog dashboard JSON resource. This can be used to create and manage Datadog dashboards using the JSON definition.
        name: datadog_dashboard_json
        title: datadog_dashboard_json Resource - terraform-provider-datadog
        examples:
            - name: dashboard_json
              manifest: |-
                {
                  "dashboard": "{\n   \"title\":\"Ordered Layout Dashboard\",\n   \"description\":\"Created using the Datadog provider in Terraform\",\n   \"widgets\":[\n      {\n         \"id\":719369537777170,\n         \"definition\":{\n            \"title\":\"Widget Title\",\n            \"type\":\"alert_graph\",\n            \"alert_id\":\"895605\",\n            \"viz_type\":\"timeseries\"\n         }\n      },\n      {\n         \"id\":2306240030393868,\n         \"definition\":{\n            \"title\":\"Widget Title\",\n            \"type\":\"alert_value\",\n            \"alert_id\":\"895605\",\n            \"unit\":\"b\",\n            \"text_align\":\"center\",\n            \"precision\":3\n         }\n      },\n      {\n         \"id\":6990998850881326,\n         \"definition\":{\n            \"title\":\"Widget Title\",\n            \"type\":\"alert_value\",\n            \"alert_id\":\"895605\",\n            \"unit\":\"b\",\n            \"text_align\":\"center\",\n            \"precision\":3\n         }\n      },\n      {\n         \"id\":3351284044659007,\n         \"definition\":{\n            \"title\":\"Widget Title\",\n            \"type\":\"change\",\n            \"requests\":[\n               {\n                  \"q\":\"avg:system.load.1{env:staging} by {account}\",\n                  \"compare_to\":\"week_before\",\n                  \"change_type\":\"absolute\",\n                  \"order_dir\":\"desc\",\n                  \"increase_good\":true,\n                  \"order_by\":\"name\",\n                  \"show_present\":true\n               }\n            ]\n         }\n      },\n      {\n         \"id\":6450290622996182,\n         \"definition\":{\n            \"title\":\"Widget Title\",\n            \"show_legend\":false,\n            \"type\":\"distribution\",\n            \"requests\":[\n               {\n                  \"q\":\"avg:system.load.1{env:staging} by {account}\",\n                  \"style\":{\n                     \"palette\":\"warm\"\n                  }\n               }\n            ]\n         }\n      },\n      {\n         \"id\":4902842646291536,\n         \"definition\":{\n            \"title\":\"Widget Title\",\n            \"type\":\"check_status\",\n            \"check\":\"aws.ecs.agent_connected\",\n            \"grouping\":\"cluster\",\n            \"group_by\":[\n               \"account\",\n               \"cluster\"\n            ],\n            \"tags\":[\n               \"account:demo\",\n               \"cluster:awseb-ruthebdog-env-8-dn3m6u3gvk\"\n            ]\n         }\n      },\n      {\n         \"id\":6392349954822644,\n         \"definition\":{\n            \"title\":\"Widget Title\",\n            \"show_legend\":false,\n            \"type\":\"heatmap\",\n            \"yaxis\":{\n               \"scale\":\"sqrt\",\n               \"include_zero\":true,\n               \"min\":\"1\",\n               \"max\":\"2\"\n            },\n            \"requests\":[\n               {\n                  \"q\":\"avg:system.load.1{env:staging} by {account}\",\n                  \"style\":{\n                     \"palette\":\"warm\"\n                  }\n               }\n            ]\n         }\n      },\n      {\n         \"id\":5222961478940988,\n         \"definition\":{\n            \"title\":\"Widget Title\",\n            \"type\":\"hostmap\",\n            \"requests\":{\n               \"fill\":{\n                  \"q\":\"avg:system.load.1{*} by {host}\"\n               },\n               \"size\":{\n                  \"q\":\"avg:memcache.uptime{*} by {host}\"\n               }\n            },\n            \"node_type\":\"container\",\n            \"no_metric_hosts\":true,\n            \"no_group_hosts\":true,\n            \"group\":[\n               \"host\",\n               \"region\"\n            ],\n            \"scope\":[\n               \"region:us-east-1\",\n               \"aws_account:727006795293\"\n            ],\n            \"style\":{\n               \"palette\":\"yellow_to_green\",\n               \"palette_flip\":true,\n               \"fill_min\":\"10\",\n               \"fill_max\":\"20\"\n            }\n         }\n      },\n      {\n         \"id\":8121199734227072,\n         \"definition\":{\n            \"type\":\"note\",\n            \"content\":\"note text\",\n            \"background_color\":\"pink\",\n            \"font_size\":\"14\",\n            \"text_align\":\"center\",\n            \"show_tick\":true,\n            \"tick_pos\":\"50%\",\n            \"tick_edge\":\"left\"\n         }\n      },\n      {\n         \"id\":1775856835833038,\n         \"definition\":{\n            \"title\":\"Widget Title\",\n            \"type\":\"query_value\",\n            \"requests\":[\n               {\n                  \"q\":\"avg:system.load.1{env:staging} by {account}\",\n                  \"aggregator\":\"sum\",\n                  \"conditional_formats\":[\n                     {\n                        \"hide_value\":false,\n                        \"comparator\":\"\u003c\",\n                        \"palette\":\"white_on_green\",\n                        \"value\":2\n                     },\n                     {\n                        \"hide_value\":false,\n                        \"comparator\":\"\u003e\",\n                        \"palette\":\"white_on_red\",\n                        \"value\":2.2\n                     }\n                  ]\n               }\n            ],\n            \"autoscale\":true,\n            \"custom_unit\":\"xx\",\n            \"text_align\":\"right\",\n            \"precision\":4\n         }\n      },\n      {\n         \"id\":8461455966625581,\n         \"definition\":{\n            \"title\":\"Widget Title\",\n            \"type\":\"query_table\",\n            \"requests\":[\n               {\n                  \"q\":\"avg:system.load.1{env:staging} by {account}\",\n                  \"aggregator\":\"sum\",\n                  \"conditional_formats\":[\n                     {\n                        \"hide_value\":false,\n                        \"comparator\":\"\u003c\",\n                        \"palette\":\"white_on_green\",\n                        \"value\":2\n                     },\n                     {\n                        \"hide_value\":false,\n                        \"comparator\":\"\u003e\",\n                        \"palette\":\"white_on_red\",\n                        \"value\":2.2\n                     }\n                  ],\n                  \"limit\":10\n               }\n            ]\n         }\n      },\n      {\n         \"id\":8660006349418736,\n         \"definition\":{\n            \"title\":\"Widget Title\",\n            \"type\":\"scatterplot\",\n            \"requests\":{\n               \"x\":{\n                  \"q\":\"avg:system.cpu.user{*} by {service, account}\",\n                  \"aggregator\":\"max\"\n               },\n               \"y\":{\n                  \"q\":\"avg:system.mem.used{*} by {service, account}\",\n                  \"aggregator\":\"min\"\n               }\n            },\n            \"xaxis\":{\n               \"scale\":\"pow\",\n               \"label\":\"x\",\n               \"include_zero\":true,\n               \"min\":\"1\",\n               \"max\":\"2000\"\n            },\n            \"yaxis\":{\n               \"scale\":\"log\",\n               \"label\":\"y\",\n               \"include_zero\":false,\n               \"min\":\"5\",\n               \"max\":\"2222\"\n            },\n            \"color_by_groups\":[\n               \"account\",\n               \"apm-role-group\"\n            ]\n         }\n      },\n      {\n         \"id\":1669590772917638,\n         \"definition\":{\n            \"title\":\"env: prod, datacenter:dc1, service: master-db\",\n            \"title_size\":\"16\",\n            \"title_align\":\"left\",\n            \"type\":\"servicemap\",\n            \"service\":\"master-db\",\n            \"filters\":[\n               \"env:prod\",\n               \"datacenter:dc1\"\n            ]\n         }\n      },\n      {\n         \"id\":2138829058361817,\n         \"definition\":{\n            \"title\":\"Widget Title\",\n            \"show_legend\":true,\n            \"legend_size\":\"2\",\n            \"type\":\"timeseries\",\n            \"requests\":[\n               {\n                  \"q\":\"avg:system.cpu.user{app:general} by {env}\",\n                  \"on_right_yaxis\":false,\n                  \"metadata\":[\n                     {\n                        \"expression\":\"avg:system.cpu.user{app:general} by {env}\",\n                        \"alias_name\":\"Alpha\"\n                     }\n                  ],\n                  \"style\":{\n                     \"palette\":\"warm\",\n                     \"line_type\":\"dashed\",\n                     \"line_width\":\"thin\"\n                  },\n                  \"display_type\":\"line\"\n               },\n               {\n                  \"on_right_yaxis\":false,\n                  \"log_query\":{\n                     \"index\":\"mcnulty\",\n                     \"search\":{\n                        \"query\":\"status:info\"\n                     },\n                     \"group_by\":[\n                        {\n                           \"facet\":\"host\",\n                           \"sort\":{\n                              \"facet\":\"@duration\",\n                              \"aggregation\":\"avg\",\n                              \"order\":\"desc\"\n                           },\n                           \"limit\":10\n                        }\n                     ],\n                     \"compute\":{\n                        \"facet\":\"@duration\",\n                        \"interval\":5000,\n                        \"aggregation\":\"avg\"\n                     }\n                  },\n                  \"display_type\":\"area\"\n               },\n               {\n                  \"on_right_yaxis\":false,\n                  \"apm_query\":{\n                     \"index\":\"apm-search\",\n                     \"search\":{\n                        \"query\":\"type:web\"\n                     },\n                     \"group_by\":[\n                        {\n                           \"facet\":\"resource_name\",\n                           \"sort\":{\n                              \"facet\":\"@string_query.interval\",\n                              \"aggregation\":\"avg\",\n                              \"order\":\"desc\"\n                           },\n                           \"limit\":50\n                        }\n                     ],\n                     \"compute\":{\n                        \"facet\":\"@duration\",\n                        \"interval\":5000,\n                        \"aggregation\":\"avg\"\n                     }\n                  },\n                  \"display_type\":\"bars\"\n               },\n               {\n                  \"on_right_yaxis\":false,\n                  \"process_query\":{\n                     \"search_by\":\"error\",\n                     \"metric\":\"process.stat.cpu.total_pct\",\n                     \"limit\":50,\n                     \"filter_by\":[\n                        \"active\"\n                     ]\n                  },\n                  \"display_type\":\"area\"\n               }\n            ],\n            \"yaxis\":{\n               \"scale\":\"log\",\n               \"include_zero\":false,\n               \"max\":\"100\"\n            },\n            \"events\":[\n               {\n                  \"q\":\"sources:test tags:1\"\n               },\n               {\n                  \"q\":\"sources:test tags:2\"\n               }\n            ],\n            \"markers\":[\n               {\n                  \"label\":\" z=6 \",\n                  \"value\":\"y = 4\",\n                  \"display_type\":\"error dashed\"\n               },\n               {\n                  \"label\":\" x=8 \",\n                  \"value\":\"10 \u003c y \u003c 999\",\n                  \"display_type\":\"ok solid\"\n               }\n            ]\n         }\n      },\n      {\n         \"id\":7307171374656551,\n         \"definition\":{\n            \"title\":\"Widget Title\",\n            \"type\":\"toplist\",\n            \"requests\":[\n               {\n                  \"q\":\"avg:system.cpu.user{app:general} by {env}\",\n                  \"conditional_formats\":[\n                     {\n                        \"hide_value\":false,\n                        \"comparator\":\"\u003c\",\n                        \"palette\":\"white_on_green\",\n                        \"value\":2\n                     },\n                     {\n                        \"hide_value\":false,\n                        \"comparator\":\"\u003e\",\n                        \"palette\":\"white_on_red\",\n                        \"value\":2.2\n                     }\n                  ]\n               }\n            ]\n         }\n      },\n      {\n         \"id\":7086674838553258,\n         \"definition\":{\n            \"title\":\"Group Widget\",\n            \"type\":\"group\",\n            \"layout_type\":\"ordered\",\n            \"widgets\":[\n               {\n                  \"id\":3726092277657502,\n                  \"definition\":{\n                     \"type\":\"note\",\n                     \"content\":\"cluster note widget\",\n                     \"background_color\":\"pink\",\n                     \"font_size\":\"14\",\n                     \"text_align\":\"center\",\n                     \"show_tick\":true,\n                     \"tick_pos\":\"50%\",\n                     \"tick_edge\":\"left\"\n                  }\n               },\n               {\n                  \"id\":6376384650558057,\n                  \"definition\":{\n                     \"title\":\"Alert Graph\",\n                     \"type\":\"alert_graph\",\n                     \"alert_id\":\"123\",\n                     \"viz_type\":\"toplist\"\n                  }\n               }\n            ]\n         }\n      },\n      {\n         \"id\":4668903563678912,\n         \"definition\":{\n            \"title\":\"Widget Title\",\n            \"type\":\"slo\",\n            \"view_type\":\"detail\",\n            \"time_windows\":[\n               \"7d\",\n               \"previous_week\"\n            ],\n            \"slo_id\":\"56789\",\n            \"show_error_budget\":true,\n            \"view_mode\":\"overall\",\n            \"global_time_target\":\"0\"\n         }\n      }\n   ],\n   \"template_variables\":[\n      {\n         \"name\":\"var_1\",\n         \"default\":\"aws\",\n         \"prefix\":\"host\"\n      },\n      {\n         \"name\":\"var_2\",\n         \"default\":\"autoscaling\",\n         \"prefix\":\"service_name\"\n      }\n   ],\n   \"layout_type\":\"ordered\",\n   \"is_read_only\":true,\n   \"notify_list\":[\n\n   ],\n   \"template_variable_presets\":[\n      {\n         \"name\":\"preset_1\",\n         \"template_variables\":[\n            {\n               \"name\":\"var_1\",\n               \"value\":\"host.dc\"\n            },\n            {\n               \"name\":\"var_2\",\n               \"value\":\"my_service\"\n            }\n         ]\n      }\n   ]\n}\n"
                }
        argumentDocs:
            dashboard: (String) The JSON formatted definition of the Dashboard.
            dashboard_lists: (Set of Number) A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding dashboard lists using Terraform as it causes inconsistent behavior.
            dashboard_lists_removed: (Set of Number) The list of dashboard lists this dashboard should be removed from. Internal only.
            id: (String) The ID of this resource.
            url: (String) The URL of the dashboard.
        importStatements:
            - terraform import datadog_dashboard_json.my_service_dashboard sv7-gyh-kas
    datadog_dashboard_list:
        subCategory: ""
        description: Provides a Datadog dashboard_list resource. This can be used to create and manage Datadog Dashboard Lists and the individual dashboards within them.
        name: datadog_dashboard_list
        title: datadog_dashboard_list Resource - terraform-provider-datadog
        examples:
            - name: new_list
              manifest: |-
                {
                  "dash_item": [
                    {
                      "dash_id": "${datadog_dashboard.time.id}",
                      "type": "custom_timeboard"
                    },
                    {
                      "dash_id": "${datadog_dashboard.screen.id}",
                      "type": "custom_screenboard"
                    }
                  ],
                  "name": "Terraform Created List"
                }
              references:
                dash_item.dash_id: datadog_dashboard.screen.id
              dependencies:
                datadog_dashboard.screen: |-
                    {
                      "description": "Created using the Datadog provider in Terraform",
                      "is_read_only": false,
                      "layout_type": "free",
                      "title": "TF Test Free Layout Dashboard",
                      "widget": [
                        {
                          "event_stream_definition": [
                            {
                              "event_size": "l",
                              "live_span": "1h",
                              "query": "*",
                              "title": "Widget Title",
                              "title_align": "left",
                              "title_size": 16
                            }
                          ],
                          "widget_layout": [
                            {
                              "height": 43,
                              "width": 32,
                              "x": 5,
                              "y": 5
                            }
                          ]
                        }
                      ]
                    }
                datadog_dashboard.time: |-
                    {
                      "description": "Created using the Datadog provider in Terraform",
                      "is_read_only": true,
                      "layout_type": "ordered",
                      "title": "TF Test Layout Dashboard",
                      "widget": [
                        {
                          "alert_graph_definition": [
                            {
                              "alert_id": "1234",
                              "live_span": "1h",
                              "title": "Widget Title",
                              "viz_type": "timeseries"
                            }
                          ]
                        }
                      ]
                    }
        argumentDocs:
            dash_id: (String) The ID of the dashboard to add
            dash_item: (Block Set) A set of dashboard items that belong to this list (see below for nested schema)
            id: (String) The ID of this resource.
            name: (String) The name of the Dashboard List
            type: (String) The type of this dashboard. Valid values are custom_timeboard, custom_screenboard, integration_screenboard, integration_timeboard, host_timeboard.
        importStatements:
            - terraform import datadog_dashboard_list.new_list 123456
    datadog_downtime:
        subCategory: ""
        description: This resource is deprecated — use the datadog_downtime_schedule resource instead. Provides a Datadog downtime resource. This can be used to create and manage Datadog downtimes.
        name: datadog_downtime
        title: datadog_downtime Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "end": 1483365600,
                  "monitor_id": 12345,
                  "recurrence": [
                    {
                      "period": 1,
                      "type": "days"
                    }
                  ],
                  "scope": [
                    "*"
                  ],
                  "start": 1483308000
                }
            - name: foo
              manifest: |-
                {
                  "end": 1483365600,
                  "recurrence": [
                    {
                      "period": 1,
                      "type": "days"
                    }
                  ],
                  "scope": [
                    "*"
                  ],
                  "start": 1483308000
                }
        argumentDocs:
            active: (Boolean) When true indicates this downtime is being actively applied
            active_child_id: (Number) The id corresponding to the downtime object definition of the active child for the original parent recurring downtime. This field will only exist on recurring downtimes.
            disabled: (Boolean) When true indicates this downtime is not being applied
            end: (Number) Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
            end_date: (String) String representing date and time to end the downtime in RFC3339 format.
            id: (String) The ID of this resource.
            message: (String) An optional message to provide when creating the downtime, can include notification handles
            monitor_id: (Number) When specified, this downtime will only apply to this monitor
            monitor_tags: (Set of String) A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
            mute_first_recovery_notification: (Boolean) When true the first recovery notification during the downtime will be muted Defaults to false.
            period: (Number) How often to repeat as an integer. For example to repeat every 3 days, select a type of days and a period of 3.
            recurrence: '(Block List, Max: 1) Optional recurring schedule for this downtime (see below for nested schema)'
            rrule: (String) The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, use FREQ=MONTHLY;INTERVAL=1. Most common rrule options from the iCalendar Spec are supported. Attributes specifying the duration in RRULE are not supported (for example, DTSTART, DTEND, DURATION). Only applicable when type is rrule.
            scope: (List of String) specify the group scope to which this downtime applies. For everything use '*'
            start: (Number) Specify when this downtime should start. Accepts a Unix timestamp in UTC.
            start_date: (String) String representing date and time to start the downtime in RFC3339 format.
            timezone: (String) The timezone for the downtime. Follows IANA timezone database identifiers. Defaults to "UTC".
            type: (String) One of days, weeks, months, years, or rrule.
            until_date: (Number) The date at which the recurrence should end as a POSIX timestamp. until_occurrences and until_date are mutually exclusive.
            until_occurrences: (Number) How many times the downtime will be rescheduled. until_occurrences and until_date are mutually exclusive.
            week_days: '(List of String) A list of week days to repeat on. Choose from: Mon, Tue, Wed, Thu, Fri, Sat or Sun. Only applicable when type is weeks. First letter must be capitalized.'
        importStatements:
            - terraform import datadog_downtime.bytes_received_localhost 2081
    datadog_downtime_schedule:
        subCategory: ""
        description: Provides a Datadog DowntimeSchedule resource. This can be used to create and manage Datadog downtimes.
        name: datadog_downtime_schedule
        title: datadog_downtime_schedule Resource - terraform-provider-datadog
        examples:
            - name: downtime_schedule_example
              manifest: |-
                {
                  "display_timezone": "America/New_York",
                  "message": "Message about the downtime",
                  "monitor_identifier": [
                    {
                      "monitor_tags": [
                        "test:123",
                        "data:test"
                      ]
                    }
                  ],
                  "mute_first_recovery_notification": true,
                  "notify_end_states": [
                    "alert",
                    "warn"
                  ],
                  "notify_end_types": [
                    "canceled",
                    "expired"
                  ],
                  "recurring_schedule": [
                    {
                      "recurrence": [
                        {
                          "duration": "1h",
                          "rrule": "FREQ=DAILY;INTERVAL=1",
                          "start": "2050-01-02T03:04:05"
                        }
                      ],
                      "timezone": "America/New_York"
                    }
                  ],
                  "scope": "env:us9-prod7 AND team:test123"
                }
        argumentDocs:
            display_timezone: (String) The timezone in which to display the downtime's start and end times in Datadog applications. This is not used as an offset for scheduling.
            duration: (String) The length of the downtime. Must begin with an integer and end with one of 'm', 'h', d', or 'w'.
            end: (String) ISO-8601 Datetime to end the downtime. Must include a UTC offset of zero. If not provided, the downtime never ends.
            id: (String) The ID of this resource.
            message: (String) A message to include with notifications for this downtime. Email notifications can be sent to specific users by using the same @username notation as events.
            monitor_id: (Number) ID of the monitor to prevent notifications.
            monitor_identifier: (Block, Optional) (see below for nested schema)
            monitor_tags: (Set of String) A list of monitor tags. For example, tags that are applied directly to monitors, not tags that are used in monitor queries (which are filtered by the scope parameter), to which the downtime applies. The resulting downtime applies to monitors that match all provided monitor tags. Setting monitor_tags to [*] configures the downtime to mute all monitors for the given scope.
            mute_first_recovery_notification: (Boolean) If the first recovery notification during a downtime should be muted.
            notify_end_states: (Set of String) States that will trigger a monitor notification when the notify_end_types action occurs.
            notify_end_types: (Set of String) Actions that will trigger a monitor notification if the downtime is in the notify_end_types state.
            one_time_schedule: (Block, Optional) (see below for nested schema)
            recurrence: (Block List) (see below for nested schema)
            recurring_schedule: (Block, Optional) (see below for nested schema)
            rrule: '(String) The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, set the type to rrule and set the FREQ to MONTHLY and BYMONTHDAY to 1. Most common rrule options from the iCalendar Spec are supported.  Note: Attributes specifying the duration in RRULE are not supported (for example, DTSTART, DTEND, DURATION). More examples available in this downtime guide.'
            scope: (String) The scope to which the downtime applies. Must follow the common search syntax.
            start: (String) ISO-8601 Datetime to start the downtime. Must include a UTC offset of zero. If not provided, the downtime starts the moment it is created.
            timezone: (String) The timezone in which to schedule the downtime.
        importStatements:
            - terraform import datadog_downtime_schedule.new_list "00e000000-0000-1234-0000-000000000000"
    datadog_integration_aws:
        subCategory: ""
        description: Provides a Datadog - Amazon Web Services integration resource. This can be used to create and manage Datadog - Amazon Web Services integration.
        name: datadog_integration_aws
        title: datadog_integration_aws Resource - terraform-provider-datadog
        examples:
            - name: sandbox
              manifest: |-
                {
                  "account_id": "1234567890",
                  "account_specific_namespace_rules": {
                    "auto_scaling": false,
                    "opsworks": false
                  },
                  "excluded_regions": [
                    "us-east-1",
                    "us-west-2"
                  ],
                  "filter_tags": [
                    "key:value"
                  ],
                  "host_tags": [
                    "key:value",
                    "key2:value2"
                  ],
                  "role_name": "DatadogAWSIntegrationRole"
                }
        argumentDocs:
            access_key_id: (String) Your AWS access key ID. Only required if your AWS account is a GovCloud or China account.
            account_id: (String) Your AWS Account ID without dashes.
            account_specific_namespace_rules: (Map of Boolean) Enables or disables metric collection for specific AWS namespaces for this AWS account only. A list of namespaces can be found at the available namespace rules API endpoint.
            cspm_resource_collection_enabled: (String) Whether Datadog collects cloud security posture management resources from your AWS account. This includes additional resources not covered under the general resource_collection.
            excluded_regions: (Set of String) An array of AWS regions to exclude from metrics collection.
            extended_resource_collection_enabled: (String) Whether Datadog collects additional attributes and configuration information about the resources in your AWS account. Required for cspm_resource_collection_enabled.
            external_id: (String) AWS External ID. NOTE This provider will not be able to detect changes made to the external_id field from outside Terraform.
            filter_tags: (List of String) Array of EC2 tags (in the form key:value) defines a filter that Datadog uses when collecting metrics from EC2. Wildcards, such as ? (for single characters) and * (for multiple characters) can also be used. Only hosts that match one of the defined tags will be imported into Datadog. The rest will be ignored. Host matching a given tag can also be excluded by adding ! before the tag. e.x. env:production,instance-type:c1.*,!region:us-east-1.
            host_tags: (List of String) Array of tags (in the form key:value) to add to all hosts and metrics reporting through this integration.
            id: (String) The ID of this resource.
            metrics_collection_enabled: (String) Whether Datadog collects metrics for this AWS account.
            resource_collection_enabled: (String, Deprecated) Whether Datadog collects a standard set of resources from your AWS account. Deprecated. Deprecated in favor of extended_resource_collection_enabled.
            role_name: (String) Your Datadog role delegation name.
            secret_access_key: (String, Sensitive) Your AWS secret access key. Only required if your AWS account is a GovCloud or China account.
        importStatements:
            - |-
              # Amazon Web Services integrations can be imported using their account ID and role name separated with a colon (:), while the external_id should be passed by setting an environment variable called EXTERNAL_ID
              EXTERNAL_ID=${external_id} terraform import datadog_integration_aws.test ${account_id}:${role_name}
    datadog_integration_aws_event_bridge:
        subCategory: ""
        description: Provides a Datadog - Amazon Web Services integration EventBridge resource. This can be used to create and manage Event Sources for each Datadog integrated AWS account.
        name: datadog_integration_aws_event_bridge
        title: datadog_integration_aws_event_bridge Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "account_id": "123456789012",
                  "create_event_bus": true,
                  "event_generator_name": "app-alerts",
                  "region": "us-east-1"
                }
        argumentDocs:
            account_id: (String) Your AWS Account ID without dashes.
            create_event_bus: (Boolean) True if Datadog should create the event bus in addition to the event source. Requires the events:CreateEventBus permission. Defaults to true.
            event_generator_name: (String) The given part of the event source name, which is then combined with an assigned suffix to form the full name.
            id: (String) The ID of this resource.
            region: (String) The event source's AWS region.
        importStatements:
            - |-
              # Amazon Web Service EventBridge integrations are imported using the Event Source name as listed for an integrated AWS account in Datadog
              terraform import datadog_integration_aws_event_bridge.foo event-source-name-abc12345
    datadog_integration_aws_lambda_arn:
        subCategory: ""
        description: 'Provides a Datadog - Amazon Web Services integration Lambda ARN resource. This can be used to create and manage the log collection Lambdas for an account. Update operations are currently not supported with datadog API so any change forces a new resource. Note: If you are using AWS GovCloud or the AWS China* region, update the lambda_arn parameter for your environment. *All use of Datadog Services in (or in connection with environments within) mainland China is subject to the disclaimer published in the Restricted Service Locations section on our website.'
        name: datadog_integration_aws_lambda_arn
        title: datadog_integration_aws_lambda_arn Resource - terraform-provider-datadog
        examples:
            - name: main_collector
              manifest: |-
                {
                  "account_id": "1234567890",
                  "lambda_arn": "arn:aws:lambda:us-east-1:1234567890:function:datadog-forwarder-Forwarder"
                }
        argumentDocs:
            account_id: (String) Your AWS Account ID without dashes.
            id: (String) The ID of this resource.
            lambda_arn: (String) The ARN of the Datadog forwarder Lambda.
        importStatements:
            - |-
              # Amazon Web Services Lambda ARN integrations can be imported using their account_id and lambda_arn separated with a space (` `).
              terraform import datadog_integration_aws_lambda_arn.test "1234567890 arn:aws:lambda:us-east-1:1234567890:function:datadog-forwarder-Forwarder"
    datadog_integration_aws_log_collection:
        subCategory: ""
        description: Provides a Datadog - Amazon Web Services integration log collection resource. This can be used to manage which AWS services logs are collected from for an account.
        name: datadog_integration_aws_log_collection
        title: datadog_integration_aws_log_collection Resource - terraform-provider-datadog
        examples:
            - name: main
              manifest: |-
                {
                  "account_id": "1234567890",
                  "services": [
                    "lambda"
                  ]
                }
        argumentDocs:
            account_id: (String) Your AWS Account ID without dashes.
            id: (String) The ID of this resource.
            services: (List of String) A list of services to collect logs from. See the api docs for more details on which services are supported.
        importStatements:
            - |-
              # Amazon Web Services log collection integrations can be imported using the `account ID`.
              terraform import datadog_integration_aws_log_collection.test 1234567890
    datadog_integration_aws_tag_filter:
        subCategory: ""
        description: Provides a Datadog AWS tag filter resource. This can be used to create and manage Datadog AWS tag filters.
        name: datadog_integration_aws_tag_filter
        title: datadog_integration_aws_tag_filter Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "account_id": "123456789010",
                  "namespace": "sqs",
                  "tag_filter_str": "key:value"
                }
        argumentDocs:
            account_id: (String) Your AWS Account ID without dashes.
            id: (String) The ID of this resource.
            namespace: (String) The namespace associated with the tag filter entry. Valid values are elb, application_elb, sqs, rds, custom, network_elb, lambda.
            tag_filter_str: (String) The tag filter string.
        importStatements:
            - |-
              # Amazon Web Services log filter resource can be imported using their account ID and namespace separated with a colon (:).
              terraform import datadog_integration_aws_tag_filter.foo ${account_id}:${namespace}
    datadog_integration_azure:
        subCategory: ""
        description: Provides a Datadog - Microsoft Azure integration resource. This can be used to create and manage the integrations.
        name: datadog_integration_azure
        title: datadog_integration_azure Resource - terraform-provider-datadog
        examples:
            - name: sandbox
              manifest: |-
                {
                  "app_service_plan_filters": "examplefilter:true,example:another",
                  "automute": true,
                  "client_id": "\u003cazure_client_id\u003e",
                  "client_secret": "\u003cazure_client_secret_key\u003e",
                  "container_app_filters": "examplefilter:true,example:one_more",
                  "cspm_enabled": true,
                  "custom_metrics_enabled": false,
                  "host_filters": "examplefilter:true,example:true",
                  "tenant_name": "\u003cazure_tenant_name\u003e"
                }
        argumentDocs:
            app_service_plan_filters: (String) This comma-separated list of tags (in the form key:value,key:value) defines a filter that Datadog uses when collecting metrics from Azure App Service Plans. Only App Service Plans that match one of the defined tags are imported into Datadog. The rest, including the apps and functions running on them, are ignored. This also filters the metrics for any App or Function running on the App Service Plan(s). Defaults to "".
            automute: (Boolean) Silence monitors for expected Azure VM shutdowns. Defaults to false.
            client_id: (String) Your Azure web application ID.
            client_secret: (String, Sensitive) (Required for Initial Creation) Your Azure web application secret key.
            container_app_filters: (String) This comma-separated list of tags (in the form key:value,key:value) defines a filter that Datadog uses when collecting metrics from Azure Container Apps. Only Container Apps that match one of the defined tags are imported into Datadog. Defaults to "".
            cspm_enabled: |-
                (Boolean) When enabled, Datadog’s Cloud Security Management product scans resource configurations monitored by this app registration.
                Note: This requires resource_collection_enabled to be set to true. Defaults to false.
            custom_metrics_enabled: (Boolean) Enable custom metrics for your organization. Defaults to false.
            host_filters: (String) String of host tag(s) (in the form key:value,key:value) defines a filter that Datadog will use when collecting metrics from Azure. Limit the Azure instances that are pulled into Datadog by using tags. Only hosts that match one of the defined tags are imported into Datadog. e.x. env:production,deploymentgroup:red Defaults to "".
            id: (String) The ID of this resource.
            resource_collection_enabled: (Boolean) When enabled, Datadog collects metadata and configuration info from cloud resources (such as compute instances, databases, and load balancers) monitored by this app registration.
            tenant_name: (String) Your Azure Active Directory ID.
        importStatements:
            - |-
              # Microsoft Azure integrations can be imported using their `tenant name` and `client` id separated with a colon (`:`).
              terraform import datadog_integration_azure.sandbox ${tenant_name}:${client_id}
    datadog_integration_cloudflare_account:
        subCategory: ""
        description: Provides a Datadog IntegrationCloudflareAccount resource. This can be used to create and manage Datadog integrationcloudflareaccount.
        name: datadog_integration_cloudflare_account
        title: datadog_integration_cloudflare_account Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "api_key": "12345678910abc",
                  "email": "test-email@example.com",
                  "name": "test-name"
                }
        argumentDocs:
            api_key: (String, Sensitive) The API key (or token) for the Cloudflare account.
            email: (String) The email associated with the Cloudflare account. If an API key is provided (and not a token), this field is also required.
            id: (String) The ID of this resource.
            name: (String) The name of the Cloudflare account.
        importStatements:
            - terraform import datadog_integration_cloudflare_account.new_list "<ID>"
    datadog_integration_confluent_account:
        subCategory: ""
        description: Provides a Datadog IntegrationConfluentAccount resource. This can be used to create and manage Datadog integrationconfluentaccount.
        name: datadog_integration_confluent_account
        title: datadog_integration_confluent_account Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "api_key": "TESTAPIKEY123",
                  "api_secret": "test-api-secret-123",
                  "tags": [
                    "mytag",
                    "mytag2:myvalue"
                  ]
                }
        argumentDocs:
            api_key: (String) The API key associated with your Confluent account.
            api_secret: (String, Sensitive) The API secret associated with your Confluent account.
            id: (String) The ID of this resource.
            tags: (Set of String) A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
        importStatements:
            - |-
              # Confluent account ID can be retrieved using the ListConfluentAccounts endpoint
              # https://docs.datadoghq.com/api/latest/confluent-cloud/#list-confluent-accounts

              terraform import datadog_integration_confluent_account.new_list "<ID>"
    datadog_integration_confluent_resource:
        subCategory: ""
        description: Provides a Datadog IntegrationConfluentResource resource. This can be used to create and manage Datadog integrationconfluentresource.
        name: datadog_integration_confluent_resource
        title: datadog_integration_confluent_resource Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "account_id": "${datadog_integration_confluent_account.foo.id}",
                  "resource_id": "123456",
                  "resource_type": "kafka",
                  "tags": [
                    "mytag",
                    "mytag2:myvalue"
                  ]
                }
              references:
                account_id: datadog_integration_confluent_account.foo.id
              dependencies:
                datadog_integration_confluent_account.foo: |-
                    {
                      "api_key": "TESTAPIKEY123",
                      "api_secret": "test-api-secret-123",
                      "tags": [
                        "mytag",
                        "mytag2:myvalue"
                      ]
                    }
        argumentDocs:
            account_id: (String) Confluent Account ID.
            enable_custom_metrics: (Boolean) Enable the custom.consumer_lag_offset metric, which contains extra metric tags. Defaults to false.
            id: (String) The ID of this resource.
            resource_id: (String) The ID associated with a Confluent resource.
            resource_type: (String) The resource type of the Resource. Can be kafka, connector, ksql, or schema_registry.
            tags: (Set of String) A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
        importStatements:
            - terraform import datadog_integration_confluent_resource.new_list "confluent_account_id:confluent_resource_id"
    datadog_integration_fastly_account:
        subCategory: ""
        description: Provides a Datadog IntegrationFastlyAccount resource. This can be used to create and manage Datadog integrationfastlyaccount.
        name: datadog_integration_fastly_account
        title: datadog_integration_fastly_account Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "api_key": "ABCDEFG123",
                  "name": "test-name"
                }
        argumentDocs:
            api_key: (String) The API key for the Fastly account.
            id: (String) The ID of this resource.
            name: (String) The name of the Fastly account.
        importStatements:
            - terraform import datadog_integration_fastly_account.new_list "a8f5f167f44f4964e6c998dee827110c"
    datadog_integration_fastly_service:
        subCategory: ""
        description: Provides a Datadog IntegrationFastlyService resource. This can be used to create and manage Datadog integrationfastlyservice.
        name: datadog_integration_fastly_service
        title: datadog_integration_fastly_service Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "account_id": "${datadog_integration_fastly_account.foo.id}",
                  "service_id": "my-service-id",
                  "tags": [
                    "mytag",
                    "mytag2:myvalue"
                  ]
                }
              references:
                account_id: datadog_integration_fastly_account.foo.id
              dependencies:
                datadog_integration_fastly_account.foo: |-
                    {
                      "api_key": "ABCDEFG123",
                      "name": "test-name"
                    }
        argumentDocs:
            account_id: (String) Fastly Account id.
            id: (String) The ID of this resource.
            service_id: (String) The ID of the Fastly service.
            tags: (Set of String) A list of tags for the Fastly service.
        importStatements:
            - terraform import datadog_integration_fastly_service.new_list "account-id:service-id"
    datadog_integration_gcp:
        subCategory: ""
        description: This resource is deprecated—use the datadog_integration_gcp_sts resource instead. Provides a Datadog - Google Cloud Platform integration resource. This can be used to create and manage Datadog - Google Cloud Platform integration.
        name: datadog_integration_gcp
        title: datadog_integration_gcp Resource - terraform-provider-datadog
        examples:
            - name: awesome_gcp_project_integration
              manifest: |-
                {
                  "client_email": "awesome-service-account@awesome-project-id.iam.gserviceaccount.com",
                  "client_id": "123456789012345678901",
                  "host_filters": "foo:bar,buzz:lightyear",
                  "private_key": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n",
                  "private_key_id": "1234567890123456789012345678901234567890",
                  "project_id": "awesome-project-id"
                }
              dependencies:
                google_service_account.datadog: |-
                    {
                      "account_id": "datadog-integration",
                      "display_name": "Datadog Integration"
                    }
                google_service_account_key.datadog: |-
                    {
                      "service_account_id": "${google_service_account.datadog.name}"
                    }
            - name: awesome_gcp_project_integration
              manifest: |-
                {
                  "client_email": "${jsondecode(base64decode(google_service_account_key.datadog.private_key))[\"client_email\"]}",
                  "client_id": "${jsondecode(base64decode(google_service_account_key.datadog.private_key))[\"client_id\"]}",
                  "private_key": "${jsondecode(base64decode(google_service_account_key.datadog.private_key))[\"private_key\"]}",
                  "private_key_id": "${jsondecode(base64decode(google_service_account_key.datadog.private_key))[\"private_key_id\"]}",
                  "project_id": "${jsondecode(base64decode(google_service_account_key.datadog.private_key))[\"project_id\"]}"
                }
              dependencies:
                google_service_account.datadog: |-
                    {
                      "account_id": "datadog-integration",
                      "display_name": "Datadog Integration"
                    }
                google_service_account_key.datadog: |-
                    {
                      "service_account_id": "${google_service_account.datadog.name}"
                    }
        argumentDocs:
            automute: (Boolean) Silence monitors for expected GCE instance shutdowns. Defaults to false.
            client_email: (String) Your email found in your JSON service account key.
            client_id: (String) Your ID found in your JSON service account key.
            cspm_resource_collection_enabled: (Boolean) Whether Datadog collects cloud security posture management resources from your GCP project. If enabled, requires resource_collection_enabled to also be enabled. Defaults to false.
            host_filters: (String) Limit the GCE instances that are pulled into Datadog by using tags. Only hosts that match one of the defined tags are imported into Datadog. Defaults to "".
            id: (String) The ID of this resource.
            is_security_command_center_enabled: '(Boolean) When enabled, Datadog will attempt to collect Security Command Center Findings. Note: This requires additional permissions on the service account. Defaults to false.'
            private_key: (String, Sensitive) Your private key name found in your JSON service account key.
            private_key_id: (String) Your private key ID found in your JSON service account key.
            project_id: (String) Your Google Cloud project ID found in your JSON service account key.
            resource_collection_enabled: (Boolean) When enabled, Datadog scans for all resources in your GCP environment.
        importStatements:
            - |-
              # Google Cloud Platform integrations can be imported using their project ID, e.g.
              terraform import datadog_integration_gcp.awesome_gcp_project_integration project_id
    datadog_integration_gcp_sts:
        subCategory: ""
        description: Provides a Datadog Integration GCP Sts resource. This can be used to create and manage Datadog - Google Cloud Platform integration.
        name: datadog_integration_gcp_sts
        title: datadog_integration_gcp_sts Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "automute": true,
                  "client_email": "${google_service_account.datadog_integration.email}",
                  "host_filters": [
                    "filter_one",
                    "filter_two"
                  ],
                  "is_cspm_enabled": false
                }
              references:
                client_email: google_service_account.datadog_integration.email
              dependencies:
                google_service_account.datadog_integration: |-
                    {
                      "account_id": "datadogintegration",
                      "display_name": "Datadog Integration",
                      "project": "gcp-project"
                    }
                google_service_account_iam_member.sa_iam: |-
                    {
                      "member": "${format(\"serviceAccount:%s\", datadog_integration_gcp_sts.foo.delegate_account_email)}",
                      "role": "roles/iam.serviceAccountTokenCreator",
                      "service_account_id": "${google_service_account.datadog_integration.name}"
                    }
        argumentDocs:
            account_tags: (Set of String) Tags to be associated with GCP metrics and service checks from your account.
            automute: (Boolean) Silence monitors for expected GCE instance shutdowns.
            client_email: (String) Your service account email address.
            delegate_account_email: (String) Datadog's STS Delegate Email.
            host_filters: (Set of String) Your Host Filters.
            id: (String) The ID of this resource.
            is_cspm_enabled: (Boolean) Whether Datadog collects cloud security posture management resources from your GCP project. If enabled, requires resource_collection_enabled to also be enabled.
            is_security_command_center_enabled: '(Boolean) When enabled, Datadog will attempt to collect Security Command Center Findings. Note: This requires additional permissions on the service account. Defaults to false.'
            resource_collection_enabled: (Boolean) When enabled, Datadog scans for all resources in your GCP environment.
        importStatements:
            - terraform import datadog_integration_gcp_sts.foo "9c303af3-b963-45e0-8c8f-469b9e1a213f"
    datadog_integration_opsgenie_service_object:
        subCategory: ""
        description: Resource for interacting with Datadog Opsgenie Service API.
        name: datadog_integration_opsgenie_service_object
        title: datadog_integration_opsgenie_service_object Resource - terraform-provider-datadog
        examples:
            - name: fake_service_name
              manifest: |-
                {
                  "name": "fake_service_name",
                  "opsgenie_api_key": "00000000-0000-0000-0000-000000000000",
                  "region": "us"
                }
            - name: fake_service_name_2
              manifest: |-
                {
                  "name": "fake_service_name_2",
                  "opsgenie_api_key": "11111111-1111-1111-1111-111111111111",
                  "region": "eu"
                }
        argumentDocs:
            custom_url: (String) The custom url for a custom region.
            id: (String) The ID of this resource.
            name: (String) The name for the Opsgenie service.
            opsgenie_api_key: '(String, Sensitive) The Opsgenie API key for the Opsgenie service. Note: Since the Datadog API never returns Opsgenie API keys, it is impossible to detect drifts. The best way to solve a drift is to manually mark the Service Object resource with terraform taint to have it destroyed and recreated.'
            region: (String) The region for the Opsgenie service. Valid values are us, eu, custom.
        importStatements: []
    datadog_integration_pagerduty:
        subCategory: ""
        description: Provides a Datadog - PagerDuty resource. This can be used to create and manage Datadog - PagerDuty integration. See also PagerDuty Integration Guide https://www.pagerduty.com/docs/guides/datadog-integration-guide/.
        name: datadog_integration_pagerduty
        title: datadog_integration_pagerduty Resource - terraform-provider-datadog
        examples:
            - name: pd
              manifest: |-
                {
                  "api_token": "38457822378273432587234242874",
                  "schedules": [
                    "https://ddog.pagerduty.com/schedules/X123VF",
                    "https://ddog.pagerduty.com/schedules/X321XX"
                  ],
                  "subdomain": "ddog"
                }
              dependencies:
                datadog_integration_pagerduty_service_object.testing_bar: |-
                    {
                      "depends_on": [
                        "datadog_integration_pagerduty.pd"
                      ],
                      "service_key": "54321098765432109876",
                      "service_name": "testing_bar"
                    }
                datadog_integration_pagerduty_service_object.testing_foo: |-
                    {
                      "depends_on": [
                        "datadog_integration_pagerduty.pd"
                      ],
                      "service_key": "9876543210123456789",
                      "service_name": "testing_foo"
                    }
        argumentDocs:
            api_token: (String, Sensitive) Your PagerDuty API token.
            id: (String) The ID of this resource.
            schedules: (List of String) Array of your schedule URLs.
            subdomain: (String) Your PagerDuty account’s personalized subdomain name.
        importStatements: []
    datadog_integration_pagerduty_service_object:
        subCategory: ""
        description: Provides access to individual Service Objects of Datadog - PagerDuty integrations. Note that the Datadog - PagerDuty integration must be activated in the Datadog UI in order for this resource to be usable.
        name: datadog_integration_pagerduty_service_object
        title: datadog_integration_pagerduty_service_object Resource - terraform-provider-datadog
        examples:
            - name: testing_foo
              manifest: |-
                {
                  "service_key": "9876543210123456789",
                  "service_name": "testing_foo"
                }
            - name: testing_bar
              manifest: |-
                {
                  "service_key": "54321098765432109876",
                  "service_name": "testing_bar"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            service_key: '(String, Sensitive) Your Service name associated service key in PagerDuty. This key may also be referred to as an Integration Key or Routing Key in the Pagerduty Integration documentation, UI, and within the Pagerduty Provider for Terraform Note: Since the Datadog API never returns service keys, it is impossible to detect drifts. The best way to solve a drift is to manually mark the Service Object resource with terraform taint to have it destroyed and recreated.'
            service_name: (String) Your Service name in PagerDuty.
        importStatements:
            - |-
              # Pagerduty service object can be imported using the service_name, while the service_key should be passed by setting the environment variable SERVICE_KEY
              SERVICE_KEY=${service_key} terraform import datadog_integration_pagerduty_service_object.foo ${service_name}
    datadog_integration_slack_channel:
        subCategory: ""
        description: Resource for interacting with the Datadog Slack channel API
        name: datadog_integration_slack_channel
        title: datadog_integration_slack_channel Resource - terraform-provider-datadog
        examples:
            - name: test_channel
              manifest: |-
                {
                  "account_name": "foo",
                  "channel_name": "#test_channel",
                  "display": [
                    {
                      "message": true,
                      "notified": false,
                      "snapshot": false,
                      "tags": true
                    }
                  ]
                }
        argumentDocs:
            account_name: (String) Slack account name.
            channel_name: (String) Slack channel name.
            display: '(Block List, Min: 1, Max: 1) Configuration options for what is shown in an alert event message. (see below for nested schema)'
            id: (String) The ID of this resource.
            message: (Boolean) Show the main body of the alert event. Defaults to true.
            notified: (Boolean) Show the list of @-handles in the alert event. Defaults to true.
            snapshot: (Boolean) Show the alert event's snapshot image. Defaults to true.
            tags: (Boolean) Show the scopes on which the monitor alerted. Defaults to true.
        importStatements:
            - |-
              # Slack channel integrations can be imported using their account_name and channel_name separated with a colon (`:`).
              terraform import datadog_integration_slack_channel.test_channel "foo:#test_channel"
    datadog_ip_allowlist:
        subCategory: ""
        description: Provides the Datadog IP allowlist resource. This can be used to manage the Datadog IP allowlist
        name: datadog_ip_allowlist
        title: datadog_ip_allowlist Resource - terraform-provider-datadog
        examples:
            - name: example
              manifest: |-
                {
                  "enabled": false,
                  "entry": [
                    {
                      "cidr_block": "127.0.0.0/32",
                      "note": "1st Example IP Range"
                    },
                    {
                      "cidr_block": "192.0.2.0/24",
                      "note": "2nd Example IP Range"
                    }
                  ]
                }
        argumentDocs:
            cidr_block: (String) IP address or range of addresses.
            enabled: (Boolean) Whether the IP Allowlist is enabled.
            entry: (Block Set) Set of objects containing an IP address or range of IP addresses in the allowlist and an accompanying note. (see below for nested schema)
            id: (String) The ID of this resource.
            note: (String) Note accompanying IP address.
        importStatements: []
    datadog_logs_archive:
        subCategory: ""
        description: Provides a Datadog Logs Archive API resource, which is used to create and manage Datadog logs archives.
        name: datadog_logs_archive
        title: datadog_logs_archive Resource - terraform-provider-datadog
        examples:
            - name: my_s3_archive
              manifest: |-
                {
                  "name": "my s3 archive",
                  "query": "service:myservice",
                  "s3_archive": [
                    {
                      "account_id": "001234567888",
                      "bucket": "my-bucket",
                      "path": "/path/foo",
                      "role_name": "my-role-name"
                    }
                  ]
                }
        argumentDocs:
            account_id: (String) Your AWS account id.
            azure_archive: '(Block List, Max: 1) Definition of an azure archive. (see below for nested schema)'
            bucket: (String) Name of your GCS bucket.
            client_email: (String) Your client email.
            client_id: (String) Your client id.
            container: (String) The container where the archive is stored.
            gcs_archive: '(Block List, Max: 1) Definition of a GCS archive. (see below for nested schema)'
            id: (String) The ID of this resource.
            include_tags: (Boolean) To store the tags in the archive, set the value true. If it is set to false, the tags will be dropped when the logs are sent to the archive. Defaults to false.
            name: (String) Your archive name.
            path: (String) The path where the archive is stored.
            project_id: (String) Your project id.
            query: (String) The archive query/filter. Logs matching this query are included in the archive.
            rehydration_max_scan_size_in_gb: (Number) To limit the rehydration scan size for the archive, set a value in GB.
            rehydration_tags: (List of String) An array of tags to add to rehydrated logs from an archive.
            role_name: (String) Your AWS role name
            s3_archive: '(Block List, Max: 1) Definition of an s3 archive. (see below for nested schema)'
            storage_account: (String) The associated storage account.
            tenant_id: (String) Your tenant id.
        importStatements:
            - terraform import datadog_logs_archive.my_s3_archive 1Aabc2_dfQPLnXy3HlfK4hi
    datadog_logs_archive_order:
        subCategory: ""
        description: Provides a Datadog Logs Archive API https://docs.datadoghq.com/api/v2/logs-archives/ resource, which is used to manage Datadog log archives order.
        name: datadog_logs_archive_order
        title: datadog_logs_archive_order Resource - terraform-provider-datadog
        examples:
            - name: sample_archive_order
              manifest: |-
                {
                  "archive_ids": [
                    "${datadog_logs_archive.sample_archive_1.id}",
                    "${datadog_logs_archive.sample_archive_2.id}"
                  ]
                }
        argumentDocs:
            archive_ids: (List of String) The archive IDs list. The order of archive IDs in this attribute defines the overall archive order for logs. If archive_ids is empty or not specified, it will import the actual archive order, and create the resource. Otherwise, it will try to update the order.
            id: (String) The ID of this resource.
        importStatements:
            - |-
              # There must be at most one datadog_logs_archive_order resource. You can import the datadog_logs_archive_order or create an archive order.
              terraform import <datadog_logs_archive_order.name> archiveOrderID
    datadog_logs_custom_destination:
        subCategory: ""
        description: Provides a Datadog Logs Custom Destination API resource, which is used to create and manage Datadog log forwarding.
        name: datadog_logs_custom_destination
        title: datadog_logs_custom_destination Resource - terraform-provider-datadog
        examples:
            - name: sample_destination
              manifest: |-
                {
                  "enabled": true,
                  "http_destination": [
                    {
                      "basic_auth": [
                        {
                          "password": "my-password",
                          "username": "my-username"
                        }
                      ],
                      "endpoint": "https://example.org"
                    }
                  ],
                  "name": "sample destination",
                  "query": "service:my-service"
                }
        argumentDocs:
            access_token: (String, Sensitive) Access token of the Splunk HTTP Event Collector. This field is not returned by the API.
            basic_auth: (Block List) Basic access authentication. (see below for nested schema)
            custom_header_auth: (Block List) Custom header access authentication. (see below for nested schema)
            elasticsearch_destination: (Block List) The Elasticsearch destination. (see below for nested schema)
            enabled: (Boolean) Whether logs matching this custom destination should be forwarded or not.
            endpoint: (String) The destination for which logs will be forwarded to. Must have HTTPS scheme. Forwarding back to Datadog is not allowed.
            forward_tags: (Boolean) Whether tags from the forwarded logs should be forwarded or not.
            forward_tags_restriction_list: |-
                (List of String) List of tag keys to be filtered.
                An empty list represents no restriction is in place and either all or no tags will be
                forwarded depending on forward_tags_restriction_list_type parameter.
            forward_tags_restriction_list_type: |-
                (String) How the forward_tags_restriction_list parameter should be interpreted.
                If ALLOW_LIST, then only tags whose keys on the forwarded logs match the ones on the restriction list
                are forwarded.
                BLOCK_LIST works the opposite way. It does not forward the tags matching the ones on the list. Valid values are ALLOW_LIST, BLOCK_LIST.
            header_name: (String) The header name of the authentication.
            header_value: (String, Sensitive) The header value of the authentication. This field is not returned by the API.
            http_destination: (Block List) The HTTP destination. (see below for nested schema)
            id: (String) The ID of this resource.
            index_name: (String) Name of the Elasticsearch index (must follow Elasticsearch's criteria).
            index_rotation: |-
                (String) Date pattern with US locale and UTC timezone to be appended to the index name after adding '-'
                (that is, '${index_name}-${indexPattern}').
                You can customize the index rotation naming pattern by choosing one of these options:
                - Hourly: 'yyyy-MM-dd-HH' (as an example, it would render: '2022-10-19-09')
                - Daily: 'yyyy-MM-dd' (as an example, it would render: '2022-10-19')
                - Weekly: 'yyyy-'W'ww' (as an example, it would render: '2022-W42')
                - Monthly: 'yyyy-MM' (as an example, it would render: '2022-10')
                If this field is missing or is blank, it means that the index name will always be the same
                (that is, no rotation).
            name: (String) The custom destination name.
            password: (String, Sensitive) The password of the authentication. This field is not returned by the API.
            query: (String) The custom destination query filter. Logs matching this query are forwarded to the destination.
            splunk_destination: (Block List) The Splunk HTTP Event Collector (HEC) destination. (see below for nested schema)
            username: (String, Sensitive) The username of the authentication. This field is not returned by the API.
        importStatements:
            - |-
              # Custom destinations can be imported using the destination ID. Caution: auth credentials can not be imported.
              terraform import datadog_logs_custom_destination.sample_destination "destination-id"
    datadog_logs_custom_pipeline:
        subCategory: ""
        description: 'Provides a Datadog Logs Pipeline API https://docs.datadoghq.com/api/v1/logs-pipelines/ resource, which is used to create and manage Datadog logs custom pipelines. Each datadog_logs_custom_pipeline resource defines a complete pipeline. The order of the pipelines is maintained in a different resource: datadog_logs_pipeline_order. When creating a new pipeline, you need to explicitly add this pipeline to the datadog_logs_pipeline_order resource to track the pipeline. Similarly, when a pipeline needs to be destroyed, remove its references from the datadog_logs_pipeline_order resource.'
        name: datadog_logs_custom_pipeline
        title: datadog_logs_custom_pipeline Resource - terraform-provider-datadog
        examples:
            - name: sample_pipeline
              manifest: |-
                {
                  "filter": [
                    {
                      "query": "source:foo"
                    }
                  ],
                  "is_enabled": true,
                  "name": "sample pipeline",
                  "processor": [
                    {
                      "arithmetic_processor": [
                        {
                          "expression": "(time1 - time2)*1000",
                          "is_enabled": true,
                          "is_replace_missing": true,
                          "name": "sample arithmetic processor",
                          "target": "my_arithmetic"
                        }
                      ]
                    },
                    {
                      "attribute_remapper": [
                        {
                          "is_enabled": true,
                          "name": "sample attribute processor",
                          "override_on_conflict": false,
                          "preserve_source": true,
                          "source_type": "tag",
                          "sources": [
                            "db.instance"
                          ],
                          "target": "db",
                          "target_format": "string",
                          "target_type": "attribute"
                        }
                      ]
                    },
                    {
                      "category_processor": [
                        {
                          "category": [
                            {
                              "filter": [
                                {
                                  "query": "@severity: \".\""
                                }
                              ],
                              "name": "debug"
                            },
                            {
                              "filter": [
                                {
                                  "query": "@severity: \"-\""
                                }
                              ],
                              "name": "verbose"
                            }
                          ],
                          "is_enabled": true,
                          "name": "sample category processor",
                          "target": "foo.severity"
                        }
                      ]
                    },
                    {
                      "date_remapper": [
                        {
                          "is_enabled": true,
                          "name": "sample date remapper",
                          "sources": [
                            "_timestamp",
                            "published_date"
                          ]
                        }
                      ]
                    },
                    {
                      "geo_ip_parser": [
                        {
                          "is_enabled": true,
                          "name": "sample geo ip parser",
                          "sources": [
                            "network.client.ip"
                          ],
                          "target": "network.client.geoip"
                        }
                      ]
                    },
                    {
                      "grok_parser": [
                        {
                          "grok": [
                            {
                              "match_rules": "Rule %{word:my_word2} %{number:my_float2}",
                              "support_rules": ""
                            }
                          ],
                          "is_enabled": true,
                          "name": "sample grok parser",
                          "samples": [
                            "sample log 1"
                          ],
                          "source": "message"
                        }
                      ]
                    },
                    {
                      "lookup_processor": [
                        {
                          "default_lookup": "unknown service",
                          "is_enabled": true,
                          "lookup_table": [
                            "1,my service"
                          ],
                          "name": "sample lookup processor",
                          "source": "service_id",
                          "target": "service_name"
                        }
                      ]
                    },
                    {
                      "message_remapper": [
                        {
                          "is_enabled": true,
                          "name": "sample message remapper",
                          "sources": [
                            "msg"
                          ]
                        }
                      ]
                    },
                    {
                      "pipeline": [
                        {
                          "filter": [
                            {
                              "query": "source:foo"
                            }
                          ],
                          "is_enabled": true,
                          "name": "nested pipeline",
                          "processor": [
                            {
                              "url_parser": [
                                {
                                  "name": "sample url parser",
                                  "normalize_ending_slashes": true,
                                  "sources": [
                                    "url",
                                    "extra"
                                  ],
                                  "target": "http_url"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "service_remapper": [
                        {
                          "is_enabled": true,
                          "name": "sample service remapper",
                          "sources": [
                            "service"
                          ]
                        }
                      ]
                    },
                    {
                      "status_remapper": [
                        {
                          "is_enabled": true,
                          "name": "sample status remapper",
                          "sources": [
                            "info",
                            "trace"
                          ]
                        }
                      ]
                    },
                    {
                      "string_builder_processor": [
                        {
                          "is_enabled": true,
                          "is_replace_missing": false,
                          "name": "sample string builder processor",
                          "target": "user_activity",
                          "template": "%{user.name} logged in at %{timestamp}"
                        }
                      ]
                    },
                    {
                      "trace_id_remapper": [
                        {
                          "is_enabled": true,
                          "name": "sample trace id remapper",
                          "sources": [
                            "dd.trace_id"
                          ]
                        }
                      ]
                    },
                    {
                      "user_agent_parser": [
                        {
                          "is_enabled": true,
                          "is_encoded": false,
                          "name": "sample user agent parser",
                          "sources": [
                            "user",
                            "agent"
                          ],
                          "target": "http_agent"
                        }
                      ]
                    }
                  ]
                }
        argumentDocs:
            arithmetic_processor: '(Block List, Max: 1) Arithmetic Processor. More information can be found in the official docs (see below for nested schema)'
            attribute_remapper: '(Block List, Max: 1) Attribute Remapper Processor. More information can be found in the official docs (see below for nested schema)'
            category: '(Block List, Min: 1) List of filters to match or exclude a log with their corresponding name to assign a custom value to the log. (see below for nested schema)'
            category_processor: '(Block List, Max: 1) Category Processor. More information can be found in the official docs (see below for nested schema)'
            date_remapper: '(Block List, Max: 1) Date Remapper Processor. More information can be found in the official docs (see below for nested schema)'
            default_lookup: (String) Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
            expression: (String) Arithmetic operation between one or more log attributes.
            filter: '(Block List, Min: 1) (see below for nested schema)'
            geo_ip_parser: '(Block List, Max: 1) Date GeoIP Processor. More information can be found in the official docs (see below for nested schema)'
            grok: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            grok_parser: '(Block List, Max: 1) Grok Processor. More information can be found in the official docs (see below for nested schema)'
            id: (String) The ID of this resource.
            is_enabled: (Boolean)
            is_encoded: (Boolean) If the source attribute is URL encoded or not.
            is_replace_missing: (Boolean) If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
            lookup_enrichment_table: (String) Name of the Reference Table for the source attribute and their associated target attribute values.
            lookup_processor: '(Block List, Max: 1) Lookup Processor. More information can be found in the official docs (see below for nested schema)'
            lookup_table: (List of String) List of entries of the lookup table using key,value format.
            match_rules: (String) Match rules for your grok parser.
            message_remapper: '(Block List, Max: 1) Message Remapper Processor. More information can be found in the official docs (see below for nested schema)'
            name: (String)
            normalize_ending_slashes: (Boolean) Normalize the ending slashes or not.
            override_on_conflict: (Boolean) Override the target element if already set.
            pipeline: '(Block List, Max: 1) (see below for nested schema)'
            preserve_source: (Boolean) Remove or preserve the remapped source element.
            processor: (Block List) (see below for nested schema)
            query: (String) Filter criteria of the category.
            reference_table_lookup_processor: '(Block List, Max: 1) Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the official docs (see below for nested schema)'
            samples: (List of String) List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
            service_remapper: '(Block List, Max: 1) Service Remapper Processor. More information can be found in the official docs (see below for nested schema)'
            source: (String) Name of the log attribute to parse.
            source_type: (String) Defines where the sources are from (log attribute or tag).
            sources: (List of String) List of source attributes or tags.
            status_remapper: '(Block List, Max: 1) Status Remapper Processor. More information can be found in the official docs (see below for nested schema)'
            string_builder_processor: '(Block List, Max: 1) String Builder Processor. More information can be found in the official docs (see below for nested schema)'
            support_rules: (String) Support rules for your grok parser.
            target: (String) Name of the attribute that contains the result of the arithmetic operation.
            target_format: (String) If the target_type of the remapper is attribute, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. string, integer, or double are the possible types. If the target_type is tag, this parameter may not be specified.
            target_type: (String) Defines if the target is a log attribute or tag.
            template: (String) The formula with one or more attributes and raw text.
            trace_id_remapper: '(Block List, Max: 1) Trace ID Remapper Processor. More information can be found in the official docs (see below for nested schema)'
            url_parser: '(Block List, Max: 1) URL Parser Processor. More information can be found in the official docs (see below for nested schema)'
            user_agent_parser: '(Block List, Max: 1) User-Agent Parser Processor. More information can be found in the official docs (see below for nested schema)'
        importStatements:
            - |-
              # To find the pipeline ID, click the "edit" button in the UI to open the pipeline details.
              # The pipeline ID is the last part of the URL.
              terraform import <resource.name> <pipelineID>
    datadog_logs_index:
        subCategory: ""
        description: 'Provides a Datadog Logs Index API resource. This can be used to create and manage Datadog logs indexes.Note: It is not possible to delete logs indexes through Terraform, so an index remains in your account after the resource is removed from your terraform config. Reach out to support to delete a logs index.'
        name: datadog_logs_index
        title: datadog_logs_index Resource - terraform-provider-datadog
        examples:
            - name: sample_index
              manifest: |-
                {
                  "daily_limit": 200000,
                  "daily_limit_reset": [
                    {
                      "reset_time": "14:00",
                      "reset_utc_offset": "+02:00"
                    }
                  ],
                  "daily_limit_warning_threshold_percentage": 50,
                  "exclusion_filter": [
                    {
                      "filter": [
                        {
                          "query": "app:coredns",
                          "sample_rate": 0.97
                        }
                      ],
                      "is_enabled": true,
                      "name": "Filter coredns logs"
                    },
                    {
                      "filter": [
                        {
                          "query": "service:kube_apiserver",
                          "sample_rate": 1
                        }
                      ],
                      "is_enabled": true,
                      "name": "Kubernetes apiserver"
                    }
                  ],
                  "filter": [
                    {
                      "query": "*"
                    }
                  ],
                  "name": "your index",
                  "retention_days": 7
                }
        argumentDocs:
            daily_limit: (Number) The number of log events you can send in this index per day before you are rate-limited.
            daily_limit_reset: '(Block List, Max: 1) Object containing options to override the default daily limit reset time. (see below for nested schema)'
            daily_limit_warning_threshold_percentage: (Number) A percentage threshold of the daily quota at which a Datadog warning event is generated.
            disable_daily_limit: (Boolean) If true, sets the daily_limit value to null and the index is not limited on a daily basis (any specified daily_limit value in the request is ignored). If false or omitted, the index's current daily_limit is maintained.
            exclusion_filter: (Block List) List of exclusion filters. (see below for nested schema)
            filter: '(Block List, Min: 1, Max: 1) Logs filter (see below for nested schema)'
            id: (String) The ID of this resource.
            is_enabled: (Boolean) A boolean stating if the exclusion is active or not.
            name: (String) The name of the index. Index names cannot be modified after creation. If this value is changed, a new index will be created.
            query: (String) Logs filter criteria. Only logs matching this filter criteria are considered for this index.
            reset_time: (String) String in HH:00 format representing the time of day the daily limit should be reset. The hours must be between 00 and 23 (inclusive).
            reset_utc_offset: (String) String in (-|+)HH:00 format representing the UTC offset to apply to the given reset time. The hours must be between -12 and +14 (inclusive).
            retention_days: (Number) The number of days before logs are deleted from this index.
            sample_rate: (Number) The fraction of logs excluded by the exclusion filter, when active.
        importStatements:
            - terraform import <datadog_logs_index.name> <indexName>
    datadog_logs_index_order:
        subCategory: ""
        description: Provides a Datadog Logs Index API resource. This can be used to manage the order of Datadog logs indexes.
        name: datadog_logs_index_order
        title: datadog_logs_index_order Resource - terraform-provider-datadog
        examples:
            - name: sample_index_order
              manifest: |-
                {
                  "indexes": [
                    "${datadog_logs_index.sample_index.id}"
                  ],
                  "name": "sample_index_order"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            indexes: (List of String) The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
            name: (String) The unique name of the index order resource.
        importStatements:
            - |-
              # The Datadog Terraform Provider does not support the creation and deletion of index orders. There must be at most one `datadog_logs_index_order` resource
              # `<name>` can be whatever you specify in your code. Datadog does not store the name on the server.
              terraform import <datadog_logs_index_order.name> <name>
    datadog_logs_integration_pipeline:
        subCategory: ""
        description: Provides a Datadog Logs Pipeline API resource to manage the integrations. Integration pipelines are the pipelines that are automatically installed for your organization when sending the logs with specific sources. You don't need to maintain or update these types of pipelines. Keeping them as resources, however, allows you to manage the order of your pipelines by referencing them in your datadog_logs_pipeline_order resource. If you don't need the pipeline_order feature, this resource declaration can be omitted.
        name: datadog_logs_integration_pipeline
        title: datadog_logs_integration_pipeline Resource - terraform-provider-datadog
        examples:
            - name: python
              manifest: |-
                {
                  "is_enabled": true
                }
        argumentDocs:
            id: (String) The ID of this resource.
            is_enabled: (Boolean) Boolean value to enable your pipeline.
        importStatements:
            - |-
              # To find the pipeline ID, click the "view" button in the UI to open the pipeline details.
              # The pipeline ID is the last part of the URL.
              terraform import <resource.name> <pipelineID>
    datadog_logs_metric:
        subCategory: ""
        description: Resource for interacting with the logs_metric API
        name: datadog_logs_metric
        title: datadog_logs_metric Resource - terraform-provider-datadog
        examples:
            - name: testing_logs_metric
              manifest: |-
                {
                  "compute": [
                    {
                      "aggregation_type": "distribution",
                      "path": "@duration"
                    }
                  ],
                  "filter": [
                    {
                      "query": "service:test"
                    }
                  ],
                  "group_by": [
                    {
                      "path": "@status",
                      "tag_name": "status"
                    },
                    {
                      "path": "@version",
                      "tag_name": "version"
                    }
                  ],
                  "name": "testing.logs.metric"
                }
        argumentDocs:
            aggregation_type: (String) The type of aggregation to use. This field can't be updated after creation. Valid values are count, distribution.
            compute: '(Block List, Min: 1, Max: 1) The compute rule to compute the log-based metric. This field can''t be updated after creation. (see below for nested schema)'
            filter: '(Block List, Min: 1, Max: 1) The log-based metric filter. Logs matching this filter will be aggregated in this metric. (see below for nested schema)'
            group_by: (Block Set) The rules for the group by. (see below for nested schema)
            id: (String) The ID of this resource.
            include_percentiles: (Boolean) Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have an aggregation_type of distribution.
            name: (String) The name of the log-based metric. This field can't be updated after creation.
            path: (String) The path to the value the log-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
            query: (String) The search query - following the log search syntax.
            tag_name: (String) Name of the tag that gets created.
        importStatements:
            - terraform import datadog_logs_metric.testing_logs_metric testing.logs.metric
    datadog_logs_pipeline_order:
        subCategory: ""
        description: Provides a Datadog Logs Pipeline API resource, which is used to manage Datadog log pipelines order.
        name: datadog_logs_pipeline_order
        title: datadog_logs_pipeline_order Resource - terraform-provider-datadog
        examples:
            - name: sample_pipeline_order
              manifest: |-
                {
                  "name": "sample_pipeline_order",
                  "pipelines": [
                    "${datadog_logs_custom_pipeline.sample_pipeline.id}",
                    "${datadog_logs_integration_pipeline.python.id}"
                  ]
                }
        argumentDocs:
            id: (String) The ID of this resource.
            name: (String) The name attribute in the resource datadog_logs_pipeline_order needs to be unique. It's recommended to use the same value as the resource name. No related field is available in Logs Pipeline API.
            pipelines: (List of String) The pipeline IDs list. The order of pipeline IDs in this attribute defines the overall pipeline order for logs.
        importStatements:
            - |-
              # There must be at most one datadog_logs_pipeline_order resource. Pipeline order creation is not supported from logs config API. You can import the datadog_logs_pipeline_order or create a pipeline order (which is actually doing the update operation).
              terraform import <datadog_logs_pipeline_order.name> <name>
    datadog_metric_metadata:
        subCategory: ""
        description: Provides a Datadog metric_metadata resource. This can be used to manage a metric's metadata.
        name: datadog_metric_metadata
        title: datadog_metric_metadata Resource - terraform-provider-datadog
        examples:
            - name: request_time
              manifest: |-
                {
                  "description": "99th percentile request time in milliseconds",
                  "metric": "request.time",
                  "short_name": "Request time",
                  "type": "gauge",
                  "unit": "millisecond"
                }
        argumentDocs:
            description: (String) A description of the metric.
            id: (String) The ID of this resource.
            metric: (String) The name of the metric.
            per_unit: (String) Per unit of the metric such as second in bytes per second.
            short_name: (String) A short name of the metric.
            statsd_interval: (Number) If applicable, statsd flush interval in seconds for the metric.
            type: (String) Metric type such as count, gauge, or rate. Updating a metric of type distribution is not supported. If you would like to see the distribution type returned, contact Datadog support.
            unit: (String) Primary unit of the metric such as byte or operation.
        importStatements:
            - terraform import datadog_metric_metadata.request_time request.time
    datadog_metric_tag_configuration:
        subCategory: ""
        description: Provides a Datadog metric tag configuration resource. This can be used to modify tag configurations for metrics.
        name: datadog_metric_tag_configuration
        title: datadog_metric_tag_configuration Resource - terraform-provider-datadog
        examples:
            - name: example_dist_metric
              manifest: |-
                {
                  "include_percentiles": false,
                  "metric_name": "example.terraform.dist.metric",
                  "metric_type": "distribution",
                  "tags": [
                    "sport",
                    "datacenter"
                  ]
                }
            - name: example_count_metric
              manifest: |-
                {
                  "aggregations": [
                    {
                      "space": "min",
                      "time": "avg"
                    },
                    {
                      "space": "max",
                      "time": "avg"
                    }
                  ],
                  "exclude_tags_mode": false,
                  "metric_name": "example.terraform.count.metric",
                  "metric_type": "count",
                  "tags": [
                    "sport",
                    "datacenter"
                  ]
                }
        argumentDocs:
            aggregations: '(Block Set) A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a metric_type of count, rate, or gauge. (see below for nested schema)'
            exclude_tags_mode: (Boolean) Toggle to include/exclude tags as queryable for your metric. Can only be applied to metrics that have one or more tags configured. Defaults to false.
            id: (String) The ID of this resource.
            include_percentiles: (Boolean) Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a metric_type of distribution.
            metric_name: (String) The metric name for this resource.
            metric_type: (String) The metric's type. This field can't be updated after creation. Valid values are gauge, count, rate, distribution.
            space: (String) A space aggregation for use in query. Valid values are avg, max, min, sum.
            tags: (Set of String) A list of tag keys that will be queryable for your metric.
            time: (String) A time aggregation for use in query. Valid values are avg, count, max, min, sum.
        importStatements:
            - terraform import datadog_metric_tag_configuration.example_dist_metric example.terraform.dist.metric
    datadog_monitor:
        subCategory: ""
        description: Provides a Datadog monitor resource. This can be used to create and manage Datadog monitors.
        name: datadog_monitor
        title: datadog_monitor Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "escalation_message": "Escalation message @pagerduty",
                  "include_tags": true,
                  "message": "Monitor triggered. Notify: @hipchat-channel",
                  "monitor_thresholds": [
                    {
                      "critical": 4,
                      "warning": 2
                    }
                  ],
                  "name": "Name for monitor foo",
                  "query": "avg(last_1h):avg:aws.ec2.cpu{environment:foo,host:foo} by {host} \u003e 4",
                  "tags": [
                    "foo:bar",
                    "team:fooBar"
                  ],
                  "type": "metric alert"
                }
        argumentDocs:
            aggregation: (String) The aggregation methods for event platform queries. Valid values are count, cardinality, median, pc75, pc90, pc95, pc98, pc99, sum, min, max, avg.
            compute: '(Block List, Min: 1) The compute options. (see below for nested schema)'
            critical: (String) The monitor CRITICAL threshold. Must be a number.
            critical_recovery: (String) The monitor CRITICAL recovery threshold. Must be a number.
            custom_schedule: '(Block List, Max: 1) Configuration options for the custom schedules. If start is omitted, the monitor creation time will be used. (see below for nested schema)'
            data_source: (String) The data source for event platform-based queries. Valid values are rum, ci_pipelines, ci_tests, audit, events, logs, spans, database_queries, network.
            day_starts: (String) The time of the day at which a one day cumulative evaluation window starts. Must be defined in UTC time in HH:mm format.
            enable_logs_sample: (Boolean) A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log monitors. Defaults to false.
            enable_samples: (Boolean) Whether or not a list of samples which triggered the alert is included. This is only used by CI Test and Pipeline monitors.
            escalation_message: (String) A message to include with a re-notification. Supports the @username notification allowed elsewhere.
            evaluation_delay: (Number) (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer.
            evaluation_window: '(Block List, Max: 1) Configuration options for the evaluation window. If hour_starts is set, no other fields may be set. Otherwise, day_starts and month_starts must be set together. (see below for nested schema)'
            event_query: (Block List) A timeseries formula and functions events query. (see below for nested schema)
            facet: (String) The event facet.
            force_delete: (Boolean) A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO, composite monitor).
            group_by: (Block List) Group by options. (see below for nested schema)
            group_retention_duration: '(String) The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour, and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.'
            groupby_simple_monitor: (Boolean) Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to false.
            hour_starts: (Number) The minute of the hour at which a one hour cumulative evaluation window starts. Must be between 0 and 59.
            id: (String) The ID of this resource.
            include_tags: (Boolean) A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
            indexes: (List of String) An array of index names to query in the stream.
            interval: (Number) A time interval in milliseconds.
            limit: (Number) The number of groups to return.
            locked: (Boolean, Deprecated) A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to false. Deprecated. Use restricted_roles.
            message: (String) A message to include with notifications for this monitor.
            metric: (String) The measurable attribute to compute.
            monitor_threshold_windows: '(Block List, Max: 1) A mapping containing recovery_window and trigger_window values, e.g. last_15m . Can only be used for, and are required for, anomaly monitors. (see below for nested schema)'
            monitor_thresholds: '(Block List, Max: 1) Alert thresholds of the monitor. (see below for nested schema)'
            month_starts: (Number) The day of the month at which a one month cumulative evaluation window starts. Must be a value of 1.
            name: (String) Name of Datadog monitor.
            new_group_delay: (Number) The time (in seconds) to skip evaluations for new groups.
            new_host_delay: (Number, Deprecated) Deprecated. See new_group_delay. Time (in seconds) to allow a host to boot and applications to fully start before starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors and monitors not grouped by host. The only case when this should be used is to override the default and set new_host_delay to zero for monitors grouped by host. Deprecated. Use new_group_delay except when setting new_host_delay to zero. Defaults to 300.
            no_data_timeframe: (Number) The number of minutes before a monitor will notify when data stops reporting.
            notification_preset_name: (String) Toggles the display of additional content sent in the monitor notification. Valid values are show_all, hide_query, hide_handles, hide_all.
            notify_audit: (Boolean) A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to false.
            notify_by: (Set of String) Controls what granularity a monitor alerts on. Only available for monitors with groupings. For instance, a monitor grouped by cluster, namespace, and pod can be configured to only notify on each new cluster violating the alert conditions by setting notify_by to ['cluster']. Tags mentioned in notify_by must be a subset of the grouping tags in the query. For example, a query grouped by cluster and namespace cannot notify on region. Setting notify_by to [*] configures the monitor to notify as a simple-alert.
            notify_no_data: (Boolean) A boolean indicating whether this monitor will notify when data stops reporting. Defaults to false.
            ok: (String) The monitor OK threshold. Only supported in monitor type service check. Must be a number.
            on_missing_data: '(String) Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results in different behavior depending on the monitor query type. For monitors using Count queries, an empty monitor evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than Count, for example Gauge, Measure, or Rate, the monitor shows the last known status. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors. Valid values are: show_no_data, show_and_notify_no_data, resolve, and default.'
            order: (String) Direction of sort. Valid values are asc, desc.
            priority: (String) Integer from 1 (high) to 5 (low) indicating alert severity.
            query: (String) The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending on the monitor type, please see the API Reference for details. terraform plan will validate query contents unless validate is set to false.
            recovery_window: (String) Describes how long an anomalous metric must be normal before the alert recovers.
            recurrence: '(Block List, Min: 1, Max: 1) A list of recurrence definitions. Length must be 1. (see below for nested schema)'
            renotify_interval: (Number) The number of minutes after the last notification before a monitor will re-notify on the current status. It will only re-notify if it's not resolved.
            renotify_occurrences: (Number) The number of re-notification messages that should be sent on the current status.
            renotify_statuses: (Set of String) The types of statuses for which re-notification messages should be sent. Valid values are alert, warn, no data.
            require_full_window: (Boolean) A boolean indicating whether this monitor needs a full window of data before it's evaluated. Datadog strongly recommends you set this to false for sparse metrics, otherwise some evaluations may be skipped. If there's a custom_schedule set, require_full_window must be false and will be ignored. Defaults to true.
            restricted_roles: (Set of String) A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique identifiers can be pulled from the Roles API in the data.id field.
            rrule: (String) Must be a valid rrule. See API docs for supported fields
            scheduling_options: '(Block List, Max: 1) Configuration options for scheduling. (see below for nested schema)'
            search: '(Block List, Min: 1, Max: 1) The search options. (see below for nested schema)'
            sort: '(Block List, Max: 1) The options for sorting group by results. (see below for nested schema)'
            start: (String) Time to start recurrence cycle. Similar to DTSTART. Expected format 'YYYY-MM-DDThh:mm:ss'
            tags: '(Set of String) A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it''s not currently possible to filter by these tags when querying via the API'
            timeout_h: (Number) The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
            timezone: '(String) ''tz database'' format. Example: America/New_York or UTC'
            trigger_window: (String) Describes how long a metric must be anomalous before an alert triggers.
            type: '(String) The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Note: The monitor type cannot be changed after a monitor is created. Valid values are composite, event alert, log alert, metric alert, process alert, query alert, rum alert, service check, synthetics alert, trace-analytics alert, slo alert, event-v2 alert, audit alert, ci-pipelines alert, ci-tests alert, error-tracking alert, database-monitoring alert, network-performance alert.'
            unknown: (String) The monitor UNKNOWN threshold. Only supported in monitor type service check. Must be a number.
            validate: (Boolean) If set to false, skip the validation call done during plan.
            variables: '(Block List, Max: 1) (see below for nested schema)'
            warning: (String) The monitor WARNING threshold. Must be a number.
            warning_recovery: (String) The monitor WARNING recovery threshold. Must be a number.
        importStatements:
            - terraform import datadog_monitor.bytes_received_localhost 2081
    datadog_monitor_config_policy:
        subCategory: ""
        description: Provides a Datadog monitor config policy resource. This can be used to create and manage Datadog monitor config policies.
        name: datadog_monitor_config_policy
        title: datadog_monitor_config_policy Resource - terraform-provider-datadog
        examples:
            - name: test
              manifest: |-
                {
                  "policy_type": "tag",
                  "tag_policy": [
                    {
                      "tag_key": "env",
                      "tag_key_required": false,
                      "valid_tag_values": [
                        "staging",
                        "prod"
                      ]
                    }
                  ]
                }
        argumentDocs:
            id: (String) The ID of this resource.
            policy_type: (String) The monitor config policy type Valid values are tag.
            tag_key: (String) The key of the tag
            tag_key_required: (Boolean) If a tag key is required for monitor creation
            tag_policy: '(Block List, Max: 1) Config for a tag policy. Only set if policy_type is tag. (see below for nested schema)'
            valid_tag_values: (List of String) Valid values for the tag
        importStatements: []
    datadog_monitor_json:
        subCategory: ""
        description: Provides a Datadog monitor JSON resource. This can be used to create and manage Datadog monitors using the JSON definition.
        name: datadog_monitor_json
        title: datadog_monitor_json Resource - terraform-provider-datadog
        examples:
            - name: monitor_json
              manifest: |-
                {
                  "monitor": "{\n    \"name\": \"Example monitor - service check\",\n    \"type\": \"service check\",\n    \"query\": \"\\\"ntp.in_sync\\\".by(\\\"*\\\").last(2).count_by_status()\",\n    \"message\": \"Change the message triggers if any host's clock goes out of sync with the time given by NTP. The offset threshold is configured in the Agent's 'ntp.yaml' file.\\n\\nSee [Troubleshooting NTP Offset issues](https://docs.datadoghq.com/agent/troubleshooting/ntp for more details on cause and resolution.\",\n    \"tags\": [],\n    \"multi\": true,\n\t\"restricted_roles\": null,\n    \"options\": {\n        \"include_tags\": true,\n        \"new_host_delay\": 150,\n        \"notify_audit\": false,\n        \"notify_no_data\": false,\n        \"thresholds\": {\n            \"warning\": 1,\n            \"ok\": 1,\n            \"critical\": 1\n        }\n    },\n    \"priority\": null,\n    \"classification\": \"custom\"\n}\n"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            monitor: (String) The JSON formatted definition of the monitor.
            url: (String) The URL of the monitor.
        importStatements:
            - terraform import datadog_monitor_json.monitor_json 123456
    datadog_openapi_api:
        subCategory: ""
        description: Provides a Datadog OpenAPI resource. This can be used to synchronize Datadog's API catalog https://docs.datadoghq.com/api_catalog/ with an OpenAPI https://www.openapis.org/ specifications file.
        name: datadog_openapi_api
        title: datadog_openapi_api Resource - terraform-provider-datadog
        examples:
            - name: my-api
              manifest: |-
                {
                  "spec": "${file(\"./path/my-api.yaml\")}"
                }
        argumentDocs:
            id: (String) The API ID of this resource in Datadog.
            spec: (String) The textual content of the OpenAPI specification. Use file() in order to reference another file in the repository (see exmaple).
        importStatements:
            - terraform import datadog_openapi_api.new_list "90646597-5fdb-4a17-a240-647003f8c028"
    datadog_organization_settings:
        subCategory: ""
        description: Provides a Datadog Organization resource. This can be used to manage your Datadog organization's settings.
        name: datadog_organization_settings
        title: datadog_organization_settings Resource - terraform-provider-datadog
        examples:
            - name: organization
              manifest: |-
                {
                  "name": "foo-organization"
                }
        argumentDocs:
            description: (String) Description of the organization.
            domains: (List of String) List of domains where the SAML automated user creation is enabled.
            enabled: (Boolean) Whether or not SAML is enabled for this organization. Defaults to false.
            id: (String) The ID of this resource.
            name: (String) Name for Organization.
            private_widget_share: (Boolean) Whether or not the organization users can share widgets outside of Datadog. Defaults to false.
            public_id: (String) The public_id of the organization you are operating within.
            saml: '(Block List, Min: 1, Max: 1) SAML properties (see below for nested schema)'
            saml_autocreate_access_role: '(String) The access role of the user. Options are st (standard user), adm (admin user), or ro (read-only user). Allowed enum values: st, adm , ro, ERROR Defaults to "st".'
            saml_autocreate_users_domains: '(Block List, Min: 1, Max: 1) List of domains where the SAML automated user creation is enabled. (see below for nested schema)'
            saml_can_be_enabled: (Boolean) Whether or not SAML can be enabled for this organization.
            saml_idp_endpoint: (String) Identity provider endpoint for SAML authentication.
            saml_idp_initiated_login: '(Block List, Min: 1, Max: 1) Whether or not a SAML identity provider metadata file was provided to the Datadog organization. (see below for nested schema)'
            saml_idp_metadata_uploaded: (Boolean) Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
            saml_login_url: (String) URL for SAML logging.
            saml_strict_mode: '(Block List, Min: 1, Max: 1) Whether or not the SAML strict mode is enabled. If true, all users must log in with SAML. (see below for nested schema)'
            security_contacts: (List of String) List of emails used for security event notifications from the organization.
            settings: '(Block List, Max: 1) Organization settings (see below for nested schema)'
        importStatements:
            - terraform import datadog_organization_settings.organization 11111111-2222-3333-4444-555555555555
    datadog_powerpack:
        subCategory: ""
        description: Provides a Datadog powerpack resource. This can be used to create and manage Datadog powerpacks.
        name: datadog_powerpack
        title: datadog_powerpack Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "description": "Created using the Datadog provider in terraform",
                  "layout": [
                    {
                      "height": 10,
                      "width": 3,
                      "x": 1,
                      "y": 0
                    }
                  ],
                  "live_span": "4h",
                  "template_variables": [
                    {
                      "defaults": [
                        "defaults"
                      ],
                      "name": "datacenter"
                    }
                  ],
                  "widget": [
                    {
                      "event_stream_definition": [
                        {
                          "event_size": "l",
                          "query": "*",
                          "title": "Widget Title",
                          "title_align": "right",
                          "title_size": 16
                        }
                      ]
                    }
                  ]
                }
        argumentDocs:
            additional_query_filters: (String) Additional filters applied to the SLO query.
            aggregation: (String) The aggregation method.
            aggregator: (String) The aggregation methods available for cloud cost queries. Valid values are avg, last, max, min, sum, percentile.
            alert_graph_definition: '(Block List, Max: 1) The definition for a Alert Graph widget. (see below for nested schema)'
            alert_id: (String) The ID of the monitor used by the widget.
            alert_value_definition: '(Block List, Max: 1) The definition for a Alert Value widget. (see below for nested schema)'
            alias: (String) An expression alias.
            alias_name: (String) The expression alias.
            apm_dependency_stats_query: '(Block List, Max: 1) The APM Dependency Stats query using formulas and functions. (see below for nested schema)'
            apm_query: '(Block List, Max: 1) The query to use for this widget. (see below for nested schema)'
            apm_resource_stats_query: '(Block List, Max: 1) The APM Resource Stats query using formulas and functions. (see below for nested schema)'
            apm_stats_query: '(Block List, Max: 1) (see below for nested schema)'
            audit_query: '(Block List, Max: 1) The query to use for this widget. (see below for nested schema)'
            autoscale: (Boolean) A Boolean indicating whether to automatically scale the tile.
            background_color: (String) The background color of the note.
            cell_display_mode: (String) A list of display modes for each table cell. Valid values are number, bar.
            change_definition: '(Block List, Max: 1) The definition for a Change widget. (see below for nested schema)'
            change_type: (String) Whether to show absolute or relative change. Valid values are absolute, relative.
            check: (String) The check to use in the widget.
            check_status_definition: '(Block List, Max: 1) The definition for a Check Status widget. (see below for nested schema)'
            cloud_cost_query: '(Block List, Max: 1) The Cloud Cost query using formulas and functions. (see below for nested schema)'
            color: (String) The color of the text in the widget.
            color_by_groups: (List of String) List of groups used for colors.
            color_preference: (String) Whether to colorize text or background. Valid values are background, text.
            column: (String) The facet path for the column.
            columns: (Block List) Column properties used by the front end for display. (see below for nested schema)
            comparator: (String) The comparator to use. Valid values are =, >, >=, <, <=.
            compare_to: (String) Choose from when to compare current data to. Valid values are hour_before, day_before, week_before, month_before.
            compute: '(Block List, Min: 1) The compute options. (see below for nested schema)'
            compute_query: '(Block List, Max: 1) compute_query or multi_compute is required. The map keys are listed below. (see below for nested schema)'
            conditional_formats: (Block List) Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple conditional_formats blocks are allowed using the structure below. (see below for nested schema)
            content: (String) The content of the note.
            count: (Number) The number of results to return.
            cross_org_uuids: (List of String) The source organization UUID for cross organization queries. Feature in Private Beta.
            custom_bg_color: (String) The color palette to apply to the background, same values available as palette.
            custom_fg_color: (String) The color palette to apply to the foreground, same values available as palette.
            custom_link: (Block List) A nested block describing a custom link. Multiple custom_link blocks are allowed using the structure below. (see below for nested schema)
            custom_unit: (String) The unit for the value displayed in the widget.
            data_source: (String) The data source for APM Dependency Stats queries. Valid values are apm_dependency_stats.
            defaults: (List of String) One or many default values for powerpack template variables on load. If more than one default is specified, they will be unioned together with OR.
            description: (String) The description of the powerpack.
            dimension: (String) Dimension of the Scatterplot. Valid values are x, y, radius, color.
            display_format: (String) The display setting to use. Valid values are counts, countsAndList, list.
            display_type: '(String) How the marker lines are displayed, options are one of {error, warning, info, ok} combined with one of {dashed, solid, bold}. Example: error dashed.'
            distribution_definition: '(Block List, Max: 1) The definition for a Distribution widget. (see below for nested schema)'
            env: (String) APM environment.
            event: (Block List) The definition of the event to overlay on the graph. Multiple event blocks are allowed using the structure below. (see below for nested schema)
            event_query: '(Block List, Max: 1) A timeseries formula and functions events query. (see below for nested schema)'
            event_size: (String) The size to use to display an event. Valid values are s, l.
            event_stream_definition: '(Block List, Max: 1) The definition for a Event Stream widget. (see below for nested schema)'
            event_timeline_definition: '(Block List, Max: 1) The definition for a Event Timeline widget. (see below for nested schema)'
            expression: (String) The expression name.
            facet: (String) The facet name.
            field: (String) Widget column field.
            fill: (Block List) The query used to fill the map. Exactly one nested block is allowed using the structure below (exactly one of q, apm_query, log_query, rum_query, security_query or process_query is required within the request block). (see below for nested schema)
            fill_max: (String) The max value to use to color the map.
            fill_min: (String) The min value to use to color the map.
            filter_by: (List of String) A list of processes.
            filters: (List of String) Your environment and primary tag (or * if enabled for your account).
            focus: (String) The two-letter ISO code of a country to focus the map on (or WORLD).
            font_size: (String) The size of the text in the widget.
            formula: (Block List) (see below for nested schema)
            formula_expression: (String) A string expression built from queries, formulas, and functions.
            free_text_definition: '(Block List, Max: 1) The definition for a Free Text widget. (see below for nested schema)'
            geomap_definition: '(Block List, Max: 1) The definition for a Geomap widget. (see below for nested schema)'
            global_time_target: (String) The global time target of the widget.
            group: (String) The check group to use in the widget.
            group_by: (Block List) Multiple group_by blocks are allowed using the structure below. (see below for nested schema)
            group_mode: (String) Group mode to query measures. Valid values are overall, components. Defaults to "overall".
            grouping: (String) The kind of grouping to use. Valid values are check, cluster.
            has_background: (Boolean) Whether to display a background or not. Defaults to true.
            has_border: (Boolean) Whether to display a border or not. Defaults to true.
            has_padding: (Boolean) Whether to add padding or not. Defaults to true.
            has_search_bar: (String) Controls the display of the search bar. Valid values are always, never, auto.
            heatmap_definition: '(Block List, Max: 1) The definition for a Heatmap widget. (see below for nested schema)'
            height: (Number) The height of the widget.
            hide_percent: (Boolean) Whether to hide the percentages of the groups.
            hide_total: (Boolean) Whether or not to show the total value in the widget.
            hide_value: (Boolean) Setting this to True hides values.
            hide_zero_counts: (Boolean) A Boolean indicating whether to hide empty categories.
            horizontal_align: (String) The horizontal alignment for the widget. Valid values are center, left, right.
            hostmap_definition: '(Block List, Max: 1) The definition for a Hostmap widget. (see below for nested schema)'
            id: (String) The ID of this resource.
            iframe_definition: '(Block List, Max: 1) The definition for an Iframe widget. (see below for nested schema)'
            image_definition: '(Block List, Max: 1) The definition for an Image widget (see below for nested schema)'
            image_url: (String) Displays an image as the background.
            include_zero: (Boolean) Always include zero or fit the axis to the data range.
            increase_good: (Boolean) A Boolean indicating whether an increase in the value is good (displayed in green) or not (displayed in red).
            index: (String) The name of the index to query.
            indexes: (List of String) An array of index names to query in the stream.
            input: (Block List) Array of workflow inputs to map to dashboard template variables. (see below for nested schema)
            interval: (Number) Define the time interval in seconds.
            is_column_break: (Boolean) Whether the widget should be the first one on the second column in high density or not. Only one widget in the dashboard should have this property set to true.
            is_hidden: (Boolean) The flag for toggling context menu link visibility.
            is_normalized_cpu: (Boolean) Whether to normalize the CPU percentages.
            is_upstream: (Boolean) Determines whether stats for upstream or downstream dependencies should be queried.
            label: (String) The label for the custom link URL.
            layout: '(Block List, Max: 1) The layout of the powerpack on a free-form dashboard. (see below for nested schema)'
            legend_columns: (Set of String) A list of columns to display in the legend. Valid values are value, avg, sum, min, max.
            legend_inline: '(Block List, Max: 1) Used to configure the inline legend. Cannot be used in conjunction with legend_table. (see below for nested schema)'
            legend_layout: (String) The layout of the legend displayed in the widget. Valid values are auto, horizontal, vertical.
            legend_size: (String) The size of the legend displayed in the widget.
            legend_table: '(Block List, Max: 1) Used to configure the table legend. Cannot be used in conjunction with legend_inline. (see below for nested schema)'
            limit: (Number) The maximum number of items in the group.
            line_type: (String) The type of lines displayed. Valid values are dashed, dotted, solid.
            line_width: (String) The width of line displayed. Valid values are normal, thick, thin.
            link: (String) The URL of the custom link.
            list_stream_definition: '(Block List, Max: 1) The definition for a List Stream widget. (see below for nested schema)'
            live_span: (String) The timeframe to use when displaying the widget. Valid values are 1m, 5m, 10m, 15m, 30m, 1h, 4h, 1d, 2d, 1w, 1mo, 3mo, 6mo, week_to_date, month_to_date, 1y, alert.
            log_query: '(Block List, Max: 1) The query to use for this widget. (see below for nested schema)'
            log_stream_definition: '(Block List, Max: 1) The definition for an Log Stream widget. (see below for nested schema)'
            manage_status_definition: '(Block List, Max: 1) The definition for an Manage Status widget. (see below for nested schema)'
            margin: '(String) The margins to use around the image. Note: small and large values are deprecated. Valid values are sm, md, lg, small, large.'
            marker: (Block List) A nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple marker blocks are allowed within a given tile_def block. (see below for nested schema)
            max: (String) Specify the maximum value to show on the Y-axis.
            measure: (String) SLO measures queries. Valid values are good_events, bad_events, slo_status, error_budget_remaining, burn_rate, error_budget_burndown.
            message_display: (String) The number of log lines to display. Valid values are inline, expanded-md, expanded-lg.
            metadata: (Block List) Used to define expression aliases. Multiple metadata blocks are allowed using the structure below. (see below for nested schema)
            metric: (String) The metric from the request to correlate with this conditional format.
            metric_query: '(Block List, Max: 1) A timeseries formula and functions metrics query. (see below for nested schema)'
            min: (String) Specify the minimum value to show on the Y-axis.
            multi_compute: (Block List) compute_query or multi_compute is required. Multiple multi_compute blocks are allowed using the structure below. (see below for nested schema)
            name: (String) The name for the powerpack.
            network_query: '(Block List, Max: 1) The query to use for this widget. (see below for nested schema)'
            no_group_hosts: (Boolean) A Boolean indicating whether to show ungrouped nodes.
            no_metric_hosts: (Boolean) A Boolean indicating whether to show nodes with no metrics.
            node_type: (String) The type of node used. Valid values are host, container.
            note_definition: '(Block List, Max: 1) The definition for a Note widget. (see below for nested schema)'
            on_right_yaxis: (Boolean) A Boolean indicating whether the request uses the right or left Y-Axis.
            operation_name: (String) Name of operation on service.
            order: (String) Widget sorting methods. Valid values are asc, desc.
            order_by: (String) What to order by. Valid values are change, name, present, past.
            order_dir: (String) Widget sorting method. Valid values are asc, desc.
            override_label: (String) The label ID that refers to a context menu link item. When override_label is provided, the client request omits the label field.
            palette: (String) The color palette to apply. Valid values are blue, custom_bg, custom_image, custom_text, gray_on_white, grey, green, orange, red, red_on_white, white_on_gray, white_on_green, green_on_white, white_on_red, white_on_yellow, yellow_on_white, black_on_light_yellow, black_on_light_green, black_on_light_red.
            palette_flip: (Boolean) A Boolean indicating whether to flip the palette tones.
            palette_index: (Number) Index specifying which color to use within the palette.
            precision: (Number) The precision to use when displaying the value. Use * for maximum precision.
            primary_tag: (String) The organization's host group name and value.
            primary_tag_name: (String) The name of the second primary tag used within APM; required when primary_tag_value is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
            primary_tag_value: (String) Filter APM data by the second primary tag. primary_tag_name must also be specified.
            process_query: '(Block List, Max: 1) The process query to use in the widget. The structure of this block is described below. (see below for nested schema)'
            q: (String) The metric query to use for this widget.
            query: (Block List) (see below for nested schema)
            query_string: (String) Widget query.
            query_table_definition: '(Block List, Max: 1) The definition for a Query Table widget. (see below for nested schema)'
            query_value_definition: '(Block List, Max: 1) The definition for a Query Value widget. (see below for nested schema)'
            request: (Block List) A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of q, apm_query, log_query, rum_query, security_query or process_query is required within the request block). (see below for nested schema)
            request_type: (String) The request type for the SLO List request. Valid values are slo_list.
            resource: (String) The resource name.
            resource_name: (String) APM resource.
            response_format: (String) Widget response format. Valid values are event_list.
            right_yaxis: '(Block List, Max: 1) A nested block describing the right Y-Axis Controls. See the on_right_yaxis property for which request will use this axis. The structure of this block is described below. (see below for nested schema)'
            row_type: (String) The level of detail for the request. Valid values are service, resource, span.
            rum_query: '(Block List, Max: 1) The query to use for this widget. (see below for nested schema)'
            run_workflow_definition: '(Block List, Max: 1) The definition for a Run Workflow widget. (see below for nested schema)'
            scale: '(String) Specify the scale type, options: linear, log, pow, sqrt.'
            scatterplot_definition: '(Block List, Max: 1) The definition for a Scatterplot widget. (see below for nested schema)'
            scatterplot_table: (Block List) Scatterplot request containing formulas and functions. (see below for nested schema)
            scope: (List of String) The list of tags to filter nodes by.
            search: '(Block List, Max: 1) The search options. (see below for nested schema)'
            search_by: (String) Your chosen search term.
            search_query: (String) The search query to use.
            security_query: '(Block List, Max: 1) The query to use for this widget. (see below for nested schema)'
            service: (String) APM service.
            service_level_objective_definition: '(Block List, Max: 1) The definition for a Service Level Objective widget. (see below for nested schema)'
            servicemap_definition: '(Block List, Max: 1) The definition for a Service Map widget. (see below for nested schema)'
            show_breakdown: (Boolean) Whether to show the latency breakdown or not.
            show_date_column: (Boolean) If the date column should be displayed.
            show_distribution: (Boolean) Whether to show the latency distribution or not.
            show_error_budget: (Boolean) Whether to show the error budget or not.
            show_errors: (Boolean) Whether to show the error metrics or not.
            show_hits: (Boolean) Whether to show the hits metrics or not
            show_last_triggered: (Boolean) A Boolean indicating whether to show when monitors/groups last triggered.
            show_latency: (Boolean) Whether to show the latency metrics or not.
            show_legend: (Boolean) Whether or not to show the legend on this widget.
            show_message_column: (Boolean) If the message column should be displayed.
            show_present: (Boolean) If set to true, displays the current value.
            show_priority: (Boolean) Whether to show the priorities column.
            show_resource_list: (Boolean) Whether to show the resource list or not.
            show_tick: (Boolean) Whether to show a tick or not.
            show_title: (Boolean) Whether or not title should be displayed in the powerpack.
            size: (Block List) The query used to size the map. Exactly one nested block is allowed using the structure below (exactly one of q, apm_query, log_query, rum_query, security_query or process_query is required within the request block). (see below for nested schema)
            size_format: (String) The size of the widget. Valid values are small, medium, large.
            sizing: '(String) The preferred method to adapt the dimensions of the image. The values are based on the image object-fit CSS properties. Note: zoom, fit and center values are deprecated. Valid values are fill, contain, cover, none, scale-down, zoom, fit, center.'
            slo_id: (String) ID of an SLO to query.
            slo_list_definition: '(Block List, Max: 1) The definition for an SLO (Service Level Objective) List widget. (see below for nested schema)'
            slo_query: '(Block List, Max: 1) The SLO query using formulas and functions. (see below for nested schema)'
            slo_query_type: (String) type of the SLO to query. Valid values are metric, time_slice. Defaults to "metric".
            sort: '(Block List, Max: 1) The options for sorting group by results. (see below for nested schema)'
            sort_query: '(Block List, Max: 1) A list of exactly one element describing the sort query to use. (see below for nested schema)'
            span_name: (String) APM span name
            stat: (String) APM statistic. Valid values are avg_duration, avg_root_duration, avg_spans_per_trace, error_rate, pct_exec_time, pct_of_traces, total_traces_count.
            storage: (String) Storage location (private beta).
            style: '(Block List, Max: 1) Styling options for widget formulas. (see below for nested schema)'
            summary_type: (String) The summary type to use. Valid values are monitors, groups, combined.
            sunburst_definition: '(Block List, Max: 1) The definition for a Sunburst widget. (see below for nested schema)'
            tag_filters: (List of String) An array of tags to filter by.
            tags: (Set of String) List of tags to identify this powerpack.
            tags_execution: '(String) The execution method for multi-value filters, options: and or or.'
            template_variables: (Block List) The list of template variables for this powerpack. (see below for nested schema)
            text: (String) The text to display in the widget.
            text_align: (String) The alignment of the text in the widget. Valid values are center, left, right.
            text_filter: (String) The text to use as a filter.
            tick_edge: (String) When tick = true, a string indicating on which side of the widget the tick should be displayed. Valid values are bottom, left, right, top.
            tick_pos: '(String) When tick = true, a string with a percent sign indicating the position of the tick, for example: tick_pos = "50%" is centered alignment.'
            time_windows: (List of String) A list of time windows to display in the widget. Valid values are 7d, 30d, 90d, week_to_date, previous_week, month_to_date, previous_month, global_time.
            timeframe: (String) Defines the displayed timeframe.
            timeseries_background: '(Block List, Max: 1) Set a timeseries on the widget background. (see below for nested schema)'
            timeseries_definition: '(Block List, Max: 1) The definition for a Timeseries widget. (see below for nested schema)'
            title: (String) The title of the widget.
            title_align: (String) The alignment of the widget's title. Valid values are center, left, right.
            title_size: (String) The size of the widget's title (defaults to 16).
            toplist_definition: '(Block List, Max: 1) The definition for a Toplist widget. (see below for nested schema)'
            topology_map_definition: '(Block List, Max: 1) The definition for a Topology Map widget. (see below for nested schema)'
            trace_service_definition: '(Block List, Max: 1) The definition for a Trace Service widget. (see below for nested schema)'
            treemap_definition: '(Block List, Max: 1) The definition for a Treemap widget. (see below for nested schema)'
            type: (String) Whether the Timeseries is made using an area or bars. Valid values are bars, area.
            unit: (String) The unit for the value displayed in the widget.
            url: (String) The URL to use as a data source for the widget.
            url_dark_theme: (String) The URL in dark mode to use as a data source for the widget.
            value: (Number) A value for the comparator.
            vertical_align: (String) The vertical alignment for the widget. Valid values are center, top, bottom.
            view: '(Block List, Min: 1, Max: 1) The view of the world that the map should render. (see below for nested schema)'
            view_mode: (String) The view mode for the widget. Valid values are overall, component, both.
            view_type: (String) The type of view to use when displaying the widget. Only detail is supported.
            viz_type: (String) Type of visualization to use when displaying the widget. Valid values are timeseries, toplist.
            widget: (Block List) The list of widgets to display in the powerpack. (see below for nested schema)
            widget_layout: '(Block List, Max: 1) The layout of the widget on a ''free'' dashboard. (see below for nested schema)'
            width: (Number) The width of the widget.
            workflow_id: (String) Workflow ID
            x: (Number) The position of the widget on the x (horizontal) axis. Should be greater than or equal to 0.
            xaxis: '(Block List, Max: 1) A nested block describing the X-Axis Controls. Exactly one nested block is allowed using the structure below. (see below for nested schema)'
            "y": (Number) The position of the widget on the y (vertical) axis. Should be greater than or equal to 0.
            yaxis: '(Block List, Max: 1) A nested block describing the Y-Axis Controls. The structure of this block is described below. (see below for nested schema)'
        importStatements:
            - terraform import datadog_powerpack.foo 11111111-2222-3333-4444-555555555555
    datadog_restriction_policy:
        subCategory: ""
        description: Provides a Datadog RestrictionPolicy resource. This can be used to create and manage Datadog restriction policies.
        name: datadog_restriction_policy
        title: datadog_restriction_policy Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "bindings": [
                    {
                      "principals": [
                        "role:00000000-0000-1111-0000-000000000000"
                      ],
                      "relation": "editor"
                    },
                    {
                      "principals": [
                        "org:10000000-0000-1111-0000-000000000000"
                      ],
                      "relation": "viewer"
                    }
                  ],
                  "resource_id": "security-rule:abc-def-ghi"
                }
        argumentDocs:
            bindings: (Block Set) (see below for nested schema)
            id: (String) The ID of this resource.
            principals: '(Set of String) An array of principals. A principal is a subject or group of subjects. Each principal is formatted as type:id. Supported types: role and org. The org ID can be obtained through the api/v2/users API.'
            relation: (String) The role/level of access. See this page for more details https://docs.datadoghq.com/api/latest/restriction-policies/#supported-relations-for-resources
            resource_id: (String) Identifier for the resource, formatted as resource_type:resource_id.
        importStatements:
            - terraform import datadog_restriction_policy.new_list "<policy_id>"
    datadog_role:
        subCategory: ""
        description: Provides a Datadog role resource. This can be used to create and manage Datadog roles.
        name: datadog_role
        title: datadog_role Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "name": "foo",
                  "permission": [
                    {
                      "id": "${data.datadog_permissions.bar.permissions.monitors_downtime}"
                    },
                    {
                      "id": "${data.datadog_permissions.bar.permissions.monitors_write}"
                    }
                  ]
                }
              references:
                permission.id: data.datadog_permissions.bar.permissions.monitors_write
        argumentDocs:
            id: (String) The ID of this resource.
            name: (String) Name of the role.
            permission: (Block Set) Set of objects containing the permission ID and the name of the permissions granted to this role. (see below for nested schema)
            user_count: (Number) Number of users that have this role.
            validate: (Boolean) If set to false, skip the validation call done during plan.
        importStatements:
            - |-
              # Roles can be imported using their ID, e.g.
              terraform import datadog_role.example_role 000000-0000-0000-0000-000000000000
    datadog_rum_application:
        subCategory: ""
        description: Provides a Datadog RUM application resource. This can be used to create and manage Datadog RUM applications.
        name: datadog_rum_application
        title: datadog_rum_application Resource - terraform-provider-datadog
        examples:
            - name: rum_application
              manifest: |-
                {
                  "name": "my-application",
                  "type": "browser"
                }
        argumentDocs:
            client_token: (String) The client token.
            id: (String) The ID of this resource.
            name: (String) Name of the RUM application.
            type: (String) Type of the RUM application. Supported values are browser, ios, android, react-native, flutter. Defaults to "browser".
        importStatements:
            - terraform import datadog_rum_application.rum_application a1b2c3d4-a1b2-a1b2-a1b2-a1b2c3d4e5f6
    datadog_security_monitoring_default_rule:
        subCategory: ""
        description: Provides a Datadog Security Monitoring Rule API resource for default rules. It can only be imported, you can't create a default rule.
        name: datadog_security_monitoring_default_rule
        title: datadog_security_monitoring_default_rule Resource - terraform-provider-datadog
        examples:
            - name: adefaultrule
              manifest: |-
                {
                  "case": [
                    {
                      "notifications": [
                        "@me"
                      ],
                      "status": "high"
                    }
                  ],
                  "enabled": true
                }
        argumentDocs:
            action: '(String) The type of filtering action. Allowed enum values: require, suppress Valid values are require, suppress.'
            case: '(Block List, Max: 10) Cases of the rule, this is used to update notifications. (see below for nested schema)'
            custom_tags: (Set of String) Custom tags for generated signals.
            decrease_criticality_based_on_env: (Boolean) If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with staging, test, or dev. Only available when the rule type is log_detection. Defaults to false.
            enabled: (Boolean) Enable the rule. Defaults to true.
            filter: (Block List) Additional queries to filter matched events before they are processed. (see below for nested schema)
            id: (String) The ID of this resource.
            notifications: (List of String) Notification targets for each rule case.
            options: '(Block List, Max: 1) Options on default rules. Note that only a subset of fields can be updated on default rule options. (see below for nested schema)'
            query: (String) Query for selecting logs to apply the filtering action.
            status: (String) Status of the rule case to match. Valid values are info, low, medium, high, critical.
            type: (String) The rule type.
        importStatements:
            - |-
              # Default rules need to be imported using their ID before applying.
              resource "datadog_security_monitoring_default_rule" "adefaultrule" {
              }

              terraform import datadog_security_monitoring_default_rule.adefaultrule m0o-hto-lkb
    datadog_security_monitoring_filter:
        subCategory: ""
        description: Provides a Datadog Security Monitoring Rule API resource for security filters.
        name: datadog_security_monitoring_filter
        title: datadog_security_monitoring_filter Resource - terraform-provider-datadog
        examples:
            - name: my_filter
              manifest: |-
                {
                  "exclusion_filter": [
                    {
                      "name": "first",
                      "query": "exclude some logs"
                    },
                    {
                      "name": "second",
                      "query": "exclude some other logs"
                    }
                  ],
                  "is_enabled": true,
                  "name": "My filter",
                  "query": "The filter is filtering."
                }
        argumentDocs:
            exclusion_filter: (Block List) Exclusion filters to exclude some logs from the security filter. (see below for nested schema)
            filtered_data_type: (String) The filtered data type. Valid values are logs. Defaults to "logs".
            id: (String) The ID of this resource.
            is_enabled: (Boolean) Whether the security filter is enabled.
            name: (String) The name of the security filter.
            query: (String) The query of the security filter.
            version: (Number) The version of the security filter.
        importStatements:
            - |-
              # Security monitoring filters can be imported using ID, e.g.
              terraform import datadog_security_monitoring_filter.my_filter m0o-hto-lkb
    datadog_security_monitoring_rule:
        subCategory: ""
        description: Provides a Datadog Security Monitoring Rule API resource. This can be used to create and manage Datadog security monitoring rules. To change settings for a default rule use datadog_security_default_rule instead.
        name: datadog_security_monitoring_rule
        title: datadog_security_monitoring_rule Resource - terraform-provider-datadog
        examples:
            - name: myrule
              manifest: |-
                {
                  "case": [
                    {
                      "condition": "errors \u003e 3 \u0026\u0026 warnings \u003e 10",
                      "notifications": [
                        "@user"
                      ],
                      "status": "high"
                    }
                  ],
                  "enabled": true,
                  "message": "The rule has triggered.",
                  "name": "My rule",
                  "options": [
                    {
                      "evaluation_window": 300,
                      "keep_alive": 600,
                      "max_signal_duration": 900
                    }
                  ],
                  "query": [
                    {
                      "aggregation": "count",
                      "group_by_fields": [
                        "host"
                      ],
                      "name": "errors",
                      "query": "status:error"
                    },
                    {
                      "aggregation": "count",
                      "group_by_fields": [
                        "host"
                      ],
                      "name": "warnings",
                      "query": "status:warning"
                    }
                  ],
                  "tags": [
                    "type:dos"
                  ]
                }
        argumentDocs:
            action: (String) The type of filtering action. Valid values are require, suppress.
            agent_rule: (Block List, Deprecated) Deprecated. It won't be applied anymore. Deprecated. agent_rule has been deprecated in favor of new Agent Rule resource. (see below for nested schema)
            agent_rule_id: (String) Deprecated. It won't be applied anymore.
            aggregation: (String) The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are count, cardinality, sum, max, new_value, geo_data, event_count, none. Defaults to "count".
            baseline_user_locations: (Boolean) If true, signals are suppressed for the first 24 hours. During that time, Datadog learns the user's regular access locations. This can be helpful to reduce noise and infer VPN usage or credentialed API access. Defaults to false.
            case: '(Block List, Max: 10) Cases for generating signals. (see below for nested schema)'
            condition: (String) A rule case contains logical operations (>,>=, &&, ||) to determine if a signal should be generated based on the event counts in the previously defined queries.
            correlated_by_fields: (List of String) Fields to correlate by.
            correlated_query_index: (String) Index of the rule query used to retrieve the correlated field. An empty string applies correlation on the non-projected per query attributes of the rule. Defaults to "".
            decrease_criticality_based_on_env: (Boolean) If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with staging, test, or dev. Only available when the rule type is log_detection. Defaults to false.
            default_notifications: (List of String) Notification targets for the default rule case, when none of the third-party cases match.
            default_rule_id: (String) Default Rule ID of the signal to correlate. This value is READ-ONLY.
            default_status: (String) Severity of the default rule case, when none of the third-party cases match. Valid values are info, low, medium, high, critical.
            detection_method: (String) The detection method. Valid values are threshold, new_value, anomaly_detection, impossible_travel, hardcoded, third_party, anomaly_threshold. Defaults to "threshold".
            distinct_fields: (List of String) Field for which the cardinality is measured. Sent as an array.
            enabled: (Boolean) Whether the rule is enabled. Defaults to true.
            evaluation_window: (Number) A time window is specified to match when at least one of the cases matches true. This is a sliding window and evaluates in real time. Valid values are 0, 60, 300, 600, 900, 1800, 3600, 7200.
            expression: (String) Deprecated. It won't be applied anymore.
            filter: '(Block List) Additional queries to filter matched events before they are processed. Note: This field is deprecated for log detection, signal correlation, and workload security rules. (see below for nested schema)'
            forget_after: (Number) The duration in days after which a learned value is forgotten. Valid values are 1, 2, 7, 14, 21, 28.
            group_by_fields: (List of String) Fields to group by. If empty, each log triggers a signal.
            has_extended_title: (Boolean) Whether the notifications include the triggering group-by values in their title. Defaults to false.
            id: (String) The ID of this resource.
            impossible_travel_options: '(Block List, Max: 1) Options for rules using the impossible travel detection method. (see below for nested schema)'
            keep_alive: (Number) Once a signal is generated, the signal will remain “open” if a case is matched at least once within this keep alive window (in seconds). Valid values are 0, 60, 300, 600, 900, 1800, 3600, 7200, 10800, 21600.
            learning_duration: (Number) The duration in days during which values are learned, and after which signals will be generated for values that weren't learned. If set to 0, a signal will be generated for all new values after the first value is learned. Valid values are 0, 1, 7. Defaults to 1.
            learning_method: (String) The learning method used to determine when signals should be generated for values that weren't learned. Valid values are duration, threshold. Defaults to "duration".
            learning_threshold: (Number) A number of occurrences after which signals are generated for values that weren't learned. Valid values are 0, 1. Defaults to 0.
            max_signal_duration: (Number) A signal will “close” regardless of the query being matched once the time exceeds the maximum duration (in seconds). This time is calculated from the first seen timestamp. Valid values are 0, 60, 300, 600, 900, 1800, 3600, 7200, 10800, 21600, 43200, 86400.
            message: (String) Message for generated signals.
            metric: (String, Deprecated) The target field to aggregate over when using the sum, max, or geo_data aggregations. Deprecated. Configure metrics instead. This attribute will be removed in the next major version of the provider.
            metrics: (List of String) Group of target fields to aggregate over when using the sum, max, geo_data, or new_value aggregations. The sum, max, and geo_data aggregations only accept one value in this list, whereas the new_value aggregation accepts up to five values.
            name: (String) The name of the rule.
            new_value_options: '(Block List, Max: 1) New value rules specific options. (see below for nested schema)'
            notifications: (List of String) Notification targets for each rule case.
            options: '(Block List, Max: 1) Options on rules. (see below for nested schema)'
            query: (Block List) Queries for selecting logs which are part of the rule. (see below for nested schema)
            root_query: '(Block List, Min: 1, Max: 10) Queries to be combined with third-party case queries. Each of them can have different group by fields, to aggregate differently based on the type of alert. (see below for nested schema)'
            rule_id: (String) Rule ID of the signal to correlate.
            signal_query: (Block List) Queries for selecting logs which are part of the rule. (see below for nested schema)
            signal_title_template: (String) A template for the signal title; if omitted, the title is generated based on the case name.
            status: (String) Severity of the Security Signal. Valid values are info, low, medium, high, critical.
            tags: (Set of String) Tags for generated signals.
            third_party_case: '(Block List, Max: 10) Cases for generating signals for third-party rules. Only required and accepted for third-party rules (see below for nested schema)'
            third_party_rule_options: '(Block List, Max: 1) Options for rules using the third-party detection method. (see below for nested schema)'
            type: (String) The rule type. Valid values are application_security, log_detection, workload_security, signal_correlation. Defaults to "log_detection".
            validate: (Boolean) Whether or not to validate the Rule.
        importStatements:
            - |-
              # Security monitoring rules can be imported using ID, e.g.
              terraform import datadog_security_monitoring_rule.my_rule m0o-hto-lkb
    datadog_security_monitoring_suppression:
        subCategory: ""
        description: Provides a Datadog Security Monitoring Suppression API resource. It can be used to create and manage Datadog security monitoring suppression rules.
        name: datadog_security_monitoring_suppression
        title: datadog_security_monitoring_suppression Resource - terraform-provider-datadog
        examples:
            - name: my_suppression
              manifest: |-
                {
                  "data_exclusion_query": "env:test",
                  "description": "Suppression for low severity CloudTrail signals from John Doe, excluding test environments from analysis, limited to 2024",
                  "enabled": true,
                  "expiration_date": "2024-12-31T12:00:00Z",
                  "name": "My suppression",
                  "rule_query": "severity:low source:cloudtrail",
                  "suppression_query": "@usr.id:john.doe"
                }
        argumentDocs:
            data_exclusion_query: (String) An exclusion query on the input data of the security rules, which could be logs, Agent events, or other types of data based on the security rule. Events matching this query are ignored by any detection rules referenced in the suppression rule.
            description: (String) A description for the suppression rule.
            enabled: (Boolean) Whether the suppression rule is enabled.
            expiration_date: (String) A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
            id: (String) The ID of this resource.
            name: (String) The name of the suppression rule.
            rule_query: (String) The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
            suppression_query: (String) The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. It uses the same syntax as the queries to search signals in the Signals Explorer.
        importStatements:
            - |-
              # Security monitoring suppressions can be imported using ID, for example:
              terraform import datadog_security_monitoring_suppression.my_suppression m0o-hto-lkb
    datadog_sensitive_data_scanner_group:
        subCategory: ""
        description: Provides a Sensitive Data Scanner group resource.
        name: datadog_sensitive_data_scanner_group
        title: datadog_sensitive_data_scanner_group Resource - terraform-provider-datadog
        examples:
            - name: mygroup
              manifest: |-
                {
                  "description": "A relevant description",
                  "filter": [
                    {
                      "query": "service:my-service"
                    }
                  ],
                  "is_enabled": true,
                  "name": "My new scanning group",
                  "product_list": [
                    "apm"
                  ]
                }
        argumentDocs:
            description: (String) Description of the Datadog scanning group.
            filter: '(Block List, Min: 1, Max: 1) Filter object the scanning group applies. (see below for nested schema)'
            id: (String) The ID of this resource.
            is_enabled: (Boolean) Whether or not the scanning group is enabled. If the group doesn't contain any rule or if all the rules in it are disabled, the group is force-disabled by our backend
            name: (String) Name of the Datadog scanning group.
            product_list: (Set of String) List of products the scanning group applies. Valid values are logs, rum, events, apm.
            query: (String) Query to filter the events.
        importStatements:
            - terraform import datadog_sensitive_data_scanner_group.new_list "<group_id>"
    datadog_sensitive_data_scanner_group_order:
        subCategory: ""
        description: Provides a Datadog Sensitive Data Scanner Group Order API resource. This can be used to manage the order of Datadog Sensitive Data Scanner Groups.
        name: datadog_sensitive_data_scanner_group_order
        title: datadog_sensitive_data_scanner_group_order Resource - terraform-provider-datadog
        examples:
            - name: mygrouporder
              manifest: |-
                {
                  "group_ids": [
                    "group-id-1",
                    "group-id-2",
                    "group-id-3"
                  ]
                }
        argumentDocs:
            group_ids: (List of String) The list of Sensitive Data Scanner group IDs, in order. Logs are tested against the query filter of each index one by one following the order of the list.
            id: (String) The ID of this resource.
        importStatements:
            - terraform import datadog_sensitive_data_scanner_group_order.mygrouporder order
    datadog_sensitive_data_scanner_rule:
        subCategory: ""
        description: Provides a Datadog SensitiveDataScannerRule resource. This can be used to create and manage Datadog sensitivedatascanner_rule. Setting the create_before_destroy lifecycle Meta-argument to true is highly recommended if modifying the included_keyword_configuration field to avoid unexpectedly disabling Sensitive Data Scanner groups.
        name: datadog_sensitive_data_scanner_rule
        title: datadog_sensitive_data_scanner_rule Resource - terraform-provider-datadog
        examples:
            - name: myrule
              manifest: |-
                {
                  "description": "Another description",
                  "excluded_namespaces": [
                    "username"
                  ],
                  "group_id": "${datadog_sensitive_data_scanner_group.mygroup.id}",
                  "included_keyword_configuration": [
                    {
                      "character_count": 30,
                      "keywords": [
                        "cc",
                        "credit card"
                      ]
                    }
                  ],
                  "is_enabled": true,
                  "lifecycle": [
                    {
                      "create_before_destroy": true
                    }
                  ],
                  "name": "My new rule",
                  "pattern": "myregex",
                  "priority": 1,
                  "tags": [
                    "sensitive_data:true"
                  ],
                  "text_replacement": [
                    {
                      "number_of_chars": 0,
                      "replacement_string": "",
                      "type": "hash"
                    }
                  ]
                }
              references:
                group_id: datadog_sensitive_data_scanner_group.mygroup.id
              dependencies:
                datadog_sensitive_data_scanner_group.mygroup: |-
                    {
                      "description": "A relevant description",
                      "filter": [
                        {
                          "query": "service:my-service"
                        }
                      ],
                      "is_enabled": true,
                      "name": "My new scanning group",
                      "product_list": [
                        "apm"
                      ]
                    }
            - name: mylibraryrule
              manifest: |-
                {
                  "description": "A description",
                  "excluded_namespaces": [
                    "username"
                  ],
                  "group_id": "${datadog_sensitive_data_scanner_group.mygroup.id}",
                  "is_enabled": true,
                  "name": "My library rule",
                  "standard_pattern_id": "${data.datadog_sensitive_data_scanner_standard_pattern.aws_sp.id}",
                  "tags": [
                    "sensitive_data:true"
                  ]
                }
              references:
                group_id: datadog_sensitive_data_scanner_group.mygroup.id
                standard_pattern_id: data.datadog_sensitive_data_scanner_standard_pattern.aws_sp.id
              dependencies:
                datadog_sensitive_data_scanner_group.mygroup: |-
                    {
                      "description": "A relevant description",
                      "filter": [
                        {
                          "query": "service:my-service"
                        }
                      ],
                      "is_enabled": true,
                      "name": "My new scanning group",
                      "product_list": [
                        "apm"
                      ]
                    }
        argumentDocs:
            character_count: (Number) Number of characters before the match to find a keyword validating the match. It must be between 1 and 50 (inclusive).
            description: (String) Description of the rule.
            excluded_namespaces: (List of String) Attributes excluded from the scan. If namespaces is provided, it has to be a sub-path of the namespaces array.
            group_id: (String) Id of the scanning group the rule belongs to.
            id: (String) The ID of this resource.
            included_keyword_configuration: '(Block List, Max: 1) Object defining a set of keywords and a number of characters that help reduce noise. You can provide a list of keywords you would like to check within a defined proximity of the matching pattern. If any of the keywords are found within the proximity check then the match is kept. If none are found, the match is discarded. Setting the create_before_destroy lifecycle Meta-argument to true is highly recommended if modifying this field to avoid unexpectedly disabling Sensitive Data Scanner groups. (see below for nested schema)'
            is_enabled: (Boolean) Whether or not the rule is enabled.
            keywords: (List of String) Keyword list that is checked during scanning in order to validate a match. The number of keywords in the list must be lower than or equal to 30.
            name: (String) Name of the rule.
            namespaces: (List of String) Attributes included in the scan. If namespaces is empty or missing, all attributes except excluded_namespaces are scanned. If both are missing the whole event is scanned.
            number_of_chars: (Number) Required if type == 'partial_replacement_from_beginning' or 'partial_replacement_from_end'. It must be > 0.
            pattern: (String) Not included if there is a relationship to a standard pattern.
            priority: (Number) Priority level of the rule (optional). Used to order sensitive data discovered in the sds summary page. It must be between 1 and 5 (1 being the most important).
            replacement_string: (String) Required if type == 'replacement_string'.
            standard_pattern_id: (String) Id of the standard pattern the rule refers to. If provided, then pattern must not be provided.
            tags: (List of String) List of tags.
            text_replacement: '(Block List, Max: 1) Object describing how the scanned event will be replaced. Defaults to type: none (see below for nested schema)'
            type: (String) Type of the replacement text. None means no replacement. hash means the data will be stubbed. replacement_string means that one can chose a text to replace the data. partial_replacement_from_beginning allows a user to partially replace the data from the beginning, and partial_replacement_from_end on the other hand, allows to replace data from the end. Valid values are none, hash, replacement_string, partial_replacement_from_beginning, partial_replacement_from_end.
        importStatements:
            - terraform import datadog_sensitive_data_scanner_rule.new_list "<rule_id>"
    datadog_service_account:
        subCategory: ""
        description: Provides a Datadog service account resource. This can be used to create and manage Datadog service accounts.
        name: datadog_service_account
        title: datadog_service_account Resource - terraform-provider-datadog
        examples:
            - name: bar
              manifest: |-
                {
                  "email": "new@example.com",
                  "name": "Service Account Bar",
                  "roles": [
                    "${data.datadog_role.ro_role.id}"
                  ]
                }
        argumentDocs:
            disabled: (Boolean) Whether the service account is disabled. Defaults to false.
            email: (String) Email of the associated user.
            id: (String) The ID of this resource.
            name: (String) Name for the service account.
            roles: (Set of String) A list of role IDs to assign to the service account.
        importStatements:
            - terraform import datadog_service_account.example_sa 6f1b44c0-30b2-11eb-86bc-279f7c1ebaa4
    datadog_service_account_application_key:
        subCategory: ""
        description: Provides a Datadog service_account_application_key resource. This can be used to create and manage Datadog service account application keys.
        name: datadog_service_account_application_key
        title: datadog_service_account_application_key Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "name": "Application key for managing dashboards",
                  "service_account_id": "00000000-0000-1234-0000-000000000000"
                }
        argumentDocs:
            created_at: (String) Creation date of the application key.
            id: (String) The ID of this resource.
            key: (String, Sensitive) The value of the service account application key. This value cannot be imported.
            last4: (String) The last four characters of the application key.
            name: (String) Name of the application key.
            service_account_id: (String) ID of the service account that owns this key.
        importStatements:
            - |-
              # Importing a service account's application key cannot import the value of the key.
              terraform import datadog_service_account_application_key.this "<service_account_id>:<application_key_id>"
    datadog_service_definition_yaml:
        subCategory: ""
        description: Provides a Datadog service definition resource. This can be used to create and manage Datadog service definitions in the service catalog using the YAML/JSON definition.
        name: datadog_service_definition_yaml
        title: datadog_service_definition_yaml Resource - terraform-provider-datadog
        examples:
            - name: service_definition_v2_2
              manifest: |-
                {
                  "service_definition": "schema-version: v2.2\ndd-service: shopping-cart\nteam: e-commerce-team\ncontacts:\n  - name: Support Email\n    type: email\n    contact: team@shopping.com\n  - name: Support Slack\n    type: slack\n    contact: https://www.slack.com/archives/shopping-cart\ndescription: shopping cart service responsible for managing shopping carts\ntier: high\nlifecycle: production\napplication: e-commerce\nlanguages: \n  - go\n  - python\ntype: web \nci-pipeline-fingerprints:\n  - fp1 \n  - fp2 \nlinks:\n  - name: shopping-cart runbook\n    type: runbook\n    url: https://runbook/shopping-cart\n  - name: shopping-cart architecture\n    type: doc\n    provider: gdoc\n    url: https://google.drive/shopping-cart-architecture\n  - name: shopping-cart service Wiki\n    type: doc\n    provider: wiki\n    url: https://wiki/shopping-cart\n  - name: shopping-cart source code\n    type: repo\n    provider: github\n    url: http://github/shopping-cart\ntags:\n  - business-unit:retail\n  - cost-center:engineering\nintegrations:\n  pagerduty: \n    service-url: https://www.pagerduty.com/service-directory/Pshopping-cart\nextensions:\n  mycompany.com/shopping-cart:\n    customField: customValue\n"
                }
            - name: service_definition_v2_1
              manifest: |-
                {
                  "service_definition": "schema-version: v2.1\ndd-service: shopping-cart\nteam: e-commerce-team\ncontacts:\n  - name: Support Email\n    type: email\n    contact: team@shopping.com\n  - name: Support Slack\n    type: slack\n    contact: https://www.slack.com/archives/shopping-cart\ndescription: shopping cart service responsible for managing shopping carts\ntier: high\nlifecycle: production\napplication: e-commerce\nlinks:\n  - name: shopping-cart runbook\n    type: runbook\n    url: https://runbook/shopping-cart\n  - name: shopping-cart architecture\n    type: doc\n    provider: gdoc\n    url: https://google.drive/shopping-cart-architecture\n  - name: shopping-cart service Wiki\n    type: doc\n    provider: wiki\n    url: https://wiki/shopping-cart\n  - name: shopping-cart source code\n    type: repo\n    provider: github\n    url: http://github/shopping-cart\ntags:\n  - business-unit:retail\n  - cost-center:engineering\nintegrations:\n  pagerduty: \n    service-url: https://www.pagerduty.com/service-directory/Pshopping-cart\nextensions:\n  mycompany.com/shopping-cart:\n    customField: customValue\n"
                }
            - name: service_definition_v2
              manifest: |-
                {
                  "service_definition": "schema-version: v2\ndd-service: shopping-cart\nteam: E Commerce\ncontacts:\n  - name: Support Email\n    type: email\n    contact: team@shopping.com\n  - name: Support Slack\n    type: slack\n    contact: https://www.slack.com/archives/shopping-cart\nrepos:\n  - name: shopping-cart source code\n    provider: github\n    url: http://github/shopping-cart\ndocs:\n  - name: shopping-cart architecture\n    provider: gdoc\n    url: https://google.drive/shopping-cart-architecture\n  - name: shopping-cart service Wiki\n    provider: wiki\n    url: https://wiki/shopping-cart\nlinks:\n  - name: shopping-cart runbook\n    type: runbook\n    url: https://runbook/shopping-cart\ntags:\n  - business-unit:retail\n  - cost-center:engineering\nintegrations:\n  pagerduty: https://www.pagerduty.com/service-directory/Pshopping-cart\nextensions:\n  datadoghq.com/shopping-cart:\n    customField: customValue\n"
                }
            - name: service_definition_backstage
              manifest: |-
                {
                  "service_definition": "apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  annotations:\n    backstage.io/techdocs-ref: http://a/b/c\n    some.annotation: value\n  namespace: default\n  name: shopping-cart\n  title: Shopping Cart\n  description: A shopping cart service\n  tags: [\"taga:valuea\", \"tagb:valueb\"]\n  links:\n    - title: Wiki\n      url: https://wiki/shopping-cart\n      icon: help\n  ignore-attribute:\n    id: 1\n    value: \"value\"\nspec:\n  type: service\n  lifecycle: production\n  owner: e-commerce\n  system: retail\n"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            service_definition: (String) The YAML/JSON formatted definition of the service
        importStatements:
            - terraform import datadog_service_definition_yaml.service_definition "<dd-service>"
    datadog_service_level_objective:
        subCategory: ""
        description: Provides a Datadog service level objective resource. This can be used to create and manage Datadog service level objectives.
        name: datadog_service_level_objective
        title: datadog_service_level_objective Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "description": "My custom metric SLO",
                  "name": "Example Metric SLO",
                  "query": [
                    {
                      "denominator": "sum:my.custom.count.metric{*}.as_count()",
                      "numerator": "sum:my.custom.count.metric{type:good_events}.as_count()"
                    }
                  ],
                  "tags": [
                    "foo:bar",
                    "baz"
                  ],
                  "target_threshold": 99.9,
                  "thresholds": [
                    {
                      "target": 99.9,
                      "timeframe": "7d",
                      "warning": 99.99
                    },
                    {
                      "target": 99.9,
                      "timeframe": "30d",
                      "warning": 99.99
                    }
                  ],
                  "timeframe": "30d",
                  "type": "metric",
                  "warning_threshold": 99.99
                }
            - name: bar
              manifest: |-
                {
                  "description": "My custom monitor SLO",
                  "monitor_ids": [
                    1,
                    2,
                    3
                  ],
                  "name": "Example Monitor SLO",
                  "tags": [
                    "foo:bar",
                    "baz"
                  ],
                  "target_threshold": 99.9,
                  "thresholds": [
                    {
                      "target": 99.9,
                      "timeframe": "7d",
                      "warning": 99.99
                    },
                    {
                      "target": 99.9,
                      "timeframe": "30d",
                      "warning": 99.99
                    }
                  ],
                  "timeframe": "30d",
                  "type": "monitor",
                  "warning_threshold": 99.99
                }
            - name: time_slice_slo
              manifest: |-
                {
                  "description": "My custom time slice SLO",
                  "name": "Example Time Slice SLO",
                  "sli_specification": [
                    {
                      "time_slice": [
                        {
                          "comparator": "\u003e",
                          "query": [
                            {
                              "formula": [
                                {
                                  "formula_expression": "query1"
                                }
                              ],
                              "query": [
                                {
                                  "metric_query": [
                                    {
                                      "name": "query1",
                                      "query": "avg:my.custom.count.metric{*}.as_count()"
                                    }
                                  ]
                                }
                              ]
                            }
                          ],
                          "threshold": 0.9
                        }
                      ]
                    }
                  ],
                  "tags": [
                    "service:myservice",
                    "team:myteam"
                  ],
                  "target_threshold": 99.9,
                  "thresholds": [
                    {
                      "target": 99.9,
                      "timeframe": "7d",
                      "warning": 99.99
                    }
                  ],
                  "timeframe": "7d",
                  "type": "time_slice",
                  "warning_threshold": 99.99
                }
        argumentDocs:
            comparator: (String) The comparator used to compare the SLI value to the threshold. Valid values are >, >=, <, <=.
            data_source: (String) The data source for metrics queries. Defaults to "metrics".
            denominator: (String) The sum of the total events.
            description: (String) A description of this service level objective.
            force_delete: (Boolean) A boolean indicating whether this monitor can be deleted even if it's referenced by other resources (for example, dashboards).
            formula: '(Block List, Min: 1, Max: 1) A list that contains exactly one formula, as only a single formula may be used to define a timeseries query for a time-slice SLO. (see below for nested schema)'
            formula_expression: (String) The formula string, which is an expression involving named queries.
            groups: (Set of String) A static set of groups to filter monitor-based SLOs
            id: (String) The ID of this resource.
            metric_query: '(Block List, Max: 1) A timeseries formula and functions metrics query. (see below for nested schema)'
            monitor_ids: (Set of Number) A static set of monitor IDs to use as part of the SLO
            name: (String) Name of Datadog service level objective
            numerator: (String) The sum of all the good events.
            query: '(Block List, Max: 1) The metric query of good / total events (see below for nested schema)'
            query_interval_seconds: (Number) The interval used when querying data, which defines the size of a time slice. Valid values are 60, 300. Defaults to 300.
            sli_specification: '(Block List, Max: 1) A map of SLI specifications to use as part of the SLO. (see below for nested schema)'
            tags: '(Set of String) A list of tags to associate with your service level objective. This can help you categorize and filter service level objectives in the service level objectives page of the UI. Note: it''s not currently possible to filter by these tags when querying via the API'
            target: (Number) The objective's target in (0,100).
            target_display: (String) A string representation of the target that indicates its precision. It uses trailing zeros to show significant decimal places (e.g. 98.00).
            target_threshold: (Number) The objective's target in (0,100). This must match the corresponding thresholds of the primary time frame.
            threshold: (Number) The threshold value to which each SLI value will be compared.
            thresholds: '(Block List, Min: 1) A list of thresholds and targets that define the service level objectives from the provided SLIs. (see below for nested schema)'
            time_slice: '(Block List, Min: 1, Max: 1) The time slice condition, composed of 3 parts: 1. The timeseries query, 2. The comparator, and 3. The threshold. Optionally, a fourth part, the query interval, can be provided. (see below for nested schema)'
            timeframe: (String) The primary time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are 7d, 30d, 90d, custom.
            type: (String) The type of the service level objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are metric, monitor, time_slice.
            validate: (Boolean) Whether or not to validate the SLO. It checks if monitors added to a monitor SLO already exist.
            warning: (Number) The objective's warning value in (0,100). This must be greater than the target value.
            warning_display: (String) A string representation of the warning target (see the description of the target_display field for details).
            warning_threshold: (Number) The objective's warning value in (0,100). This must be greater than the target value and match the corresponding thresholds of the primary time frame.
        importStatements:
            - |-
              # Service Level Objectives can be imported using their string ID, e.g.
              terraform import datadog_service_level_objective.baz 12345678901234567890123456789012
    datadog_slo_correction:
        subCategory: ""
        description: Resource for interacting with the slo_correction API.
        name: datadog_slo_correction
        title: datadog_slo_correction Resource - terraform-provider-datadog
        examples:
            - name: example_slo_correction
              manifest: |-
                {
                  "category": "Scheduled Maintenance",
                  "description": "correction example",
                  "end": 1735718600,
                  "slo_id": "${datadog_service_level_objective.example_slo.id}",
                  "start": 1735707000,
                  "timezone": "UTC"
                }
              references:
                slo_id: datadog_service_level_objective.example_slo.id
              dependencies:
                datadog_service_level_objective.example_slo: |-
                    {
                      "description": "some updated description about example_slo SLO",
                      "name": "example slo",
                      "query": [
                        {
                          "denominator": "sum:my.metric{type:good}.as_count() + sum:my.metric{type:bad}.as_count()",
                          "numerator": "sum:my.metric{type:good}.as_count()"
                        }
                      ],
                      "tags": [
                        "foo:bar"
                      ],
                      "thresholds": [
                        {
                          "target": 99.5,
                          "timeframe": "7d",
                          "warning": 99.8
                        }
                      ],
                      "type": "metric"
                    }
            - name: example_slo_correction_with_recurrence
              manifest: |-
                {
                  "category": "Scheduled Maintenance",
                  "description": "correction example with recurrence",
                  "duration": 3600,
                  "rrule": "FREQ=DAILY;INTERVAL=3;COUNT=3",
                  "slo_id": "${datadog_service_level_objective.example_slo.id}",
                  "start": 1735707000,
                  "timezone": "UTC"
                }
              references:
                slo_id: datadog_service_level_objective.example_slo.id
              dependencies:
                datadog_service_level_objective.example_slo: |-
                    {
                      "description": "some updated description about example_slo SLO",
                      "name": "example slo",
                      "query": [
                        {
                          "denominator": "sum:my.metric{type:good}.as_count() + sum:my.metric{type:bad}.as_count()",
                          "numerator": "sum:my.metric{type:good}.as_count()"
                        }
                      ],
                      "tags": [
                        "foo:bar"
                      ],
                      "thresholds": [
                        {
                          "target": 99.5,
                          "timeframe": "7d",
                          "warning": 99.8
                        }
                      ],
                      "type": "metric"
                    }
        argumentDocs:
            category: (String) Category the SLO correction belongs to. Valid values are Scheduled Maintenance, Outside Business Hours, Deployment, Other.
            description: (String) Description of the correction being made.
            duration: (Number) Length of time in seconds for a specified rrule recurring SLO correction (required if specifying rrule)
            end: (Number) Ending time of the correction in epoch seconds. Required for one time corrections, but optional if rrule is specified
            id: (String) The ID of this resource.
            rrule: (String) Recurrence rules as defined in the iCalendar RFC 5545. Supported rules for SLO corrections are FREQ, INTERVAL, COUNT and UNTIL.
            slo_id: (String) ID of the SLO that this correction will be applied to.
            start: (Number) Starting time of the correction in epoch seconds.
            timezone: (String) The timezone to display in the UI for the correction times (defaults to "UTC")
        importStatements:
            - terraform import datadog_slo_correction.testing_slo_correction 11111111-3fee-11eb-8a13-77cd9f15119e
    datadog_software_catalog:
        subCategory: ""
        description: Provides a Datadog Software Catalog Entity resource. This can be used to create and manage entities in Datadog Software Catalog using the YAML/JSON definition.
        name: datadog_software_catalog
        title: datadog_software_catalog Resource - terraform-provider-datadog
        examples:
            - name: service_v3
              manifest: |-
                {
                  "entity": "apiVersion: v3\nkind: service\nmetadata:\n  name: shopping-cart\n  displayName: Shopping Cart\n  inheritFrom: service:otherService\n  tags:\n    - tag:value\n  links:\n    - name: shopping-cart runbook\n      type: runbook\n      url: https://runbook/shopping-cart\n    - name: shopping-cart architecture\n      provider: gdoc\n      url: https://google.drive/shopping-cart-architecture\n      type: doc\n    - name: shopping-cart Wiki\n      provider: wiki\n      url: https://wiki/shopping-cart\n      type: doc\n    - name: shopping-cart source code\n      provider: github\n      url: http://github/shopping-cart\n      type: repo\n  contacts:\n    - name: Support Email\n      type: email\n      contact: team@shopping.com\n    - name: Support Slack\n      type: slack\n      contact: https://www.slack.com/archives/shopping-cart\n  owner: myteam\n  additionalOwners:\n    - name: opsTeam\n      type: operator\nintegrations:\n  pagerduty:\n    serviceURL: https://www.pagerduty.com/service-directory/Pshopping-cart\n  opsgenie:\n    serviceURL: https://www.opsgenie.com/service/shopping-cart\n    region: US\nextensions:\n  datadoghq.com/shopping-cart:\n    customField: customValue\nspec:\n  lifecycle: production\n  tier: \"1\"\n  type: web\n  languages:\n    - go\n    - python\n  dependsOn:\n    - service:serviceA\n    - service:serviceB\ndatadog:\n  performanceData:\n    tags:\n      - 'service:shopping-cart'\n      - 'hostname:shopping-cart'\n  events:\n    - name: \"deployment events\"\n      query: \"app:myapp AND type:github\"\n    - name: \"event type B\"\n      query: \"app:myapp AND type:github\"\n  logs:\n    - name: \"critical logs\"\n      query: \"app:myapp AND type:github\"\n    - name: \"ops logs\"\n      query: \"app:myapp AND type:github\"\n  pipelines:\n    fingerprints:\n      - fp1\n      - fp2\n  codeLocations:\n    - repositoryURL: http://github/shopping-cart.git\n      paths:\n        - baz/*.c\n        - bat/**/*\n        - ../plop/*.java\n    - repositoryURL: http://github/shopping-cart-2.git\n      paths:\n        - baz/*.c\n        - bat/**/*\n        - ../plop/*.java\n"
                }
            - name: datastore_v3
              manifest: |-
                {
                  "entity": "apiVersion: v3\nkind: datastore\nmetadata:\n  name: shopping-cart-db\n  tags:\n    - tag:value\n  links:\n    - name: shopping-cart-db runbook\n      type: runbook\n      url: https://runbook/shopping-cart\n  contacts:\n    - name: Support Email\n      type: email\n      contact: team@shopping.com\n    - name: Support Slack\n      type: slack\n      contact: https://www.slack.com/archives/shopping-cart\n  owner: myteam\n  additionalOwners:\n    - name: opsTeam\n      type: operator\nintegrations:\n  pagerduty:\n    serviceURL: https://www.pagerduty.com/service-directory/Pshopping-cart\n  opsgenie:\n    serviceURL: https://www.opsgenie.com/service/shopping-cart\n    region: US\nextensions:\n  datadoghq.com/shopping-cart-db:\n    customField: customValue\nspec:\n  lifecycle: production\n  tier: \"1\"\n  type: \"postgres\"\ndatadog:\n  performanceData:\n    tags: ['tag:random']\n"
                }
            - name: queue_v3
              manifest: |-
                {
                  "entity": "apiVersion: v3\nkind: queue\nmetadata:\n  name: order-queue\n  tags:\n    - tag:value\n  links:\n    - name: order-queue runbook\n      type: runbook\n      url: https://runbook/order-queue\n  contacts:\n    - name: Support Email\n      type: email\n      contact: team@shopping.com\n    - name: Support Slack\n      type: slack\n      contact: https://www.slack.com/archives/shopping-cart\n  owner: myteam\n  additionalOwners:\n    - name: opsTeam\n      type: operator\nintegrations:\n  pagerduty:\n    serviceURL: https://www.pagerduty.com/service-directory/Pshopping-cart\n  opsgenie:\n    serviceURL: https://www.opsgenie.com/service/shopping-cart\n    region: US\nextensions:\n  datadoghq.com/order-queue:\n    customField: customValue\nspec:\n  lifecycle: production\n  tier: \"1\"\n  type: kafka\ndatadog:\n  performanceData:\n    tags: ['tag:random']\n"
                }
            - name: system_v3
              manifest: |-
                {
                  "entity": "apiVersion: v3\nkind: system\nmetadata:\n  name: shopping-system\n  displayName: Shopping System\n  tags:\n    - tag:value\n  links:\n    - name: shopping-system runbook\n      type: runbook\n      url: https://runbook/shopping-system\n  contacts:\n    - name: Support Email\n      type: email\n      contact: team@shopping.com\n    - name: Support Slack\n      type: slack\n      contact: https://www.slack.com/archives/shopping-cart\n  owner: myteam\n  additionalOwners:\n    - name: opsTeam\n      type: operator\nintegrations:\n  pagerduty:\n    serviceURL: https://www.pagerduty.com/service-directory/Pshopping-cart\n  opsgenie:\n    serviceURL: https://www.opsgenie.com/service/shopping-cart\n    region: US\nspec:\n  components:\n    - service:shopping-cart\n    - queue:order-queue\n    - database:shopping-cart-db\nextensions:\n  datadoghq.com/shopping-system:\n    customField: customValue\ndatadog:\n  events:\n    - name: \"deployment events\"\n      query: \"app:myapp AND type:github\"\n    - name: \"event type B\"\n      query: \"app:myapp AND type:github\"\n  logs:\n    - name: \"critical logs\"\n      query: \"app:myapp AND type:github\"\n    - name: \"ops logs\"\n      query: \"app:myapp AND type:github\"\n"
                }
        argumentDocs:
            entity: (String) The catalog entity definition.
            id: (String) The ID of this resource.
        importStatements:
            - terraform import datadog_software_catalog.this <name>
    datadog_spans_metric:
        subCategory: ""
        description: Provides a Datadog SpansMetric resource. This can be used to create and manage Datadog spans_metric.
        name: datadog_spans_metric
        title: datadog_spans_metric Resource - terraform-provider-datadog
        examples:
            - name: testing_spans_metric
              manifest: |-
                {
                  "compute": [
                    {
                      "aggregation_type": "distribution",
                      "include_percentiles": false,
                      "path": "@duration"
                    }
                  ],
                  "filter": [
                    {
                      "query": "@http.status_code:200 service:my-service"
                    }
                  ],
                  "group_by": [
                    {
                      "path": "resource_name",
                      "tag_name": "resource_name"
                    }
                  ],
                  "name": "testing.span.metric"
                }
        argumentDocs:
            aggregation_type: (String) The type of aggregation to use. This field can't be updated after creation.
            compute: (Block, Optional) (see below for nested schema)
            filter: (Block, Optional) (see below for nested schema)
            group_by: (Block Set) (see below for nested schema)
            id: (String) The ID of this resource.
            include_percentiles: (Boolean) Toggle to include or exclude percentile aggregations for distribution metrics. Only present when the aggregation_type is distribution.
            name: (String) The name of the span-based metric. This field can't be updated after creation.
            path: (String) The path to the value the span-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
            query: (String) The search query - following the span search syntax. Defaults to "*".
            tag_name: (String) Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.
        importStatements:
            - terraform import datadog_spans_metric.testing_spans_metric testing.span.metric
    datadog_synthetics_concurrency_cap:
        subCategory: ""
        description: Provides a Datadog Synthetics On Demand Concurrency Cap API resource. This can be used to manage the Concurrency Cap for Synthetic tests.
        name: datadog_synthetics_concurrency_cap
        title: datadog_synthetics_concurrency_cap Resource - terraform-provider-datadog
        examples:
            - name: this
              manifest: |-
                {
                  "on_demand_concurrency_cap": 1
                }
        argumentDocs:
            id: (String) The ID of this resource.
            on_demand_concurrency_cap: (Number) Value of the on-demand concurrency cap, customizing the number of Synthetic tests run in parallel.
        importStatements:
            - |-
              # The Synthetics concurrency cap can be imported. <name> can be whatever you specify in your code. Datadog does not store the name on the server.
              terraform import datadog_synthetics_concurrency_cap.this <name>
    datadog_synthetics_global_variable:
        subCategory: ""
        description: Provides a Datadog synthetics global variable resource. This can be used to create and manage Datadog synthetics global variables.
        name: datadog_synthetics_global_variable
        title: datadog_synthetics_global_variable Resource - terraform-provider-datadog
        examples:
            - name: test_variable
              manifest: |-
                {
                  "description": "Description of the variable",
                  "name": "EXAMPLE_VARIABLE",
                  "tags": [
                    "foo:bar",
                    "env:test"
                  ],
                  "value": "variable-value"
                }
        argumentDocs:
            description: (String) Description of the global variable.
            digits: (Number) Number of digits for the OTP.
            field: (String) Required when type = http_header. Defines the header to use to extract the value
            id: (String) The ID of this resource.
            local_variable_name: (String) When type is local_variable, name of the local variable to use to extract the value.
            name: (String) Synthetics global variable name.
            options: '(Block List, Max: 1) Additional options for the variable, such as a MFA token. (see below for nested schema)'
            parse_test_id: (String) Id of the Synthetics test to use for a variable from test.
            parse_test_options: '(Block List, Max: 1) ID of the Synthetics test to use a source of the global variable value. (see below for nested schema)'
            parser: '(Block List, Max: 1) (see below for nested schema)'
            refresh_interval: (Number) Interval for which to refresh the token (in seconds).
            restricted_roles: (Set of String) A list of role identifiers to associate with the Synthetics global variable.
            secure: (Boolean) If set to true, the value of the global variable is hidden. Defaults to false.
            tags: (List of String) A list of tags to associate with your synthetics global variable.
            totp_parameters: '(Block List, Max: 1) Parameters needed for MFA/TOTP. (see below for nested schema)'
            type: (String) Defines the source to use to extract the value. Valid values are http_body, http_header, http_status_code, local_variable.
            value: (String, Sensitive) The value of the global variable.
        importStatements:
            - |-
              # Synthetics global variables can be imported using their string ID, e.g.
              terraform import datadog_synthetics_global_variable.fizz abcde123-fghi-456-jkl-mnopqrstuv
    datadog_synthetics_private_location:
        subCategory: ""
        description: Provides a Datadog synthetics private location resource. This can be used to create and manage Datadog synthetics private locations.
        name: datadog_synthetics_private_location
        title: datadog_synthetics_private_location Resource - terraform-provider-datadog
        examples:
            - name: private_location
              manifest: |-
                {
                  "description": "Description of the private location",
                  "name": "First private location",
                  "tags": [
                    "foo:bar",
                    "env:test"
                  ]
                }
        argumentDocs:
            config: (String, Sensitive) Configuration skeleton for the private location. See installation instructions of the private location on how to use this configuration.
            description: (String) Description of the private location.
            id: (String) The ID of this resource.
            metadata: '(Block List, Max: 1) The private location metadata (see below for nested schema)'
            name: (String) Synthetics private location name.
            restricted_roles: (Set of String) A list of role identifiers pulled from the Roles API to restrict read and write access.
            tags: (List of String) A list of tags to associate with your synthetics private location.
        importStatements:
            - |-
              # Synthetics private locations can be imported using their string ID, e.g.
              terraform import datadog_synthetics_private_location.bar pl:private-location-name-abcdef123456
    datadog_synthetics_test:
        subCategory: ""
        description: Provides a Datadog synthetics test resource. This can be used to create and manage Datadog synthetics test.
        name: datadog_synthetics_test
        title: Resource datadog_synthetics_test - terraform-provider-datadog
        examples:
            - name: test_uptime
              manifest: |-
                {
                  "assertion": [
                    {
                      "operator": "is",
                      "target": "200",
                      "type": "statusCode"
                    }
                  ],
                  "locations": [
                    "aws:eu-central-1"
                  ],
                  "message": "Notify @pagerduty",
                  "name": "An Uptime test on example.org",
                  "options_list": [
                    {
                      "monitor_options": [
                        {
                          "renotify_interval": 120
                        }
                      ],
                      "retry": [
                        {
                          "count": 2,
                          "interval": 300
                        }
                      ],
                      "tick_every": 900
                    }
                  ],
                  "request_definition": [
                    {
                      "method": "GET",
                      "url": "https://www.example.org"
                    }
                  ],
                  "request_headers": {
                    "Content-Type": "application/json"
                  },
                  "status": "live",
                  "subtype": "http",
                  "tags": [
                    "foo:bar",
                    "foo",
                    "env:test"
                  ],
                  "type": "api"
                }
            - name: test_api
              manifest: |-
                {
                  "assertion": [
                    {
                      "operator": "is",
                      "target": "200",
                      "type": "statusCode"
                    }
                  ],
                  "locations": [
                    "aws:eu-central-1"
                  ],
                  "message": "Notify @pagerduty",
                  "name": "An API test on example.org",
                  "options_list": [
                    {
                      "monitor_options": [
                        {
                          "renotify_interval": 120
                        }
                      ],
                      "retry": [
                        {
                          "count": 2,
                          "interval": 300
                        }
                      ],
                      "tick_every": 900
                    }
                  ],
                  "request_definition": [
                    {
                      "method": "GET",
                      "url": "https://www.example.org"
                    }
                  ],
                  "request_headers": {
                    "Authentication": "Token: 1234566789",
                    "Content-Type": "application/json"
                  },
                  "status": "live",
                  "subtype": "http",
                  "tags": [
                    "foo:bar",
                    "foo",
                    "env:test"
                  ],
                  "type": "api"
                }
            - name: test_ssl
              manifest: |-
                {
                  "assertion": [
                    {
                      "operator": "isInMoreThan",
                      "target": 30,
                      "type": "certificate"
                    }
                  ],
                  "locations": [
                    "aws:eu-central-1"
                  ],
                  "message": "Notify @pagerduty",
                  "name": "An API test on example.org",
                  "options_list": [
                    {
                      "accept_self_signed": true,
                      "tick_every": 900
                    }
                  ],
                  "request_definition": [
                    {
                      "host": "example.org",
                      "port": "443"
                    }
                  ],
                  "status": "live",
                  "subtype": "ssl",
                  "tags": [
                    "foo:bar",
                    "foo",
                    "env:test"
                  ],
                  "type": "api"
                }
            - name: test_tcp
              manifest: |-
                {
                  "assertion": [
                    {
                      "operator": "lessThan",
                      "target": 2000,
                      "type": "responseTime"
                    }
                  ],
                  "config_variable": [
                    {
                      "id": "76636cd1-82e2-4aeb-9cfe-51366a8198a2",
                      "name": "MY_GLOBAL_VAR",
                      "type": "global"
                    }
                  ],
                  "locations": [
                    "aws:eu-central-1"
                  ],
                  "message": "Notify @pagerduty",
                  "name": "An API test on example.org",
                  "options_list": [
                    {
                      "tick_every": 900
                    }
                  ],
                  "request_definition": [
                    {
                      "host": "example.org",
                      "port": "443"
                    }
                  ],
                  "status": "live",
                  "subtype": "tcp",
                  "tags": [
                    "foo:bar",
                    "foo",
                    "env:test"
                  ],
                  "type": "api"
                }
            - name: test_dns
              manifest: |-
                {
                  "assertion": [
                    {
                      "operator": "is",
                      "property": "A",
                      "target": "0.0.0.0",
                      "type": "recordSome"
                    }
                  ],
                  "locations": [
                    "aws:eu-central-1"
                  ],
                  "message": "Notify @pagerduty",
                  "name": "An API test on example.org",
                  "options_list": [
                    {
                      "tick_every": 900
                    }
                  ],
                  "request_definition": [
                    {
                      "host": "example.org"
                    }
                  ],
                  "status": "live",
                  "subtype": "dns",
                  "tags": [
                    "foo:bar",
                    "foo",
                    "env:test"
                  ],
                  "type": "api"
                }
            - name: test_multi_step
              manifest: |-
                {
                  "api_step": [
                    {
                      "assertion": [
                        {
                          "operator": "is",
                          "target": "200",
                          "type": "statusCode"
                        }
                      ],
                      "name": "An API test on example.org",
                      "request_definition": [
                        {
                          "method": "GET",
                          "url": "https://www.example.org"
                        }
                      ],
                      "request_headers": {
                        "Authentication": "Token: 1234566789",
                        "Content-Type": "application/json"
                      },
                      "subtype": "http"
                    },
                    {
                      "assertion": [
                        {
                          "operator": "is",
                          "target": "200",
                          "type": "statusCode"
                        }
                      ],
                      "name": "An API test on example.org",
                      "request_definition": [
                        {
                          "method": "GET",
                          "url": "http://example.org"
                        }
                      ],
                      "subtype": "http"
                    },
                    {
                      "assertion": [
                        {
                          "operator": "is",
                          "target": "200",
                          "type": "statusCode"
                        }
                      ],
                      "name": "A gRPC health check on example.org",
                      "request_definition": [
                        {
                          "call_type": "healthcheck",
                          "host": "example.org",
                          "port": "443",
                          "service": "greeter.Greeter"
                        }
                      ],
                      "subtype": "grpc"
                    },
                    {
                      "assertion": [
                        {
                          "operator": "is",
                          "target": "200",
                          "type": "statusCode"
                        }
                      ],
                      "name": "A gRPC behavior check on example.org",
                      "request_definition": [
                        {
                          "call_type": "unary",
                          "host": "example.org",
                          "message": "{\"name\": \"John\"}",
                          "method": "SayHello",
                          "plain_proto_file": "syntax = \"proto3\";\n\npackage greeter;\n\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n",
                          "port": "443",
                          "service": "greeter.Greeter"
                        }
                      ],
                      "subtype": "grpc"
                    }
                  ],
                  "locations": [
                    "aws:eu-central-1"
                  ],
                  "name": "Multistep API test",
                  "options_list": [
                    {
                      "accept_self_signed": true,
                      "tick_every": 900
                    }
                  ],
                  "status": "live",
                  "subtype": "multi",
                  "tags": [
                    "foo:bar",
                    "foo",
                    "env:test"
                  ],
                  "type": "api"
                }
            - name: test_browser
              manifest: |-
                {
                  "browser_step": [
                    {
                      "name": "Check current url",
                      "params": [
                        {
                          "check": "contains",
                          "value": "datadoghq"
                        }
                      ],
                      "type": "assertCurrentUrl"
                    },
                    {
                      "name": "Test a downloaded file",
                      "params": [
                        {
                          "file": "${jsonencode(\n        {\n          md5 = \"abcdef1234567890\" // MD5 hash of the file\n          sizeCheck = {\n            type = \"equals\" // \"equals\", \"greater\", \"greaterEquals\", \"lower\", \n            // \"lowerEquals\", \"notEquals\", \"between\"\n            value = 1\n            // min   = 1      // only used for \"between\"\n            // max   = 1      // only used for \"between\"\n          }\n          nameCheck = {\n            type = \"contains\" // \"contains\", \"equals\", \"isEmpty\", \"matchRegex\", \n            // \"notContains\", \"notIsEmpty\", \"notEquals\", \n            // \"notStartsWith\", \"startsWith\"\n            value = \".xls\"\n          }\n        }\n      )}"
                        }
                      ],
                      "type": "assertFileDownload"
                    }
                  ],
                  "browser_variable": [
                    {
                      "example": "597",
                      "name": "MY_PATTERN_VAR",
                      "pattern": "{{numeric(3)}}",
                      "type": "text"
                    },
                    {
                      "example": "jd8-afe-ydv.4546132139@synthetics.dtdg.co",
                      "name": "MY_EMAIL_VAR",
                      "pattern": "jd8-afe-ydv.{{ numeric(10) }}@synthetics.dtdg.co",
                      "type": "email"
                    },
                    {
                      "id": "76636cd1-82e2-4aeb-9cfe-51366a8198a2",
                      "name": "MY_GLOBAL_VAR",
                      "type": "global"
                    }
                  ],
                  "device_ids": [
                    "laptop_large"
                  ],
                  "locations": [
                    "aws:eu-central-1"
                  ],
                  "message": "Notify @qa",
                  "name": "A Browser test on example.org",
                  "options_list": [
                    {
                      "tick_every": 3600
                    }
                  ],
                  "request_definition": [
                    {
                      "method": "GET",
                      "url": "https://www.example.org"
                    }
                  ],
                  "status": "paused",
                  "tags": [],
                  "type": "browser"
                }
            - name: test_grpc_unary
              manifest: |-
                {
                  "assertion": [
                    {
                      "operator": "lessThan",
                      "target": "2000",
                      "type": "responseTime"
                    },
                    {
                      "operator": "is",
                      "target": 1,
                      "type": "grpcHealthcheckStatus"
                    },
                    {
                      "operator": "is",
                      "target": "proto target",
                      "type": "grpcProto"
                    },
                    {
                      "operator": "is",
                      "property": "property",
                      "target": "123",
                      "type": "grpcMetadata"
                    }
                  ],
                  "locations": [
                    "aws:eu-central-1"
                  ],
                  "name": "GRPC API behavior check test",
                  "options_list": [
                    {
                      "tick_every": 900
                    }
                  ],
                  "request_definition": [
                    {
                      "call_type": "unary",
                      "host": "example.org",
                      "message": "{\"name\": \"John\"}",
                      "method": "SayHello",
                      "plain_proto_file": "syntax = \"proto3\";\n\npackage greeter;\n\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n",
                      "port": "443",
                      "service": "greeter.Greeter"
                    }
                  ],
                  "request_metadata": {
                    "header": "value"
                  },
                  "status": "live",
                  "subtype": "grpc",
                  "tags": [
                    "foo:bar",
                    "foo",
                    "env:test"
                  ],
                  "type": "api"
                }
            - name: test_grpc_health
              manifest: |-
                {
                  "assertion": [
                    {
                      "operator": "lessThan",
                      "target": "2000",
                      "type": "responseTime"
                    },
                    {
                      "operator": "is",
                      "target": 1,
                      "type": "grpcHealthcheckStatus"
                    }
                  ],
                  "locations": [
                    "aws:eu-central-1"
                  ],
                  "name": "GRPC API health check test",
                  "options_list": [
                    {
                      "tick_every": 900
                    }
                  ],
                  "request_definition": [
                    {
                      "call_type": "healthcheck",
                      "host": "example.org",
                      "port": "443",
                      "service": "greeter.Greeter"
                    }
                  ],
                  "status": "live",
                  "subtype": "grpc",
                  "tags": [
                    "foo:bar",
                    "foo",
                    "env:test"
                  ],
                  "type": "api"
                }
        argumentDocs:
            accept_self_signed: (Boolean) For SSL test, whether or not the test should allow self signed certificates.
            access_key: (String, Sensitive) Access key for SIGV4 authentication.
            access_token_url: (String) Access token url for oauth-client or oauth-rop authentication.
            allow_failure: (Boolean) Determines whether or not to continue with test if this step fails.
            allow_insecure: (Boolean) Allows loading insecure content for a request in an API test or in a multistep API test step.
            api_step: (Block List) Steps for multi-step api tests (see below for nested schema)
            application_id: (String) RUM application ID used to collect RUM data for the browser test.
            assertion: (Block List) Assertions used for the test. Multiple assertion blocks are allowed with the structure below. (see below for nested schema)
            attribute: (String) Name of the attribute to use for an "assert attribute" step.
            audience: (String) Audience for oauth-client or oauth-rop authentication. Defaults to "".
            body: (String) The request body.
            body_type: (String) Type of the request body. Valid values are text/plain, application/json, text/xml, text/html, application/x-www-form-urlencoded, graphql, application/octet-stream, multipart/form-data.
            browser_step: (Block List) Steps for browser tests. (see below for nested schema)
            browser_variable: (Block List) Variables used for a browser test steps. Multiple variable blocks are allowed with the structure below. (see below for nested schema)
            bucket_key: (String) Bucket key of the file.
            call_type: (String) The type of gRPC call to perform. Valid values are healthcheck, unary.
            cert: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            certificate_domains: (List of String) By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in certificate_domains.
            check: (String) Check type to use for an assertion step. Valid values are equals, notEquals, contains, notContains, startsWith, notStartsWith, greater, lower, greaterEquals, lowerEquals, matchRegex, between, isEmpty, notIsEmpty.
            check_certificate_revocation: (Boolean) For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
            ci: '(Block List, Max: 1) CI/CD options for a Synthetic test. (see below for nested schema)'
            click_type: (String) Type of click to use for a "click" step.
            client_id: (String) Client ID for oauth-client or oauth-rop authentication.
            client_secret: (String, Sensitive) Client secret for oauth-client or oauth-rop authentication.
            client_token_id: (Number, Sensitive) RUM application API key ID used to collect RUM data for the browser test.
            code: (String) Javascript code to use for the step.
            config_variable: (Block List) Variables used for the test configuration. Multiple config_variable blocks are allowed with the structure below. (see below for nested schema)
            content: (String, Sensitive) Content of the certificate.
            count: (Number) Number of retries needed to consider a location as failed before sending a notification alert. Defaults to 0.
            day: (Number) Number representing the day of the week
            delay: (Number) Delay between each key stroke for a "type test" step.
            device_ids: (List of String) Required if type = "browser". Array with the different device IDs used to run the test. Valid values are laptop_large, tablet, mobile_small, chrome.laptop_large, chrome.tablet, chrome.mobile_small, firefox.laptop_large, firefox.tablet, firefox.mobile_small, edge.laptop_large, edge.tablet, edge.mobile_small.
            disable_cors: (Boolean) Disable Cross-Origin Resource Sharing for browser tests.
            disable_csp: (Boolean) Disable Content Security Policy for browser tests.
            dns_server: (String) DNS server to use for DNS tests (subtype = "dns").
            dns_server_port: (String) DNS server port to use for DNS tests.
            domain: (String) Domain for ntlm authentication.
            element: (String) Element to use for the step, JSON encoded string.
            element_user_locator: '(Block List, Max: 1) Custom user selector to use for the step. (see below for nested schema)'
            elementsoperator: (String) The element from the list of results to assert on. Select from firstElementMatches (the first element in the list), everyElementMatches (every element in the list), atLeastOneElementMatches (at least one element in the list), or serializationMatches (the serialized value of the list). Defaults to firstElementMatches. Defaults to "firstElementMatches".
            email: (String) Details of the email for an "assert email" step, JSON encoded string.
            example: (String) Example of the extracted variable. Defaults to "".
            execution_rule: (String) Execution rule for a Synthetics test. Valid values are blocking, non_blocking, skipped.
            extracted_value: (Block List) Values to parse and save as variables from the response. (see below for nested schema)
            fail_test_on_cannot_locate: (Boolean) Defaults to false.
            field: (String) When type is http_header or grpc_metadata, name of the header or metadatum to extract.
            file: (String) JSON encoded string used for an "assert download" step. Refer to the examples for a usage example showing the schema.
            filename: (String) File name for the certificate. Defaults to "Provided in Terraform config".
            files: (String) Details of the files for an "upload files" step, JSON encoded string.
            follow_redirects: (Boolean) Determines whether or not the API HTTP test should follow redirects.
            force_delete_dependencies: (Boolean) A boolean indicating whether this synthetics test can be deleted even if it's referenced by other resources (for example, SLOs and composite monitors).
            force_element_update: (Boolean) Force update of the "element" parameter for the step
            from: (String) The hour of the day on which scheduling starts.
            headers: (Map of String) Header name and value map.
            host: (String) Host name to perform the test with.
            http_version: (String) HTTP version to use for an HTTP request in an API test or step. Valid values are http1, http2, any. Defaults to "any".
            id: (String) The ID of this resource.
            ignore_server_certificate_error: (Boolean) Ignore server certificate error for browser tests.
            initial_navigation_timeout: (Number) Timeout before declaring the initial step as failed (in seconds) for browser tests.
            interval: (Number) Interval between a failed test and the next retry in milliseconds. Defaults to 300.
            is_critical: (Boolean) Determines whether or not to consider the entire test as failed if this step fails. Can be used only if allow_failure is true.
            is_enabled: (Boolean) Determines whether RUM data is collected during test runs.
            jsonpath: (String) The JSON path to assert.
            jsonschema: (String) The JSON Schema to validate the body against.
            key: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            locations: (Set of String) Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
            message: (String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to "".
            metaschema: (String) The meta schema to use for the JSON Schema. Defaults to "draft-07".
            method: (String) Either the HTTP method/verb to use or a gRPC method available on the service set in the service field. Required if subtype is HTTP or if subtype is grpc and callType is unary.
            min_failure_duration: (Number) Minimum amount of time in failure required to trigger an alert (in seconds). Default is 0.
            min_location_failed: (Number) Minimum number of locations in failure required to trigger an alert. Defaults to 1.
            modifiers: (List of String) Modifier to use for a "press key" step.
            monitor_id: (Number) ID of the monitor associated with the Datadog synthetics test.
            monitor_name: (String) The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
            monitor_options: '(Block List, Max: 1) (see below for nested schema)'
            monitor_priority: (Number)
            name: (String) Name of Datadog synthetics test.
            no_saving_response_body: (Boolean) Determines whether or not to save the response body.
            no_screenshot: (Boolean) Prevents saving screenshots of the step.
            number_of_packets: (Number) Number of pings to use per test for ICMP tests (subtype = "icmp") between 0 and 10.
            operator: (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
            options_list: '(Block List, Max: 1) (see below for nested schema)'
            original_file_name: (String) Original name of the file.
            params: '(Block List, Min: 1, Max: 1) Parameters for the step. (see below for nested schema)'
            parser: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            password: (String, Sensitive) Password for authentication.
            pattern: (String) Pattern of the variable. Defaults to "".
            persist_cookies: (Boolean) Persist cookies across redirects.
            plain_proto_file: (String) The content of a proto file as a string.
            playing_tab_id: (String) ID of the tab to play the subtest.
            port: (String) Port to use when performing the test.
            property: (String) If assertion type is header, this is the header name.
            proto_json_descriptor: (String, Deprecated) A protobuf JSON descriptor. Deprecated. Use plain_proto_file instead.
            region: (String) Region for SIGV4 authentication.
            renotify_interval: (Number) Specify a renotification frequency in minutes. Values available by default are 0, 10, 20, 30, 40, 50, 60, 90, 120, 180, 240, 300, 360, 720, 1440. Defaults to 0.
            request: (String) Request for an API step.
            request_basicauth: '(Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema)'
            request_client_certificate: '(Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema)'
            request_definition: '(Block List, Max: 1) Required if type = "api". The synthetics test request. (see below for nested schema)'
            request_file: (Block List) Files to be used as part of the request in the test. (see below for nested schema)
            request_headers: (Map of String) Header name and value map.
            request_metadata: (Map of String) Metadata to include when performing the gRPC request.
            request_proxy: '(Block List, Max: 1) The proxy to perform the test. (see below for nested schema)'
            request_query: (Map of String) Query arguments name and value map.
            resource: (String) Resource for oauth-client or oauth-rop authentication. Defaults to "".
            restricted_roles: (Set of String) A list of role identifiers pulled from the Roles API to restrict read and write access.
            retry: '(Block List, Max: 1) (see below for nested schema)'
            rum_settings: '(Block List, Max: 1) The RUM data collection settings for the Synthetic browser test. (see below for nested schema)'
            scheduling: '(Block List, Max: 1) Object containing timeframes and timezone used for advanced scheduling. (see below for nested schema)'
            scope: (String) Scope for oauth-client or oauth-rop authentication. Defaults to "".
            secret_key: (String, Sensitive) Secret key for SIGV4 authentication.
            secure: (Boolean) Determines whether or not the extracted value will be obfuscated.
            servername: (String) For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
            service: (String) The gRPC service on which you want to perform the gRPC call.
            service_name: (String) Service name for SIGV4 authentication.
            session_token: (String) Session token for SIGV4 authentication.
            set_cookie: (String) Cookies to be used for a browser test request, using the Set-Cookie syntax.
            should_track_hops: (Boolean) This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (subtype = "icmp").
            size: (Number) Size of the file.
            status: (String) Define whether you want to start (live) or pause (paused) a Synthetic test. Valid values are live, paused.
            subtest_public_id: (String) ID of the Synthetics test to use as subtest.
            subtype: (String) The subtype of the Synthetic API test. Defaults to http. Valid values are http, ssl, tcp, dns, multi, icmp, udp, websocket, grpc.
            tags: (List of String) A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list ([]).
            target: (String) Expected value. Depends on the assertion type, refer to Datadog documentation for details.
            targetjsonpath: '(Block List, Max: 1) Expected structure if operator is validatesJSONPath. Exactly one nested block is allowed with the structure below. (see below for nested schema)'
            targetjsonschema: '(Block List, Max: 1) Expected structure if operator is validatesJSONSchema. Exactly one nested block is allowed with the structure below. (see below for nested schema)'
            targetvalue: (String) Expected matching value.
            targetxpath: '(Block List, Max: 1) Expected structure if operator is validatesXPath. Exactly one nested block is allowed with the structure below. (see below for nested schema)'
            tick_every: (Number) How often the test should run (in seconds).
            timeframes: '(Block Set, Min: 1) Array containing objects describing the scheduling pattern to apply to each day. (see below for nested schema)'
            timeout: (Number) Timeout in seconds for the test.
            timezone: (String) Timezone in which the timeframe is based.
            timings_scope: (String) Timings scope for response time assertions. Valid values are all, withoutDNS.
            to: (String) The hour of the day on which scheduling ends.
            token_api_authentication: (String) Token API Authentication for oauth-client or oauth-rop authentication. Valid values are header, body.
            type: (String) Synthetics test type. Valid values are api, browser.
            url: (String) The URL to send the request to.
            username: (String) Username for authentication.
            value: '(Number) The time to wait in seconds. Minimum value: 0. Maximum value: 180.'
            variable: '(Block List, Max: 1) Details of the variable to extract. (see below for nested schema)'
            variables_from_script: (String) Variables defined from JavaScript code for API HTTP tests.
            with_click: (Boolean) For "file upload" steps.
            workstation: (String) Workstation for ntlm authentication.
            x: (Number) X coordinates for a "scroll step".
            xpath: (String) The xpath to assert.
            "y": (Number) Y coordinates for a "scroll step".
        importStatements:
            - |-
              # Synthetics tests can be imported using their public string ID, e.g.
              terraform import datadog_synthetics_test.fizz abc-123-xyz
    datadog_team:
        subCategory: ""
        description: Provides a Datadog Team resource. This can be used to create and manage Datadog team.
        name: datadog_team
        title: datadog_team Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "description": "Team description",
                  "handle": "example-team",
                  "name": "Example Team"
                }
        argumentDocs:
            description: (String) Free-form markdown description/content for the team's homepage.
            handle: (String) The team's identifier
            id: (String) The ID of this resource.
            link_count: (Number) The number of links belonging to the team.
            name: (String) The name of the team.
            summary: (String) A brief summary of the team, derived from the description.
            user_count: (Number) The number of users belonging to the team.
        importStatements:
            - terraform import datadog_team.foo "bf064c56-edb0-11ed-ae91-da7ad0900002"
    datadog_team_link:
        subCategory: ""
        description: Provides a Datadog TeamLink resource. This can be used to create and manage Datadog team_link.
        name: datadog_team_link
        title: datadog_team_link Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "label": "Link label",
                  "position": 0,
                  "team_id": "${datadog_team.foo.id}",
                  "url": "https://example.com"
                }
              references:
                team_id: datadog_team.foo.id
              dependencies:
                datadog_team.foo: |-
                    {
                      "description": "Example team",
                      "handle": "example-team-updated",
                      "name": "Example Team-updated"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            label: (String) The link's label.
            position: (Number) The link's position, used to sort links for the team.
            team_id: (String) ID of the team the link is associated with.
            url: (String) The URL for the link.
        importStatements:
            - terraform import datadog_team_link.new_list "${team_id}:${resource_id}"
    datadog_team_membership:
        subCategory: ""
        description: Provides a Datadog TeamMembership resource. This can be used to create and manage Datadog team_membership.
        name: datadog_team_membership
        title: datadog_team_membership Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "role": "admin",
                  "team_id": "${datadog_team.foo.id}",
                  "user_id": "${datadog_user.foo.id}"
                }
              references:
                team_id: datadog_team.foo.id
                user_id: datadog_user.foo.id
              dependencies:
                datadog_team.foo: |-
                    {
                      "description": "Example team",
                      "handle": "example-team-updated",
                      "name": "Example Team-updated"
                    }
                datadog_user.foo: |-
                    {
                      "email": "new@example.com"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            role: (String) The user's role within the team. Valid values are admin.
            team_id: (String) ID of the team the team membership is associated with.
            user_id: (String) The ID of the user.
        importStatements:
            - |-
              # This resource is imported using team_id and user_id seperated by `:`.

              terraform import datadog_team_membership.foo "${team_id}:${user_id}"
    datadog_team_permission_setting:
        subCategory: ""
        description: Provides a Datadog TeamPermissionSetting resource. This can be used to manage Datadog teampermissionsetting.
        name: datadog_team_permission_setting
        title: datadog_team_permission_setting Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "action": "manage_membership",
                  "team_id": "${datadog_team.foo.id}",
                  "value": "organization"
                }
              references:
                team_id: datadog_team.foo.id
              dependencies:
                datadog_team.foo: |-
                    {
                      "description": "Example team",
                      "handle": "example-team-updated",
                      "name": "Example Team-updated"
                    }
        argumentDocs:
            action: (String) The identifier for the action. Valid values are manage_membership, edit.
            id: (String) The ID of this resource.
            team_id: (String) ID of the team the team permission setting is associated with.
            value: (String) The action value. Valid values are dependent on the action. manage_membership action allows admins, members, organization, user_access_manage values. edit action allows admins, members, teams_manage values.
        importStatements: []
    datadog_user:
        subCategory: ""
        description: Provides a Datadog user resource. This can be used to create and manage Datadog users.
        name: datadog_user
        title: datadog_user Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "email": "new@example.com",
                  "roles": [
                    "${data.datadog_role.ro_role.id}"
                  ]
                }
        argumentDocs:
            disabled: (Boolean) Whether the user is disabled. Defaults to false.
            email: (String) Email address for user.
            id: (String) The ID of this resource.
            name: (String) Name for user.
            roles: (Set of String) A list of role IDs to assign to the user.
            send_user_invitation: (Boolean) Whether an invitation email should be sent when the user is created. Defaults to true.
            user_invitation_id: (String) The ID of the user invitation that was sent when creating the user.
            verified: (Boolean) Returns true if the user is verified.
        importStatements:
            - terraform import datadog_user.example_user 6f1b44c0-30b2-11eb-86bc-279f7c1ebaa4
    datadog_user_role:
        subCategory: ""
        description: Provides a Datadog UserRole resource. This can be used to create and manage Datadog User Roles. Conflicts may occur if used together with the datadog_user resource's roles attribute or the datadog_service_account resource's roles attribute. This resource is in beta and is subject to change.
        name: datadog_user_role
        title: datadog_user_role Resource - terraform-provider-datadog
        examples:
            - name: new_user_with_monitor_writer_role
              manifest: |-
                {
                  "role_id": "${datadog_role.monitor_writer_role.id}",
                  "user_id": "${datadog_user.new_user.id}"
                }
              references:
                role_id: datadog_role.monitor_writer_role.id
                user_id: datadog_user.new_user.id
              dependencies:
                datadog_role.monitor_writer_role: |-
                    {
                      "name": "Monitor Writer Role",
                      "permission": [
                        {
                          "id": "${data.datadog_permissions.bar.permissions.monitors_write}"
                        }
                      ]
                    }
                datadog_user.new_user: |-
                    {
                      "email": "new@example.com"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            role_id: (String) ID of the role that the user is assigned to.
            user_id: (String) The ID of the user.
        importStatements:
            - |-
              # This resource is imported using user_id and role_id seperated by `:`.

              terraform import datadog_user_role.user_with_admin_role "${role_id}:${user_id}"
    datadog_webhook:
        subCategory: ""
        description: Provides a Datadog webhook resource. This can be used to create and manage Datadog webhooks.
        name: datadog_webhook
        title: datadog_webhook Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "custom_headers": "${jsonencode({ \"custom\" : \"header\" })}",
                  "encode_as": "json",
                  "name": "test-webhook",
                  "payload": "${jsonencode({ \"custom\" : \"payload\" })}",
                  "url": "example.com"
                }
        argumentDocs:
            custom_headers: (String) The headers attached to the webhook.
            encode_as: (String) Encoding type. Valid values are json, form.
            id: (String) The ID of this resource.
            name: (String) The name of the webhook. It corresponds with <WEBHOOK_NAME>.
            payload: (String) The payload of the webhook.
            url: (String) The URL of the webhook.
        importStatements:
            - terraform import datadog_webhook.foo example-webhook
    datadog_webhook_custom_variable:
        subCategory: ""
        description: Provides a Datadog webhooks custom variable resource. This can be used to create and manage Datadog webhooks custom variables.
        name: datadog_webhook_custom_variable
        title: datadog_webhook_custom_variable Resource - terraform-provider-datadog
        examples:
            - name: foo
              manifest: |-
                {
                  "is_secret": true,
                  "name": "EXAMPLE_VARIABLE",
                  "value": "EXAMPLE-VALUE"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            is_secret: (Boolean) Whether the custom variable is secret or not.
            name: (String) The name of the variable. It corresponds with <CUSTOM_VARIABLE_NAME>.
            value: (String, Sensitive) The value of the custom variable.
        importStatements:
            - terraform import datadog_webhook_custom_variable.foo EXAMPLE_VARIABLE
